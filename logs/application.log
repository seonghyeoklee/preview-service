2025-03-30 17:17:35 [main] INFO  c.e.p.PreviewServiceApplication - Starting PreviewServiceApplication using Java 21.0.5 with PID 29432 (/Users/admin/study/preview-service/build/classes/java/main started by admin in /Users/admin/study/preview-service)
2025-03-30 17:17:35 [main] DEBUG c.e.p.PreviewServiceApplication - Running with Spring Boot v3.2.3, Spring v6.1.4
2025-03-30 17:17:35 [main] INFO  c.e.p.PreviewServiceApplication - The following 1 profile is active: "local"
2025-03-30 17:17:36 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-03-30 17:17:36 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 27 ms. Found 3 JPA repository interfaces.
2025-03-30 17:17:36 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-03-30 17:17:36 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-03-30 17:17:36 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.19]
2025-03-30 17:17:36 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-03-30 17:17:36 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1011 ms
2025-03-30 17:17:36 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-03-30 17:17:37 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:testdb user=SA
2025-03-30 17:17:37 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-03-30 17:17:37 [main] INFO  o.s.b.a.h.H2ConsoleAutoConfiguration - H2 console available at '/h2-console'. Database available at 'jdbc:h2:mem:testdb'
2025-03-30 17:17:37 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-03-30 17:17:37 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.4.Final
2025-03-30 17:17:37 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-03-30 17:17:37 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-03-30 17:17:37 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: H2Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-03-30 17:17:37 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-03-30 17:17:37 [main] DEBUG org.hibernate.SQL - 
    drop table if exists plans cascade 
2025-03-30 17:17:37 [main] DEBUG org.hibernate.SQL - 
    drop table if exists user_login_logs cascade 
2025-03-30 17:17:37 [main] DEBUG org.hibernate.SQL - 
    drop table if exists users cascade 
2025-03-30 17:17:37 [main] DEBUG org.hibernate.SQL - 
    create table plans (
        active boolean not null,
        annual_price integer not null,
        monthly_price integer not null,
        monthly_token_limit integer not null,
        created_at timestamp(6) not null,
        id bigint generated by default as identity,
        updated_at timestamp(6) not null,
        name varchar(255) not null,
        type varchar(255) not null check (type in ('FREE','STANDARD','PRO')),
        primary key (id)
    )
2025-03-30 17:17:37 [main] DEBUG org.hibernate.SQL - 
    comment on column plans.active is
        '활성화 여부'
2025-03-30 17:17:37 [main] DEBUG org.hibernate.SQL - 
    comment on column plans.annual_price is
        '연간 가격'
2025-03-30 17:17:37 [main] DEBUG org.hibernate.SQL - 
    comment on column plans.monthly_price is
        '월간 가격'
2025-03-30 17:17:37 [main] DEBUG org.hibernate.SQL - 
    comment on column plans.monthly_token_limit is
        '월간 토큰 사용량 제한'
2025-03-30 17:17:37 [main] DEBUG org.hibernate.SQL - 
    comment on column plans.created_at is
        '생성일시'
2025-03-30 17:17:37 [main] DEBUG org.hibernate.SQL - 
    comment on column plans.id is
        '플랜 고유 식별자'
2025-03-30 17:17:37 [main] DEBUG org.hibernate.SQL - 
    comment on column plans.updated_at is
        '수정일시'
2025-03-30 17:17:37 [main] DEBUG org.hibernate.SQL - 
    comment on column plans.name is
        '플랜 이름'
2025-03-30 17:17:37 [main] DEBUG org.hibernate.SQL - 
    comment on column plans.type is
        '플랜 타입'
2025-03-30 17:17:37 [main] DEBUG org.hibernate.SQL - 
    create table user_login_logs (
        successful boolean not null,
        id bigint generated by default as identity,
        login_at timestamp(6) not null,
        updated_at timestamp(6) not null,
        user_id bigint not null,
        browser_info varchar(255) not null,
        device_type varchar(255) not null,
        fail_reason varchar(255),
        ip_address varchar(255) not null,
        os_info varchar(255) not null,
        user_agent varchar(255) not null,
        primary key (id)
    )
2025-03-30 17:17:37 [main] DEBUG org.hibernate.SQL - 
    comment on column user_login_logs.successful is
        '로그인 성공 여부'
2025-03-30 17:17:37 [main] DEBUG org.hibernate.SQL - 
    comment on column user_login_logs.id is
        '로그인 기록 고유 식별자'
2025-03-30 17:17:37 [main] DEBUG org.hibernate.SQL - 
    comment on column user_login_logs.login_at is
        '로그인 시도 시간'
2025-03-30 17:17:37 [main] DEBUG org.hibernate.SQL - 
    comment on column user_login_logs.updated_at is
        '기록 수정 시간'
2025-03-30 17:17:37 [main] DEBUG org.hibernate.SQL - 
    comment on column user_login_logs.user_id is
        '로그인한 사용자'
2025-03-30 17:17:37 [main] DEBUG org.hibernate.SQL - 
    comment on column user_login_logs.browser_info is
        '브라우저 정보'
2025-03-30 17:17:37 [main] DEBUG org.hibernate.SQL - 
    comment on column user_login_logs.device_type is
        '디바이스 타입 (DESKTOP, MOBILE, TABLET)'
2025-03-30 17:17:37 [main] DEBUG org.hibernate.SQL - 
    comment on column user_login_logs.fail_reason is
        '로그인 실패 사유'
2025-03-30 17:17:37 [main] DEBUG org.hibernate.SQL - 
    comment on column user_login_logs.ip_address is
        '로그인 IP 주소'
2025-03-30 17:17:37 [main] DEBUG org.hibernate.SQL - 
    comment on column user_login_logs.os_info is
        '운영체제 정보'
2025-03-30 17:17:37 [main] DEBUG org.hibernate.SQL - 
    comment on column user_login_logs.user_agent is
        '사용자 에이전트 문자열'
2025-03-30 17:17:37 [main] DEBUG org.hibernate.SQL - 
    create table users (
        active boolean not null,
        is_email_verified boolean not null,
        created_at timestamp(6) not null,
        id bigint generated by default as identity,
        last_login_at timestamp(6),
        plan_id bigint not null,
        updated_at timestamp(6) not null,
        display_name varchar(255) not null,
        email varchar(255) not null unique,
        password varchar(255),
        photo_url varchar(255),
        provider varchar(255) not null check (provider in ('GOOGLE','APPLE')),
        role varchar(255) not null check (role in ('USER','ADMIN')),
        uid varchar(255) not null unique,
        primary key (id)
    )
2025-03-30 17:17:37 [main] DEBUG org.hibernate.SQL - 
    comment on column users.active is
        '계정 활성화 상태'
2025-03-30 17:17:37 [main] DEBUG org.hibernate.SQL - 
    comment on column users.is_email_verified is
        '이메일 인증 여부'
2025-03-30 17:17:37 [main] DEBUG org.hibernate.SQL - 
    comment on column users.created_at is
        '계정 생성 시간'
2025-03-30 17:17:37 [main] DEBUG org.hibernate.SQL - 
    comment on column users.id is
        '사용자 고유 식별자'
2025-03-30 17:17:37 [main] DEBUG org.hibernate.SQL - 
    comment on column users.last_login_at is
        '마지막 로그인 시간'
2025-03-30 17:17:37 [main] DEBUG org.hibernate.SQL - 
    comment on column users.plan_id is
        '사용자의 구독 플랜'
2025-03-30 17:17:37 [main] DEBUG org.hibernate.SQL - 
    comment on column users.updated_at is
        '계정 정보 수정 시간'
2025-03-30 17:17:37 [main] DEBUG org.hibernate.SQL - 
    comment on column users.display_name is
        '사용자 표시 이름'
2025-03-30 17:17:37 [main] DEBUG org.hibernate.SQL - 
    comment on column users.email is
        '사용자 이메일'
2025-03-30 17:17:37 [main] DEBUG org.hibernate.SQL - 
    comment on column users.password is
        '사용자 비밀번호 (소셜 로그인의 경우 임시 비밀번호)'
2025-03-30 17:17:37 [main] DEBUG org.hibernate.SQL - 
    comment on column users.photo_url is
        '프로필 사진 URL'
2025-03-30 17:17:37 [main] DEBUG org.hibernate.SQL - 
    comment on column users.provider is
        '소셜 로그인 제공자 (GOOGLE, APPLE)'
2025-03-30 17:17:37 [main] DEBUG org.hibernate.SQL - 
    comment on column users.role is
        '사용자 역할 (USER, ADMIN)'
2025-03-30 17:17:37 [main] DEBUG org.hibernate.SQL - 
    comment on column users.uid is
        '소셜 로그인 제공자의 사용자 고유 식별자'
2025-03-30 17:17:37 [main] DEBUG org.hibernate.SQL - 
    alter table if exists user_login_logs 
       add constraint FK80fvs708m86elqqexgsihwsk2 
       foreign key (user_id) 
       references users
2025-03-30 17:17:37 [main] DEBUG org.hibernate.SQL - 
    alter table if exists users 
       add constraint FKi4ttvfkp7tl33d90ldkkagrxu 
       foreign key (plan_id) 
       references plans
2025-03-30 17:17:37 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-03-30 17:17:38 [main] DEBUG c.e.p.s.FirebaseAuthenticationFilter - Filter 'firebaseAuthenticationFilter' configured for use
2025-03-30 17:17:38 [main] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - Filter 'requestResponseLoggingFilter' configured for use
2025-03-30 17:17:38 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-03-30 17:17:38 [main] WARN  o.s.b.a.s.s.UserDetailsServiceAutoConfiguration - 

Using generated security password: 1635e4f5-7474-4bd5-a528-2f0bf0ed4ccd

This generated password is for development use only. Your security configuration must be updated before running your application in production.

2025-03-30 17:17:38 [main] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 1 endpoint(s) beneath base path '/actuator'
2025-03-30 17:17:38 [main] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@1a9ba6c2, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@2e940dd0, org.springframework.security.web.context.SecurityContextHolderFilter@6272936b, org.springframework.security.web.header.HeaderWriterFilter@228c854f, org.springframework.web.filter.CorsFilter@24a4e9c0, org.springframework.security.web.authentication.logout.LogoutFilter@1a91d15f, com.evawova.preview.security.FirebaseAuthenticationFilter@2ff2a096, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@5cb4e255, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@34f37ed4, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@609a996f, org.springframework.security.web.session.SessionManagementFilter@5765cd21, org.springframework.security.web.access.ExceptionTranslationFilter@50d02417, org.springframework.security.web.access.intercept.AuthorizationFilter@165634aa]
2025-03-30 17:17:39 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-03-30 17:17:39 [main] INFO  c.e.p.PreviewServiceApplication - Started PreviewServiceApplication in 3.519 seconds (process running for 3.857)
2025-03-30 17:17:39 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        plans p1_0
2025-03-30 17:17:39 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        plans
        (active, annual_price, created_at, monthly_price, monthly_token_limit, name, type, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
2025-03-30 17:17:39 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        plans
        (active, annual_price, created_at, monthly_price, monthly_token_limit, name, type, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
2025-03-30 17:17:39 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        plans
        (active, annual_price, created_at, monthly_price, monthly_token_limit, name, type, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
2025-03-30 17:18:42 [main] INFO  c.e.p.PreviewServiceApplication - Starting PreviewServiceApplication using Java 21.0.5 with PID 29672 (/Users/admin/study/preview-service/bin/main started by admin in /Users/admin/study/preview-service)
2025-03-30 17:18:42 [main] DEBUG c.e.p.PreviewServiceApplication - Running with Spring Boot v3.2.3, Spring v6.1.4
2025-03-30 17:18:42 [main] INFO  c.e.p.PreviewServiceApplication - The following 1 profile is active: "local"
2025-03-30 17:18:43 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-03-30 17:18:43 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 41 ms. Found 3 JPA repository interfaces.
2025-03-30 17:18:43 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-03-30 17:18:43 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-03-30 17:18:43 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.19]
2025-03-30 17:18:43 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-03-30 17:18:43 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1119 ms
2025-03-30 17:18:44 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-03-30 17:18:44 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:testdb user=SA
2025-03-30 17:18:44 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-03-30 17:18:44 [main] INFO  o.s.b.a.h.H2ConsoleAutoConfiguration - H2 console available at '/h2-console'. Database available at 'jdbc:h2:mem:testdb'
2025-03-30 17:18:44 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-03-30 17:18:44 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.4.Final
2025-03-30 17:18:44 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-03-30 17:18:44 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-03-30 17:18:44 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: H2Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-03-30 17:18:45 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-03-30 17:18:45 [main] DEBUG org.hibernate.SQL - 
    drop table if exists plans cascade 
2025-03-30 17:18:45 [main] DEBUG org.hibernate.SQL - 
    drop table if exists user_login_logs cascade 
2025-03-30 17:18:45 [main] DEBUG org.hibernate.SQL - 
    drop table if exists users cascade 
2025-03-30 17:18:45 [main] DEBUG org.hibernate.SQL - 
    create table plans (
        active boolean not null,
        annual_price integer not null,
        monthly_price integer not null,
        monthly_token_limit integer not null,
        created_at timestamp(6) not null,
        id bigint generated by default as identity,
        updated_at timestamp(6) not null,
        name varchar(255) not null,
        type varchar(255) not null check (type in ('FREE','STANDARD','PRO')),
        primary key (id)
    )
2025-03-30 17:18:45 [main] DEBUG org.hibernate.SQL - 
    comment on column plans.active is
        '활성화 여부'
2025-03-30 17:18:45 [main] DEBUG org.hibernate.SQL - 
    comment on column plans.annual_price is
        '연간 가격'
2025-03-30 17:18:45 [main] DEBUG org.hibernate.SQL - 
    comment on column plans.monthly_price is
        '월간 가격'
2025-03-30 17:18:45 [main] DEBUG org.hibernate.SQL - 
    comment on column plans.monthly_token_limit is
        '월간 토큰 사용량 제한'
2025-03-30 17:18:45 [main] DEBUG org.hibernate.SQL - 
    comment on column plans.created_at is
        '생성일시'
2025-03-30 17:18:45 [main] DEBUG org.hibernate.SQL - 
    comment on column plans.id is
        '플랜 고유 식별자'
2025-03-30 17:18:45 [main] DEBUG org.hibernate.SQL - 
    comment on column plans.updated_at is
        '수정일시'
2025-03-30 17:18:45 [main] DEBUG org.hibernate.SQL - 
    comment on column plans.name is
        '플랜 이름'
2025-03-30 17:18:45 [main] DEBUG org.hibernate.SQL - 
    comment on column plans.type is
        '플랜 타입'
2025-03-30 17:18:45 [main] DEBUG org.hibernate.SQL - 
    create table user_login_logs (
        successful boolean not null,
        id bigint generated by default as identity,
        login_at timestamp(6) not null,
        updated_at timestamp(6) not null,
        user_id bigint not null,
        browser_info varchar(255) not null,
        device_type varchar(255) not null,
        fail_reason varchar(255),
        ip_address varchar(255) not null,
        os_info varchar(255) not null,
        user_agent varchar(255) not null,
        primary key (id)
    )
2025-03-30 17:18:45 [main] DEBUG org.hibernate.SQL - 
    comment on column user_login_logs.successful is
        '로그인 성공 여부'
2025-03-30 17:18:45 [main] DEBUG org.hibernate.SQL - 
    comment on column user_login_logs.id is
        '로그인 기록 고유 식별자'
2025-03-30 17:18:45 [main] DEBUG org.hibernate.SQL - 
    comment on column user_login_logs.login_at is
        '로그인 시도 시간'
2025-03-30 17:18:45 [main] DEBUG org.hibernate.SQL - 
    comment on column user_login_logs.updated_at is
        '기록 수정 시간'
2025-03-30 17:18:45 [main] DEBUG org.hibernate.SQL - 
    comment on column user_login_logs.user_id is
        '로그인한 사용자'
2025-03-30 17:18:45 [main] DEBUG org.hibernate.SQL - 
    comment on column user_login_logs.browser_info is
        '브라우저 정보'
2025-03-30 17:18:45 [main] DEBUG org.hibernate.SQL - 
    comment on column user_login_logs.device_type is
        '디바이스 타입 (DESKTOP, MOBILE, TABLET)'
2025-03-30 17:18:45 [main] DEBUG org.hibernate.SQL - 
    comment on column user_login_logs.fail_reason is
        '로그인 실패 사유'
2025-03-30 17:18:45 [main] DEBUG org.hibernate.SQL - 
    comment on column user_login_logs.ip_address is
        '로그인 IP 주소'
2025-03-30 17:18:45 [main] DEBUG org.hibernate.SQL - 
    comment on column user_login_logs.os_info is
        '운영체제 정보'
2025-03-30 17:18:45 [main] DEBUG org.hibernate.SQL - 
    comment on column user_login_logs.user_agent is
        '사용자 에이전트 문자열'
2025-03-30 17:18:45 [main] DEBUG org.hibernate.SQL - 
    create table users (
        active boolean not null,
        is_email_verified boolean not null,
        created_at timestamp(6) not null,
        id bigint generated by default as identity,
        last_login_at timestamp(6),
        plan_id bigint not null,
        updated_at timestamp(6) not null,
        display_name varchar(255) not null,
        email varchar(255) not null unique,
        password varchar(255),
        photo_url varchar(255),
        provider varchar(255) not null check (provider in ('GOOGLE','APPLE')),
        role varchar(255) not null check (role in ('USER','ADMIN')),
        uid varchar(255) not null unique,
        primary key (id)
    )
2025-03-30 17:18:45 [main] DEBUG org.hibernate.SQL - 
    comment on column users.active is
        '계정 활성화 상태'
2025-03-30 17:18:45 [main] DEBUG org.hibernate.SQL - 
    comment on column users.is_email_verified is
        '이메일 인증 여부'
2025-03-30 17:18:45 [main] DEBUG org.hibernate.SQL - 
    comment on column users.created_at is
        '계정 생성 시간'
2025-03-30 17:18:45 [main] DEBUG org.hibernate.SQL - 
    comment on column users.id is
        '사용자 고유 식별자'
2025-03-30 17:18:45 [main] DEBUG org.hibernate.SQL - 
    comment on column users.last_login_at is
        '마지막 로그인 시간'
2025-03-30 17:18:45 [main] DEBUG org.hibernate.SQL - 
    comment on column users.plan_id is
        '사용자의 구독 플랜'
2025-03-30 17:18:45 [main] DEBUG org.hibernate.SQL - 
    comment on column users.updated_at is
        '계정 정보 수정 시간'
2025-03-30 17:18:45 [main] DEBUG org.hibernate.SQL - 
    comment on column users.display_name is
        '사용자 표시 이름'
2025-03-30 17:18:45 [main] DEBUG org.hibernate.SQL - 
    comment on column users.email is
        '사용자 이메일'
2025-03-30 17:18:45 [main] DEBUG org.hibernate.SQL - 
    comment on column users.password is
        '사용자 비밀번호 (소셜 로그인의 경우 임시 비밀번호)'
2025-03-30 17:18:45 [main] DEBUG org.hibernate.SQL - 
    comment on column users.photo_url is
        '프로필 사진 URL'
2025-03-30 17:18:45 [main] DEBUG org.hibernate.SQL - 
    comment on column users.provider is
        '소셜 로그인 제공자 (GOOGLE, APPLE)'
2025-03-30 17:18:45 [main] DEBUG org.hibernate.SQL - 
    comment on column users.role is
        '사용자 역할 (USER, ADMIN)'
2025-03-30 17:18:45 [main] DEBUG org.hibernate.SQL - 
    comment on column users.uid is
        '소셜 로그인 제공자의 사용자 고유 식별자'
2025-03-30 17:18:45 [main] DEBUG org.hibernate.SQL - 
    alter table if exists user_login_logs 
       add constraint FK80fvs708m86elqqexgsihwsk2 
       foreign key (user_id) 
       references users
2025-03-30 17:18:45 [main] DEBUG org.hibernate.SQL - 
    alter table if exists users 
       add constraint FKi4ttvfkp7tl33d90ldkkagrxu 
       foreign key (plan_id) 
       references plans
2025-03-30 17:18:45 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-03-30 17:18:45 [main] DEBUG c.e.p.s.FirebaseAuthenticationFilter - Filter 'firebaseAuthenticationFilter' configured for use
2025-03-30 17:18:45 [main] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - Filter 'requestResponseLoggingFilter' configured for use
2025-03-30 17:18:45 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-03-30 17:18:45 [main] WARN  o.s.b.a.s.s.UserDetailsServiceAutoConfiguration - 

Using generated security password: b948d8ef-fa17-4707-8d53-103c51e0b7c8

This generated password is for development use only. Your security configuration must be updated before running your application in production.

2025-03-30 17:18:45 [main] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 1 endpoint(s) beneath base path '/actuator'
2025-03-30 17:18:45 [main] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@7d911f95, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@7313e4fb, org.springframework.security.web.context.SecurityContextHolderFilter@3dab9366, org.springframework.security.web.header.HeaderWriterFilter@6ad2a8db, org.springframework.web.filter.CorsFilter@3e5e7f4c, org.springframework.security.web.authentication.logout.LogoutFilter@54e0b29c, com.evawova.preview.security.FirebaseAuthenticationFilter@14d7a962, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@4bcfa08b, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@7b491b89, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@620ba19c, org.springframework.security.web.session.SessionManagementFilter@609a996f, org.springframework.security.web.access.ExceptionTranslationFilter@4c2b8df7, org.springframework.security.web.access.intercept.AuthorizationFilter@5c44bce3]
2025-03-30 17:18:46 [main] WARN  o.s.b.w.s.c.AnnotationConfigServletWebServerApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.context.ApplicationContextException: Failed to start bean 'webServerStartStop'
2025-03-30 17:18:46 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-03-30 17:18:46 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-03-30 17:18:46 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-03-30 17:18:46 [main] INFO  o.s.b.a.l.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-03-30 17:18:46 [main] ERROR o.s.b.d.LoggingFailureAnalysisReporter - 

***************************
APPLICATION FAILED TO START
***************************

Description:

Web server failed to start. Port 8080 was already in use.

Action:

Identify and stop the process that's listening on port 8080 or configure this application to listen on another port.

2025-03-30 17:18:53 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-03-30 17:18:53 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-03-30 17:18:53 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-03-30 17:18:58 [main] INFO  c.e.p.PreviewServiceApplication - Starting PreviewServiceApplication using Java 21.0.5 with PID 29810 (/Users/admin/study/preview-service/bin/main started by admin in /Users/admin/study/preview-service)
2025-03-30 17:18:58 [main] DEBUG c.e.p.PreviewServiceApplication - Running with Spring Boot v3.2.3, Spring v6.1.4
2025-03-30 17:18:58 [main] INFO  c.e.p.PreviewServiceApplication - The following 1 profile is active: "local"
2025-03-30 17:18:59 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-03-30 17:18:59 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 35 ms. Found 3 JPA repository interfaces.
2025-03-30 17:18:59 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-03-30 17:18:59 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-03-30 17:18:59 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.19]
2025-03-30 17:18:59 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-03-30 17:18:59 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1215 ms
2025-03-30 17:18:59 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-03-30 17:18:59 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:testdb user=SA
2025-03-30 17:18:59 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-03-30 17:18:59 [main] INFO  o.s.b.a.h.H2ConsoleAutoConfiguration - H2 console available at '/h2-console'. Database available at 'jdbc:h2:mem:testdb'
2025-03-30 17:19:00 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-03-30 17:19:00 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.4.Final
2025-03-30 17:19:00 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-03-30 17:19:00 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-03-30 17:19:00 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: H2Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-03-30 17:19:00 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-03-30 17:19:00 [main] DEBUG org.hibernate.SQL - 
    drop table if exists plans cascade 
2025-03-30 17:19:00 [main] DEBUG org.hibernate.SQL - 
    drop table if exists user_login_logs cascade 
2025-03-30 17:19:00 [main] DEBUG org.hibernate.SQL - 
    drop table if exists users cascade 
2025-03-30 17:19:00 [main] DEBUG org.hibernate.SQL - 
    create table plans (
        active boolean not null,
        annual_price integer not null,
        monthly_price integer not null,
        monthly_token_limit integer not null,
        created_at timestamp(6) not null,
        id bigint generated by default as identity,
        updated_at timestamp(6) not null,
        name varchar(255) not null,
        type varchar(255) not null check (type in ('FREE','STANDARD','PRO')),
        primary key (id)
    )
2025-03-30 17:19:00 [main] DEBUG org.hibernate.SQL - 
    comment on column plans.active is
        '활성화 여부'
2025-03-30 17:19:00 [main] DEBUG org.hibernate.SQL - 
    comment on column plans.annual_price is
        '연간 가격'
2025-03-30 17:19:00 [main] DEBUG org.hibernate.SQL - 
    comment on column plans.monthly_price is
        '월간 가격'
2025-03-30 17:19:00 [main] DEBUG org.hibernate.SQL - 
    comment on column plans.monthly_token_limit is
        '월간 토큰 사용량 제한'
2025-03-30 17:19:00 [main] DEBUG org.hibernate.SQL - 
    comment on column plans.created_at is
        '생성일시'
2025-03-30 17:19:00 [main] DEBUG org.hibernate.SQL - 
    comment on column plans.id is
        '플랜 고유 식별자'
2025-03-30 17:19:00 [main] DEBUG org.hibernate.SQL - 
    comment on column plans.updated_at is
        '수정일시'
2025-03-30 17:19:00 [main] DEBUG org.hibernate.SQL - 
    comment on column plans.name is
        '플랜 이름'
2025-03-30 17:19:00 [main] DEBUG org.hibernate.SQL - 
    comment on column plans.type is
        '플랜 타입'
2025-03-30 17:19:00 [main] DEBUG org.hibernate.SQL - 
    create table user_login_logs (
        successful boolean not null,
        id bigint generated by default as identity,
        login_at timestamp(6) not null,
        updated_at timestamp(6) not null,
        user_id bigint not null,
        browser_info varchar(255) not null,
        device_type varchar(255) not null,
        fail_reason varchar(255),
        ip_address varchar(255) not null,
        os_info varchar(255) not null,
        user_agent varchar(255) not null,
        primary key (id)
    )
2025-03-30 17:19:00 [main] DEBUG org.hibernate.SQL - 
    comment on column user_login_logs.successful is
        '로그인 성공 여부'
2025-03-30 17:19:00 [main] DEBUG org.hibernate.SQL - 
    comment on column user_login_logs.id is
        '로그인 기록 고유 식별자'
2025-03-30 17:19:00 [main] DEBUG org.hibernate.SQL - 
    comment on column user_login_logs.login_at is
        '로그인 시도 시간'
2025-03-30 17:19:00 [main] DEBUG org.hibernate.SQL - 
    comment on column user_login_logs.updated_at is
        '기록 수정 시간'
2025-03-30 17:19:00 [main] DEBUG org.hibernate.SQL - 
    comment on column user_login_logs.user_id is
        '로그인한 사용자'
2025-03-30 17:19:00 [main] DEBUG org.hibernate.SQL - 
    comment on column user_login_logs.browser_info is
        '브라우저 정보'
2025-03-30 17:19:00 [main] DEBUG org.hibernate.SQL - 
    comment on column user_login_logs.device_type is
        '디바이스 타입 (DESKTOP, MOBILE, TABLET)'
2025-03-30 17:19:00 [main] DEBUG org.hibernate.SQL - 
    comment on column user_login_logs.fail_reason is
        '로그인 실패 사유'
2025-03-30 17:19:00 [main] DEBUG org.hibernate.SQL - 
    comment on column user_login_logs.ip_address is
        '로그인 IP 주소'
2025-03-30 17:19:00 [main] DEBUG org.hibernate.SQL - 
    comment on column user_login_logs.os_info is
        '운영체제 정보'
2025-03-30 17:19:00 [main] DEBUG org.hibernate.SQL - 
    comment on column user_login_logs.user_agent is
        '사용자 에이전트 문자열'
2025-03-30 17:19:00 [main] DEBUG org.hibernate.SQL - 
    create table users (
        active boolean not null,
        is_email_verified boolean not null,
        created_at timestamp(6) not null,
        id bigint generated by default as identity,
        last_login_at timestamp(6),
        plan_id bigint not null,
        updated_at timestamp(6) not null,
        display_name varchar(255) not null,
        email varchar(255) not null unique,
        password varchar(255),
        photo_url varchar(255),
        provider varchar(255) not null check (provider in ('GOOGLE','APPLE')),
        role varchar(255) not null check (role in ('USER','ADMIN')),
        uid varchar(255) not null unique,
        primary key (id)
    )
2025-03-30 17:19:00 [main] DEBUG org.hibernate.SQL - 
    comment on column users.active is
        '계정 활성화 상태'
2025-03-30 17:19:00 [main] DEBUG org.hibernate.SQL - 
    comment on column users.is_email_verified is
        '이메일 인증 여부'
2025-03-30 17:19:00 [main] DEBUG org.hibernate.SQL - 
    comment on column users.created_at is
        '계정 생성 시간'
2025-03-30 17:19:00 [main] DEBUG org.hibernate.SQL - 
    comment on column users.id is
        '사용자 고유 식별자'
2025-03-30 17:19:00 [main] DEBUG org.hibernate.SQL - 
    comment on column users.last_login_at is
        '마지막 로그인 시간'
2025-03-30 17:19:00 [main] DEBUG org.hibernate.SQL - 
    comment on column users.plan_id is
        '사용자의 구독 플랜'
2025-03-30 17:19:00 [main] DEBUG org.hibernate.SQL - 
    comment on column users.updated_at is
        '계정 정보 수정 시간'
2025-03-30 17:19:00 [main] DEBUG org.hibernate.SQL - 
    comment on column users.display_name is
        '사용자 표시 이름'
2025-03-30 17:19:00 [main] DEBUG org.hibernate.SQL - 
    comment on column users.email is
        '사용자 이메일'
2025-03-30 17:19:00 [main] DEBUG org.hibernate.SQL - 
    comment on column users.password is
        '사용자 비밀번호 (소셜 로그인의 경우 임시 비밀번호)'
2025-03-30 17:19:00 [main] DEBUG org.hibernate.SQL - 
    comment on column users.photo_url is
        '프로필 사진 URL'
2025-03-30 17:19:00 [main] DEBUG org.hibernate.SQL - 
    comment on column users.provider is
        '소셜 로그인 제공자 (GOOGLE, APPLE)'
2025-03-30 17:19:00 [main] DEBUG org.hibernate.SQL - 
    comment on column users.role is
        '사용자 역할 (USER, ADMIN)'
2025-03-30 17:19:00 [main] DEBUG org.hibernate.SQL - 
    comment on column users.uid is
        '소셜 로그인 제공자의 사용자 고유 식별자'
2025-03-30 17:19:00 [main] DEBUG org.hibernate.SQL - 
    alter table if exists user_login_logs 
       add constraint FK80fvs708m86elqqexgsihwsk2 
       foreign key (user_id) 
       references users
2025-03-30 17:19:00 [main] DEBUG org.hibernate.SQL - 
    alter table if exists users 
       add constraint FKi4ttvfkp7tl33d90ldkkagrxu 
       foreign key (plan_id) 
       references plans
2025-03-30 17:19:00 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-03-30 17:19:01 [main] DEBUG c.e.p.s.FirebaseAuthenticationFilter - Filter 'firebaseAuthenticationFilter' configured for use
2025-03-30 17:19:01 [main] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - Filter 'requestResponseLoggingFilter' configured for use
2025-03-30 17:19:01 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-03-30 17:19:01 [main] WARN  o.s.b.a.s.s.UserDetailsServiceAutoConfiguration - 

Using generated security password: 2bfb9aba-0213-444e-953c-c11be4334056

This generated password is for development use only. Your security configuration must be updated before running your application in production.

2025-03-30 17:19:01 [main] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 1 endpoint(s) beneath base path '/actuator'
2025-03-30 17:19:01 [main] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@54e0b29c, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@33428132, org.springframework.security.web.context.SecurityContextHolderFilter@1683b9ba, org.springframework.security.web.header.HeaderWriterFilter@5cb3c9e6, org.springframework.web.filter.CorsFilter@4c24063c, org.springframework.security.web.authentication.logout.LogoutFilter@4b6575fd, com.evawova.preview.security.FirebaseAuthenticationFilter@25df95b, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@59bdd277, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@2fad7002, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@3dd22110, org.springframework.security.web.session.SessionManagementFilter@5824b485, org.springframework.security.web.access.ExceptionTranslationFilter@8588a62, org.springframework.security.web.access.intercept.AuthorizationFilter@2a7ed9bd]
2025-03-30 17:19:01 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-03-30 17:19:01 [main] INFO  c.e.p.PreviewServiceApplication - Started PreviewServiceApplication in 4.095 seconds (process running for 4.312)
2025-03-30 17:19:02 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        plans p1_0
2025-03-30 17:19:02 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        plans
        (active, annual_price, created_at, monthly_price, monthly_token_limit, name, type, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
2025-03-30 17:19:02 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        plans
        (active, annual_price, created_at, monthly_price, monthly_token_limit, name, type, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
2025-03-30 17:19:02 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        plans
        (active, annual_price, created_at, monthly_price, monthly_token_limit, name, type, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
2025-03-30 17:22:50 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-03-30 17:22:50 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-03-30 17:22:50 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 4 ms
2025-03-30 17:22:51 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.created_at,
        u1_0.display_name,
        u1_0.email,
        u1_0.is_email_verified,
        u1_0.last_login_at,
        u1_0.password,
        u1_0.photo_url,
        u1_0.plan_id,
        u1_0.provider,
        u1_0.role,
        u1_0.uid,
        u1_0.updated_at 
    from
        users u1_0 
    where
        u1_0.uid=?
2025-03-30 17:22:51 [http-nio-8080-exec-1] INFO  c.e.p.c.f.RequestResponseLoggingFilter - [10c83b10] 요청: GET /api/v1/users/me (127.0.0.1)
2025-03-30 17:22:51 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [10c83b10] 요청 헤더: user-agent: Dart/3.6 (dart:io)
2025-03-30 17:22:51 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [10c83b10] 요청 헤더: content-type: application/json
2025-03-30 17:22:51 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [10c83b10] 요청 헤더: accept-encoding: gzip
2025-03-30 17:22:51 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [10c83b10] 요청 헤더: authorization: Bearer eyJ...
2025-03-30 17:22:51 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [10c83b10] 요청 헤더: host: localhost:8080
2025-03-30 17:22:51 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.created_at,
        u1_0.display_name,
        u1_0.email,
        u1_0.is_email_verified,
        u1_0.last_login_at,
        u1_0.password,
        u1_0.photo_url,
        u1_0.plan_id,
        u1_0.provider,
        u1_0.role,
        u1_0.uid,
        u1_0.updated_at 
    from
        users u1_0 
    where
        u1_0.uid=?
2025-03-30 17:22:51 [http-nio-8080-exec-1] ERROR c.e.p.c.e.GlobalExceptionHandler - API 예외 발생: 사용자 정보를 찾을 수 없습니다.
2025-03-30 17:22:51 [http-nio-8080-exec-1] INFO  c.e.p.c.f.RequestResponseLoggingFilter - [10c83b10] 응답: 404 (66ms)
2025-03-30 17:22:51 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [10c83b10] 응답 헤더: Vary: Origin
2025-03-30 17:22:51 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [10c83b10] 응답 헤더: Vary: Access-Control-Request-Method
2025-03-30 17:22:51 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [10c83b10] 응답 헤더: Vary: Access-Control-Request-Headers
2025-03-30 17:22:51 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [10c83b10] 응답 헤더: Vary: Origin
2025-03-30 17:22:51 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [10c83b10] 응답 헤더: Vary: Access-Control-Request-Method
2025-03-30 17:22:51 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [10c83b10] 응답 헤더: Vary: Access-Control-Request-Headers
2025-03-30 17:22:51 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [10c83b10] 응답 헤더: Vary: Origin
2025-03-30 17:22:51 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [10c83b10] 응답 헤더: Vary: Access-Control-Request-Method
2025-03-30 17:22:51 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [10c83b10] 응답 헤더: Vary: Access-Control-Request-Headers
2025-03-30 17:22:51 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [10c83b10] 응답 헤더: Content-Type: application/json
2025-03-30 17:22:51 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [10c83b10] 응답 본문: {"success":false,"status":404,"message":"사용자 정보를 찾을 수 없습니다.","timestamp":"2025-03-30 17:22:51"}
2025-03-30 17:23:24 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.created_at,
        u1_0.display_name,
        u1_0.email,
        u1_0.is_email_verified,
        u1_0.last_login_at,
        u1_0.password,
        u1_0.photo_url,
        u1_0.plan_id,
        u1_0.provider,
        u1_0.role,
        u1_0.uid,
        u1_0.updated_at 
    from
        users u1_0 
    where
        u1_0.uid=?
2025-03-30 17:23:24 [http-nio-8080-exec-3] INFO  c.e.p.c.f.RequestResponseLoggingFilter - [46632854] 요청: GET /api/v1/users/me (127.0.0.1)
2025-03-30 17:23:24 [http-nio-8080-exec-3] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [46632854] 요청 헤더: user-agent: Dart/3.6 (dart:io)
2025-03-30 17:23:24 [http-nio-8080-exec-3] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [46632854] 요청 헤더: content-type: application/json
2025-03-30 17:23:24 [http-nio-8080-exec-3] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [46632854] 요청 헤더: accept-encoding: gzip
2025-03-30 17:23:24 [http-nio-8080-exec-3] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [46632854] 요청 헤더: authorization: Bearer eyJ...
2025-03-30 17:23:24 [http-nio-8080-exec-3] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [46632854] 요청 헤더: host: localhost:8080
2025-03-30 17:23:24 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.created_at,
        u1_0.display_name,
        u1_0.email,
        u1_0.is_email_verified,
        u1_0.last_login_at,
        u1_0.password,
        u1_0.photo_url,
        u1_0.plan_id,
        u1_0.provider,
        u1_0.role,
        u1_0.uid,
        u1_0.updated_at 
    from
        users u1_0 
    where
        u1_0.uid=?
2025-03-30 17:23:24 [http-nio-8080-exec-3] ERROR c.e.p.c.e.GlobalExceptionHandler - API 예외 발생: 사용자 정보를 찾을 수 없습니다.
2025-03-30 17:23:24 [http-nio-8080-exec-3] INFO  c.e.p.c.f.RequestResponseLoggingFilter - [46632854] 응답: 404 (3ms)
2025-03-30 17:23:24 [http-nio-8080-exec-3] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [46632854] 응답 헤더: Vary: Origin
2025-03-30 17:23:24 [http-nio-8080-exec-3] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [46632854] 응답 헤더: Vary: Access-Control-Request-Method
2025-03-30 17:23:24 [http-nio-8080-exec-3] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [46632854] 응답 헤더: Vary: Access-Control-Request-Headers
2025-03-30 17:23:24 [http-nio-8080-exec-3] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [46632854] 응답 헤더: Vary: Origin
2025-03-30 17:23:24 [http-nio-8080-exec-3] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [46632854] 응답 헤더: Vary: Access-Control-Request-Method
2025-03-30 17:23:24 [http-nio-8080-exec-3] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [46632854] 응답 헤더: Vary: Access-Control-Request-Headers
2025-03-30 17:23:24 [http-nio-8080-exec-3] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [46632854] 응답 헤더: Vary: Origin
2025-03-30 17:23:24 [http-nio-8080-exec-3] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [46632854] 응답 헤더: Vary: Access-Control-Request-Method
2025-03-30 17:23:24 [http-nio-8080-exec-3] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [46632854] 응답 헤더: Vary: Access-Control-Request-Headers
2025-03-30 17:23:24 [http-nio-8080-exec-3] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [46632854] 응답 헤더: Content-Type: application/json
2025-03-30 17:23:24 [http-nio-8080-exec-3] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [46632854] 응답 본문: {"success":false,"status":404,"message":"사용자 정보를 찾을 수 없습니다.","timestamp":"2025-03-30 17:23:24"}
2025-03-30 17:23:35 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.created_at,
        u1_0.display_name,
        u1_0.email,
        u1_0.is_email_verified,
        u1_0.last_login_at,
        u1_0.password,
        u1_0.photo_url,
        u1_0.plan_id,
        u1_0.provider,
        u1_0.role,
        u1_0.uid,
        u1_0.updated_at 
    from
        users u1_0 
    where
        u1_0.uid=?
2025-03-30 17:23:35 [http-nio-8080-exec-5] INFO  c.e.p.c.f.RequestResponseLoggingFilter - [5e3ecdb1] 요청: GET /api/v1/users/me (127.0.0.1)
2025-03-30 17:23:35 [http-nio-8080-exec-5] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [5e3ecdb1] 요청 헤더: user-agent: Dart/3.6 (dart:io)
2025-03-30 17:23:35 [http-nio-8080-exec-5] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [5e3ecdb1] 요청 헤더: content-type: application/json
2025-03-30 17:23:35 [http-nio-8080-exec-5] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [5e3ecdb1] 요청 헤더: accept-encoding: gzip
2025-03-30 17:23:35 [http-nio-8080-exec-5] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [5e3ecdb1] 요청 헤더: authorization: Bearer eyJ...
2025-03-30 17:23:35 [http-nio-8080-exec-5] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [5e3ecdb1] 요청 헤더: host: localhost:8080
2025-03-30 17:23:35 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.created_at,
        u1_0.display_name,
        u1_0.email,
        u1_0.is_email_verified,
        u1_0.last_login_at,
        u1_0.password,
        u1_0.photo_url,
        u1_0.plan_id,
        u1_0.provider,
        u1_0.role,
        u1_0.uid,
        u1_0.updated_at 
    from
        users u1_0 
    where
        u1_0.uid=?
2025-03-30 17:23:35 [http-nio-8080-exec-5] ERROR c.e.p.c.e.GlobalExceptionHandler - API 예외 발생: 사용자 정보를 찾을 수 없습니다.
2025-03-30 17:23:35 [http-nio-8080-exec-5] INFO  c.e.p.c.f.RequestResponseLoggingFilter - [5e3ecdb1] 응답: 404 (3ms)
2025-03-30 17:23:35 [http-nio-8080-exec-5] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [5e3ecdb1] 응답 헤더: Vary: Origin
2025-03-30 17:23:35 [http-nio-8080-exec-5] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [5e3ecdb1] 응답 헤더: Vary: Access-Control-Request-Method
2025-03-30 17:23:35 [http-nio-8080-exec-5] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [5e3ecdb1] 응답 헤더: Vary: Access-Control-Request-Headers
2025-03-30 17:23:35 [http-nio-8080-exec-5] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [5e3ecdb1] 응답 헤더: Vary: Origin
2025-03-30 17:23:35 [http-nio-8080-exec-5] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [5e3ecdb1] 응답 헤더: Vary: Access-Control-Request-Method
2025-03-30 17:23:35 [http-nio-8080-exec-5] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [5e3ecdb1] 응답 헤더: Vary: Access-Control-Request-Headers
2025-03-30 17:23:35 [http-nio-8080-exec-5] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [5e3ecdb1] 응답 헤더: Vary: Origin
2025-03-30 17:23:35 [http-nio-8080-exec-5] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [5e3ecdb1] 응답 헤더: Vary: Access-Control-Request-Method
2025-03-30 17:23:35 [http-nio-8080-exec-5] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [5e3ecdb1] 응답 헤더: Vary: Access-Control-Request-Headers
2025-03-30 17:23:35 [http-nio-8080-exec-5] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [5e3ecdb1] 응답 헤더: Content-Type: application/json
2025-03-30 17:23:35 [http-nio-8080-exec-5] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [5e3ecdb1] 응답 본문: {"success":false,"status":404,"message":"사용자 정보를 찾을 수 없습니다.","timestamp":"2025-03-30 17:23:35"}
2025-03-30 17:27:27 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.created_at,
        u1_0.display_name,
        u1_0.email,
        u1_0.is_email_verified,
        u1_0.last_login_at,
        u1_0.password,
        u1_0.photo_url,
        u1_0.plan_id,
        u1_0.provider,
        u1_0.role,
        u1_0.uid,
        u1_0.updated_at 
    from
        users u1_0 
    where
        u1_0.uid=?
2025-03-30 17:27:27 [http-nio-8080-exec-7] INFO  c.e.p.c.f.RequestResponseLoggingFilter - [61ee7bf9] 요청: GET /api/v1/users/me (127.0.0.1)
2025-03-30 17:27:27 [http-nio-8080-exec-7] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [61ee7bf9] 요청 헤더: user-agent: Dart/3.6 (dart:io)
2025-03-30 17:27:27 [http-nio-8080-exec-7] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [61ee7bf9] 요청 헤더: content-type: application/json
2025-03-30 17:27:27 [http-nio-8080-exec-7] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [61ee7bf9] 요청 헤더: accept-encoding: gzip
2025-03-30 17:27:27 [http-nio-8080-exec-7] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [61ee7bf9] 요청 헤더: authorization: Bearer eyJ...
2025-03-30 17:27:27 [http-nio-8080-exec-7] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [61ee7bf9] 요청 헤더: host: localhost:8080
2025-03-30 17:27:27 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.created_at,
        u1_0.display_name,
        u1_0.email,
        u1_0.is_email_verified,
        u1_0.last_login_at,
        u1_0.password,
        u1_0.photo_url,
        u1_0.plan_id,
        u1_0.provider,
        u1_0.role,
        u1_0.uid,
        u1_0.updated_at 
    from
        users u1_0 
    where
        u1_0.uid=?
2025-03-30 17:27:27 [http-nio-8080-exec-7] ERROR c.e.p.c.e.GlobalExceptionHandler - API 예외 발생: 사용자 정보를 찾을 수 없습니다.
2025-03-30 17:27:27 [http-nio-8080-exec-7] INFO  c.e.p.c.f.RequestResponseLoggingFilter - [61ee7bf9] 응답: 404 (5ms)
2025-03-30 17:27:27 [http-nio-8080-exec-7] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [61ee7bf9] 응답 헤더: Vary: Origin
2025-03-30 17:27:27 [http-nio-8080-exec-7] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [61ee7bf9] 응답 헤더: Vary: Access-Control-Request-Method
2025-03-30 17:27:27 [http-nio-8080-exec-7] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [61ee7bf9] 응답 헤더: Vary: Access-Control-Request-Headers
2025-03-30 17:27:27 [http-nio-8080-exec-7] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [61ee7bf9] 응답 헤더: Vary: Origin
2025-03-30 17:27:27 [http-nio-8080-exec-7] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [61ee7bf9] 응답 헤더: Vary: Access-Control-Request-Method
2025-03-30 17:27:27 [http-nio-8080-exec-7] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [61ee7bf9] 응답 헤더: Vary: Access-Control-Request-Headers
2025-03-30 17:27:27 [http-nio-8080-exec-7] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [61ee7bf9] 응답 헤더: Vary: Origin
2025-03-30 17:27:27 [http-nio-8080-exec-7] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [61ee7bf9] 응답 헤더: Vary: Access-Control-Request-Method
2025-03-30 17:27:27 [http-nio-8080-exec-7] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [61ee7bf9] 응답 헤더: Vary: Access-Control-Request-Headers
2025-03-30 17:27:27 [http-nio-8080-exec-7] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [61ee7bf9] 응답 헤더: Content-Type: application/json
2025-03-30 17:27:27 [http-nio-8080-exec-7] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [61ee7bf9] 응답 본문: {"success":false,"status":404,"message":"사용자 정보를 찾을 수 없습니다.","timestamp":"2025-03-30 17:27:27"}
2025-03-30 17:27:50 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.created_at,
        u1_0.display_name,
        u1_0.email,
        u1_0.is_email_verified,
        u1_0.last_login_at,
        u1_0.password,
        u1_0.photo_url,
        u1_0.plan_id,
        u1_0.provider,
        u1_0.role,
        u1_0.uid,
        u1_0.updated_at 
    from
        users u1_0 
    where
        u1_0.uid=?
2025-03-30 17:27:50 [http-nio-8080-exec-9] INFO  c.e.p.c.f.RequestResponseLoggingFilter - [e4030e6d] 요청: GET /api/v1/users/me (127.0.0.1)
2025-03-30 17:27:50 [http-nio-8080-exec-9] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [e4030e6d] 요청 헤더: user-agent: Dart/3.6 (dart:io)
2025-03-30 17:27:50 [http-nio-8080-exec-9] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [e4030e6d] 요청 헤더: content-type: application/json
2025-03-30 17:27:50 [http-nio-8080-exec-9] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [e4030e6d] 요청 헤더: accept-encoding: gzip
2025-03-30 17:27:50 [http-nio-8080-exec-9] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [e4030e6d] 요청 헤더: authorization: Bearer eyJ...
2025-03-30 17:27:50 [http-nio-8080-exec-9] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [e4030e6d] 요청 헤더: host: localhost:8080
2025-03-30 17:27:50 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.created_at,
        u1_0.display_name,
        u1_0.email,
        u1_0.is_email_verified,
        u1_0.last_login_at,
        u1_0.password,
        u1_0.photo_url,
        u1_0.plan_id,
        u1_0.provider,
        u1_0.role,
        u1_0.uid,
        u1_0.updated_at 
    from
        users u1_0 
    where
        u1_0.uid=?
2025-03-30 17:27:50 [http-nio-8080-exec-9] ERROR c.e.p.c.e.GlobalExceptionHandler - API 예외 발생: 사용자 정보를 찾을 수 없습니다.
2025-03-30 17:27:50 [http-nio-8080-exec-9] INFO  c.e.p.c.f.RequestResponseLoggingFilter - [e4030e6d] 응답: 404 (2ms)
2025-03-30 17:27:50 [http-nio-8080-exec-9] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [e4030e6d] 응답 헤더: Vary: Origin
2025-03-30 17:27:50 [http-nio-8080-exec-9] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [e4030e6d] 응답 헤더: Vary: Access-Control-Request-Method
2025-03-30 17:27:50 [http-nio-8080-exec-9] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [e4030e6d] 응답 헤더: Vary: Access-Control-Request-Headers
2025-03-30 17:27:50 [http-nio-8080-exec-9] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [e4030e6d] 응답 헤더: Vary: Origin
2025-03-30 17:27:50 [http-nio-8080-exec-9] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [e4030e6d] 응답 헤더: Vary: Access-Control-Request-Method
2025-03-30 17:27:50 [http-nio-8080-exec-9] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [e4030e6d] 응답 헤더: Vary: Access-Control-Request-Headers
2025-03-30 17:27:50 [http-nio-8080-exec-9] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [e4030e6d] 응답 헤더: Vary: Origin
2025-03-30 17:27:50 [http-nio-8080-exec-9] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [e4030e6d] 응답 헤더: Vary: Access-Control-Request-Method
2025-03-30 17:27:50 [http-nio-8080-exec-9] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [e4030e6d] 응답 헤더: Vary: Access-Control-Request-Headers
2025-03-30 17:27:50 [http-nio-8080-exec-9] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [e4030e6d] 응답 헤더: Content-Type: application/json
2025-03-30 17:27:50 [http-nio-8080-exec-9] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [e4030e6d] 응답 본문: {"success":false,"status":404,"message":"사용자 정보를 찾을 수 없습니다.","timestamp":"2025-03-30 17:27:50"}
2025-03-30 17:36:03 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.created_at,
        u1_0.display_name,
        u1_0.email,
        u1_0.is_email_verified,
        u1_0.last_login_at,
        u1_0.password,
        u1_0.photo_url,
        u1_0.plan_id,
        u1_0.provider,
        u1_0.role,
        u1_0.uid,
        u1_0.updated_at 
    from
        users u1_0 
    where
        u1_0.uid=?
2025-03-30 17:36:03 [http-nio-8080-exec-1] INFO  c.e.p.c.f.RequestResponseLoggingFilter - [c3846875] 요청: GET /api/v1/users/me (127.0.0.1)
2025-03-30 17:36:03 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [c3846875] 요청 헤더: user-agent: Dart/3.6 (dart:io)
2025-03-30 17:36:03 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [c3846875] 요청 헤더: content-type: application/json
2025-03-30 17:36:03 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [c3846875] 요청 헤더: accept-encoding: gzip
2025-03-30 17:36:03 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [c3846875] 요청 헤더: authorization: Bearer eyJ...
2025-03-30 17:36:03 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [c3846875] 요청 헤더: host: localhost:8080
2025-03-30 17:36:04 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.created_at,
        u1_0.display_name,
        u1_0.email,
        u1_0.is_email_verified,
        u1_0.last_login_at,
        u1_0.password,
        u1_0.photo_url,
        u1_0.plan_id,
        u1_0.provider,
        u1_0.role,
        u1_0.uid,
        u1_0.updated_at 
    from
        users u1_0 
    where
        u1_0.uid=?
2025-03-30 17:36:04 [http-nio-8080-exec-1] ERROR c.e.p.c.e.GlobalExceptionHandler - API 예외 발생: 사용자 정보를 찾을 수 없습니다.
2025-03-30 17:36:04 [http-nio-8080-exec-1] INFO  c.e.p.c.f.RequestResponseLoggingFilter - [c3846875] 응답: 404 (73ms)
2025-03-30 17:36:04 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [c3846875] 응답 헤더: Vary: Origin
2025-03-30 17:36:04 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [c3846875] 응답 헤더: Vary: Access-Control-Request-Method
2025-03-30 17:36:04 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [c3846875] 응답 헤더: Vary: Access-Control-Request-Headers
2025-03-30 17:36:04 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [c3846875] 응답 헤더: Vary: Origin
2025-03-30 17:36:04 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [c3846875] 응답 헤더: Vary: Access-Control-Request-Method
2025-03-30 17:36:04 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [c3846875] 응답 헤더: Vary: Access-Control-Request-Headers
2025-03-30 17:36:04 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [c3846875] 응답 헤더: Vary: Origin
2025-03-30 17:36:04 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [c3846875] 응답 헤더: Vary: Access-Control-Request-Method
2025-03-30 17:36:04 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [c3846875] 응답 헤더: Vary: Access-Control-Request-Headers
2025-03-30 17:36:04 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [c3846875] 응답 헤더: Content-Type: application/json
2025-03-30 17:36:04 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [c3846875] 응답 본문: {"success":false,"status":404,"message":"사용자 정보를 찾을 수 없습니다.","timestamp":"2025-03-30 17:36:04"}
2025-03-30 17:37:28 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.created_at,
        u1_0.display_name,
        u1_0.email,
        u1_0.is_email_verified,
        u1_0.last_login_at,
        u1_0.password,
        u1_0.photo_url,
        u1_0.plan_id,
        u1_0.provider,
        u1_0.role,
        u1_0.uid,
        u1_0.updated_at 
    from
        users u1_0 
    where
        u1_0.uid=?
2025-03-30 17:37:28 [http-nio-8080-exec-3] INFO  c.e.p.c.f.RequestResponseLoggingFilter - [fe5f27c1] 요청: GET /api/v1/users/me (127.0.0.1)
2025-03-30 17:37:28 [http-nio-8080-exec-3] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [fe5f27c1] 요청 헤더: user-agent: Dart/3.6 (dart:io)
2025-03-30 17:37:28 [http-nio-8080-exec-3] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [fe5f27c1] 요청 헤더: content-type: application/json
2025-03-30 17:37:28 [http-nio-8080-exec-3] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [fe5f27c1] 요청 헤더: accept-encoding: gzip
2025-03-30 17:37:28 [http-nio-8080-exec-3] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [fe5f27c1] 요청 헤더: authorization: Bearer eyJ...
2025-03-30 17:37:28 [http-nio-8080-exec-3] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [fe5f27c1] 요청 헤더: host: localhost:8080
2025-03-30 17:37:28 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.created_at,
        u1_0.display_name,
        u1_0.email,
        u1_0.is_email_verified,
        u1_0.last_login_at,
        u1_0.password,
        u1_0.photo_url,
        u1_0.plan_id,
        u1_0.provider,
        u1_0.role,
        u1_0.uid,
        u1_0.updated_at 
    from
        users u1_0 
    where
        u1_0.uid=?
2025-03-30 17:37:28 [http-nio-8080-exec-3] ERROR c.e.p.c.e.GlobalExceptionHandler - API 예외 발생: 사용자 정보를 찾을 수 없습니다.
2025-03-30 17:37:28 [http-nio-8080-exec-3] INFO  c.e.p.c.f.RequestResponseLoggingFilter - [fe5f27c1] 응답: 404 (14ms)
2025-03-30 17:37:28 [http-nio-8080-exec-3] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [fe5f27c1] 응답 헤더: Vary: Origin
2025-03-30 17:37:28 [http-nio-8080-exec-3] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [fe5f27c1] 응답 헤더: Vary: Access-Control-Request-Method
2025-03-30 17:37:28 [http-nio-8080-exec-3] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [fe5f27c1] 응답 헤더: Vary: Access-Control-Request-Headers
2025-03-30 17:37:28 [http-nio-8080-exec-3] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [fe5f27c1] 응답 헤더: Vary: Origin
2025-03-30 17:37:28 [http-nio-8080-exec-3] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [fe5f27c1] 응답 헤더: Vary: Access-Control-Request-Method
2025-03-30 17:37:28 [http-nio-8080-exec-3] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [fe5f27c1] 응답 헤더: Vary: Access-Control-Request-Headers
2025-03-30 17:37:28 [http-nio-8080-exec-3] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [fe5f27c1] 응답 헤더: Vary: Origin
2025-03-30 17:37:28 [http-nio-8080-exec-3] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [fe5f27c1] 응답 헤더: Vary: Access-Control-Request-Method
2025-03-30 17:37:28 [http-nio-8080-exec-3] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [fe5f27c1] 응답 헤더: Vary: Access-Control-Request-Headers
2025-03-30 17:37:28 [http-nio-8080-exec-3] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [fe5f27c1] 응답 헤더: Content-Type: application/json
2025-03-30 17:37:28 [http-nio-8080-exec-3] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [fe5f27c1] 응답 본문: {"success":false,"status":404,"message":"사용자 정보를 찾을 수 없습니다.","timestamp":"2025-03-30 17:37:28"}
2025-03-30 17:38:21 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.created_at,
        u1_0.display_name,
        u1_0.email,
        u1_0.is_email_verified,
        u1_0.last_login_at,
        u1_0.password,
        u1_0.photo_url,
        u1_0.plan_id,
        u1_0.provider,
        u1_0.role,
        u1_0.uid,
        u1_0.updated_at 
    from
        users u1_0 
    where
        u1_0.uid=?
2025-03-30 17:38:21 [http-nio-8080-exec-5] INFO  c.e.p.c.f.RequestResponseLoggingFilter - [d3a56428] 요청: GET /api/v1/users/me (127.0.0.1)
2025-03-30 17:38:21 [http-nio-8080-exec-5] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [d3a56428] 요청 헤더: user-agent: Dart/3.6 (dart:io)
2025-03-30 17:38:21 [http-nio-8080-exec-5] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [d3a56428] 요청 헤더: content-type: application/json
2025-03-30 17:38:21 [http-nio-8080-exec-5] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [d3a56428] 요청 헤더: accept-encoding: gzip
2025-03-30 17:38:21 [http-nio-8080-exec-5] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [d3a56428] 요청 헤더: authorization: Bearer eyJ...
2025-03-30 17:38:21 [http-nio-8080-exec-5] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [d3a56428] 요청 헤더: host: localhost:8080
2025-03-30 17:38:21 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.created_at,
        u1_0.display_name,
        u1_0.email,
        u1_0.is_email_verified,
        u1_0.last_login_at,
        u1_0.password,
        u1_0.photo_url,
        u1_0.plan_id,
        u1_0.provider,
        u1_0.role,
        u1_0.uid,
        u1_0.updated_at 
    from
        users u1_0 
    where
        u1_0.uid=?
2025-03-30 17:38:21 [http-nio-8080-exec-5] ERROR c.e.p.c.e.GlobalExceptionHandler - API 예외 발생: 사용자 정보를 찾을 수 없습니다.
2025-03-30 17:38:21 [http-nio-8080-exec-5] INFO  c.e.p.c.f.RequestResponseLoggingFilter - [d3a56428] 응답: 404 (3ms)
2025-03-30 17:38:21 [http-nio-8080-exec-5] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [d3a56428] 응답 헤더: Vary: Origin
2025-03-30 17:38:21 [http-nio-8080-exec-5] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [d3a56428] 응답 헤더: Vary: Access-Control-Request-Method
2025-03-30 17:38:21 [http-nio-8080-exec-5] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [d3a56428] 응답 헤더: Vary: Access-Control-Request-Headers
2025-03-30 17:38:21 [http-nio-8080-exec-5] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [d3a56428] 응답 헤더: Vary: Origin
2025-03-30 17:38:21 [http-nio-8080-exec-5] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [d3a56428] 응답 헤더: Vary: Access-Control-Request-Method
2025-03-30 17:38:21 [http-nio-8080-exec-5] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [d3a56428] 응답 헤더: Vary: Access-Control-Request-Headers
2025-03-30 17:38:21 [http-nio-8080-exec-5] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [d3a56428] 응답 헤더: Vary: Origin
2025-03-30 17:38:21 [http-nio-8080-exec-5] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [d3a56428] 응답 헤더: Vary: Access-Control-Request-Method
2025-03-30 17:38:21 [http-nio-8080-exec-5] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [d3a56428] 응답 헤더: Vary: Access-Control-Request-Headers
2025-03-30 17:38:21 [http-nio-8080-exec-5] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [d3a56428] 응답 헤더: Content-Type: application/json
2025-03-30 17:38:21 [http-nio-8080-exec-5] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [d3a56428] 응답 본문: {"success":false,"status":404,"message":"사용자 정보를 찾을 수 없습니다.","timestamp":"2025-03-30 17:38:21"}
2025-03-30 17:38:30 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.created_at,
        u1_0.display_name,
        u1_0.email,
        u1_0.is_email_verified,
        u1_0.last_login_at,
        u1_0.password,
        u1_0.photo_url,
        u1_0.plan_id,
        u1_0.provider,
        u1_0.role,
        u1_0.uid,
        u1_0.updated_at 
    from
        users u1_0 
    where
        u1_0.uid=?
2025-03-30 17:38:30 [http-nio-8080-exec-7] INFO  c.e.p.c.f.RequestResponseLoggingFilter - [bc6378b6] 요청: GET /api/v1/users/me (127.0.0.1)
2025-03-30 17:38:30 [http-nio-8080-exec-7] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [bc6378b6] 요청 헤더: user-agent: Dart/3.6 (dart:io)
2025-03-30 17:38:30 [http-nio-8080-exec-7] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [bc6378b6] 요청 헤더: content-type: application/json
2025-03-30 17:38:30 [http-nio-8080-exec-7] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [bc6378b6] 요청 헤더: accept-encoding: gzip
2025-03-30 17:38:30 [http-nio-8080-exec-7] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [bc6378b6] 요청 헤더: authorization: Bearer eyJ...
2025-03-30 17:38:30 [http-nio-8080-exec-7] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [bc6378b6] 요청 헤더: host: localhost:8080
2025-03-30 17:38:30 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.created_at,
        u1_0.display_name,
        u1_0.email,
        u1_0.is_email_verified,
        u1_0.last_login_at,
        u1_0.password,
        u1_0.photo_url,
        u1_0.plan_id,
        u1_0.provider,
        u1_0.role,
        u1_0.uid,
        u1_0.updated_at 
    from
        users u1_0 
    where
        u1_0.uid=?
2025-03-30 17:38:30 [http-nio-8080-exec-7] ERROR c.e.p.c.e.GlobalExceptionHandler - API 예외 발생: 사용자 정보를 찾을 수 없습니다.
2025-03-30 17:38:30 [http-nio-8080-exec-7] INFO  c.e.p.c.f.RequestResponseLoggingFilter - [bc6378b6] 응답: 404 (3ms)
2025-03-30 17:38:30 [http-nio-8080-exec-7] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [bc6378b6] 응답 헤더: Vary: Origin
2025-03-30 17:38:30 [http-nio-8080-exec-7] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [bc6378b6] 응답 헤더: Vary: Access-Control-Request-Method
2025-03-30 17:38:30 [http-nio-8080-exec-7] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [bc6378b6] 응답 헤더: Vary: Access-Control-Request-Headers
2025-03-30 17:38:30 [http-nio-8080-exec-7] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [bc6378b6] 응답 헤더: Vary: Origin
2025-03-30 17:38:30 [http-nio-8080-exec-7] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [bc6378b6] 응답 헤더: Vary: Access-Control-Request-Method
2025-03-30 17:38:30 [http-nio-8080-exec-7] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [bc6378b6] 응답 헤더: Vary: Access-Control-Request-Headers
2025-03-30 17:38:30 [http-nio-8080-exec-7] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [bc6378b6] 응답 헤더: Vary: Origin
2025-03-30 17:38:30 [http-nio-8080-exec-7] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [bc6378b6] 응답 헤더: Vary: Access-Control-Request-Method
2025-03-30 17:38:30 [http-nio-8080-exec-7] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [bc6378b6] 응답 헤더: Vary: Access-Control-Request-Headers
2025-03-30 17:38:30 [http-nio-8080-exec-7] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [bc6378b6] 응답 헤더: Content-Type: application/json
2025-03-30 17:38:30 [http-nio-8080-exec-7] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [bc6378b6] 응답 본문: {"success":false,"status":404,"message":"사용자 정보를 찾을 수 없습니다.","timestamp":"2025-03-30 17:38:30"}
2025-03-30 17:38:32 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.created_at,
        u1_0.display_name,
        u1_0.email,
        u1_0.is_email_verified,
        u1_0.last_login_at,
        u1_0.password,
        u1_0.photo_url,
        u1_0.plan_id,
        u1_0.provider,
        u1_0.role,
        u1_0.uid,
        u1_0.updated_at 
    from
        users u1_0 
    where
        u1_0.uid=?
2025-03-30 17:38:32 [http-nio-8080-exec-9] INFO  c.e.p.c.f.RequestResponseLoggingFilter - [9a3caa66] 요청: GET /api/v1/users/me (127.0.0.1)
2025-03-30 17:38:32 [http-nio-8080-exec-9] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [9a3caa66] 요청 헤더: user-agent: Dart/3.6 (dart:io)
2025-03-30 17:38:32 [http-nio-8080-exec-9] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [9a3caa66] 요청 헤더: content-type: application/json
2025-03-30 17:38:32 [http-nio-8080-exec-9] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [9a3caa66] 요청 헤더: accept-encoding: gzip
2025-03-30 17:38:32 [http-nio-8080-exec-9] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [9a3caa66] 요청 헤더: authorization: Bearer eyJ...
2025-03-30 17:38:32 [http-nio-8080-exec-9] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [9a3caa66] 요청 헤더: host: localhost:8080
2025-03-30 17:38:32 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.created_at,
        u1_0.display_name,
        u1_0.email,
        u1_0.is_email_verified,
        u1_0.last_login_at,
        u1_0.password,
        u1_0.photo_url,
        u1_0.plan_id,
        u1_0.provider,
        u1_0.role,
        u1_0.uid,
        u1_0.updated_at 
    from
        users u1_0 
    where
        u1_0.uid=?
2025-03-30 17:38:32 [http-nio-8080-exec-9] ERROR c.e.p.c.e.GlobalExceptionHandler - API 예외 발생: 사용자 정보를 찾을 수 없습니다.
2025-03-30 17:38:32 [http-nio-8080-exec-9] INFO  c.e.p.c.f.RequestResponseLoggingFilter - [9a3caa66] 응답: 404 (3ms)
2025-03-30 17:38:32 [http-nio-8080-exec-9] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [9a3caa66] 응답 헤더: Vary: Origin
2025-03-30 17:38:32 [http-nio-8080-exec-9] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [9a3caa66] 응답 헤더: Vary: Access-Control-Request-Method
2025-03-30 17:38:32 [http-nio-8080-exec-9] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [9a3caa66] 응답 헤더: Vary: Access-Control-Request-Headers
2025-03-30 17:38:32 [http-nio-8080-exec-9] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [9a3caa66] 응답 헤더: Vary: Origin
2025-03-30 17:38:32 [http-nio-8080-exec-9] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [9a3caa66] 응답 헤더: Vary: Access-Control-Request-Method
2025-03-30 17:38:32 [http-nio-8080-exec-9] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [9a3caa66] 응답 헤더: Vary: Access-Control-Request-Headers
2025-03-30 17:38:32 [http-nio-8080-exec-9] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [9a3caa66] 응답 헤더: Vary: Origin
2025-03-30 17:38:32 [http-nio-8080-exec-9] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [9a3caa66] 응답 헤더: Vary: Access-Control-Request-Method
2025-03-30 17:38:32 [http-nio-8080-exec-9] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [9a3caa66] 응답 헤더: Vary: Access-Control-Request-Headers
2025-03-30 17:38:32 [http-nio-8080-exec-9] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [9a3caa66] 응답 헤더: Content-Type: application/json
2025-03-30 17:38:32 [http-nio-8080-exec-9] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [9a3caa66] 응답 본문: {"success":false,"status":404,"message":"사용자 정보를 찾을 수 없습니다.","timestamp":"2025-03-30 17:38:32"}
2025-03-30 17:38:46 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.created_at,
        u1_0.display_name,
        u1_0.email,
        u1_0.is_email_verified,
        u1_0.last_login_at,
        u1_0.password,
        u1_0.photo_url,
        u1_0.plan_id,
        u1_0.provider,
        u1_0.role,
        u1_0.uid,
        u1_0.updated_at 
    from
        users u1_0 
    where
        u1_0.uid=?
2025-03-30 17:38:46 [http-nio-8080-exec-1] INFO  c.e.p.c.f.RequestResponseLoggingFilter - [f8226f21] 요청: GET /api/v1/users/me (127.0.0.1)
2025-03-30 17:38:46 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [f8226f21] 요청 헤더: user-agent: Dart/3.6 (dart:io)
2025-03-30 17:38:46 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [f8226f21] 요청 헤더: content-type: application/json
2025-03-30 17:38:46 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [f8226f21] 요청 헤더: accept-encoding: gzip
2025-03-30 17:38:46 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [f8226f21] 요청 헤더: authorization: Bearer eyJ...
2025-03-30 17:38:46 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [f8226f21] 요청 헤더: host: localhost:8080
2025-03-30 17:38:46 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.created_at,
        u1_0.display_name,
        u1_0.email,
        u1_0.is_email_verified,
        u1_0.last_login_at,
        u1_0.password,
        u1_0.photo_url,
        u1_0.plan_id,
        u1_0.provider,
        u1_0.role,
        u1_0.uid,
        u1_0.updated_at 
    from
        users u1_0 
    where
        u1_0.uid=?
2025-03-30 17:38:46 [http-nio-8080-exec-1] ERROR c.e.p.c.e.GlobalExceptionHandler - API 예외 발생: 사용자 정보를 찾을 수 없습니다.
2025-03-30 17:38:46 [http-nio-8080-exec-1] INFO  c.e.p.c.f.RequestResponseLoggingFilter - [f8226f21] 응답: 404 (2ms)
2025-03-30 17:38:46 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [f8226f21] 응답 헤더: Vary: Origin
2025-03-30 17:38:46 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [f8226f21] 응답 헤더: Vary: Access-Control-Request-Method
2025-03-30 17:38:46 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [f8226f21] 응답 헤더: Vary: Access-Control-Request-Headers
2025-03-30 17:38:46 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [f8226f21] 응답 헤더: Vary: Origin
2025-03-30 17:38:46 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [f8226f21] 응답 헤더: Vary: Access-Control-Request-Method
2025-03-30 17:38:46 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [f8226f21] 응답 헤더: Vary: Access-Control-Request-Headers
2025-03-30 17:38:46 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [f8226f21] 응답 헤더: Vary: Origin
2025-03-30 17:38:46 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [f8226f21] 응답 헤더: Vary: Access-Control-Request-Method
2025-03-30 17:38:46 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [f8226f21] 응답 헤더: Vary: Access-Control-Request-Headers
2025-03-30 17:38:46 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [f8226f21] 응답 헤더: Content-Type: application/json
2025-03-30 17:38:46 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [f8226f21] 응답 본문: {"success":false,"status":404,"message":"사용자 정보를 찾을 수 없습니다.","timestamp":"2025-03-30 17:38:46"}
2025-03-30 17:41:24 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.created_at,
        u1_0.display_name,
        u1_0.email,
        u1_0.is_email_verified,
        u1_0.last_login_at,
        u1_0.password,
        u1_0.photo_url,
        u1_0.plan_id,
        u1_0.provider,
        u1_0.role,
        u1_0.uid,
        u1_0.updated_at 
    from
        users u1_0 
    where
        u1_0.uid=?
2025-03-30 17:41:24 [http-nio-8080-exec-3] INFO  c.e.p.c.f.RequestResponseLoggingFilter - [85bfeb7e] 요청: GET /api/v1/users/me (127.0.0.1)
2025-03-30 17:41:24 [http-nio-8080-exec-3] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [85bfeb7e] 요청 헤더: user-agent: Dart/3.6 (dart:io)
2025-03-30 17:41:24 [http-nio-8080-exec-3] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [85bfeb7e] 요청 헤더: content-type: application/json
2025-03-30 17:41:24 [http-nio-8080-exec-3] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [85bfeb7e] 요청 헤더: accept-encoding: gzip
2025-03-30 17:41:24 [http-nio-8080-exec-3] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [85bfeb7e] 요청 헤더: authorization: Bearer eyJ...
2025-03-30 17:41:24 [http-nio-8080-exec-3] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [85bfeb7e] 요청 헤더: host: localhost:8080
2025-03-30 17:41:24 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.created_at,
        u1_0.display_name,
        u1_0.email,
        u1_0.is_email_verified,
        u1_0.last_login_at,
        u1_0.password,
        u1_0.photo_url,
        u1_0.plan_id,
        u1_0.provider,
        u1_0.role,
        u1_0.uid,
        u1_0.updated_at 
    from
        users u1_0 
    where
        u1_0.uid=?
2025-03-30 17:41:24 [http-nio-8080-exec-3] ERROR c.e.p.c.e.GlobalExceptionHandler - API 예외 발생: 사용자 정보를 찾을 수 없습니다.
2025-03-30 17:41:24 [http-nio-8080-exec-3] INFO  c.e.p.c.f.RequestResponseLoggingFilter - [85bfeb7e] 응답: 404 (146ms)
2025-03-30 17:41:24 [http-nio-8080-exec-3] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [85bfeb7e] 응답 헤더: Vary: Origin
2025-03-30 17:41:24 [http-nio-8080-exec-3] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [85bfeb7e] 응답 헤더: Vary: Access-Control-Request-Method
2025-03-30 17:41:24 [http-nio-8080-exec-3] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [85bfeb7e] 응답 헤더: Vary: Access-Control-Request-Headers
2025-03-30 17:41:24 [http-nio-8080-exec-3] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [85bfeb7e] 응답 헤더: Vary: Origin
2025-03-30 17:41:24 [http-nio-8080-exec-3] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [85bfeb7e] 응답 헤더: Vary: Access-Control-Request-Method
2025-03-30 17:41:24 [http-nio-8080-exec-3] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [85bfeb7e] 응답 헤더: Vary: Access-Control-Request-Headers
2025-03-30 17:41:24 [http-nio-8080-exec-3] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [85bfeb7e] 응답 헤더: Vary: Origin
2025-03-30 17:41:24 [http-nio-8080-exec-3] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [85bfeb7e] 응답 헤더: Vary: Access-Control-Request-Method
2025-03-30 17:41:24 [http-nio-8080-exec-3] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [85bfeb7e] 응답 헤더: Vary: Access-Control-Request-Headers
2025-03-30 17:41:24 [http-nio-8080-exec-3] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [85bfeb7e] 응답 헤더: Content-Type: application/json
2025-03-30 17:41:24 [http-nio-8080-exec-3] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [85bfeb7e] 응답 본문: {"success":false,"status":404,"message":"사용자 정보를 찾을 수 없습니다.","timestamp":"2025-03-30 17:41:24"}
2025-03-30 17:41:29 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.created_at,
        u1_0.display_name,
        u1_0.email,
        u1_0.is_email_verified,
        u1_0.last_login_at,
        u1_0.password,
        u1_0.photo_url,
        u1_0.plan_id,
        u1_0.provider,
        u1_0.role,
        u1_0.uid,
        u1_0.updated_at 
    from
        users u1_0 
    where
        u1_0.uid=?
2025-03-30 17:41:29 [http-nio-8080-exec-5] INFO  c.e.p.c.f.RequestResponseLoggingFilter - [450f3bf7] 요청: GET /api/v1/users/me (127.0.0.1)
2025-03-30 17:41:29 [http-nio-8080-exec-5] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [450f3bf7] 요청 헤더: user-agent: Dart/3.6 (dart:io)
2025-03-30 17:41:29 [http-nio-8080-exec-5] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [450f3bf7] 요청 헤더: content-type: application/json
2025-03-30 17:41:29 [http-nio-8080-exec-5] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [450f3bf7] 요청 헤더: accept-encoding: gzip
2025-03-30 17:41:29 [http-nio-8080-exec-5] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [450f3bf7] 요청 헤더: authorization: Bearer eyJ...
2025-03-30 17:41:29 [http-nio-8080-exec-5] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [450f3bf7] 요청 헤더: host: localhost:8080
2025-03-30 17:41:29 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.created_at,
        u1_0.display_name,
        u1_0.email,
        u1_0.is_email_verified,
        u1_0.last_login_at,
        u1_0.password,
        u1_0.photo_url,
        u1_0.plan_id,
        u1_0.provider,
        u1_0.role,
        u1_0.uid,
        u1_0.updated_at 
    from
        users u1_0 
    where
        u1_0.uid=?
2025-03-30 17:41:29 [http-nio-8080-exec-5] ERROR c.e.p.c.e.GlobalExceptionHandler - API 예외 발생: 사용자 정보를 찾을 수 없습니다.
2025-03-30 17:41:29 [http-nio-8080-exec-5] INFO  c.e.p.c.f.RequestResponseLoggingFilter - [450f3bf7] 응답: 404 (2ms)
2025-03-30 17:41:29 [http-nio-8080-exec-5] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [450f3bf7] 응답 헤더: Vary: Origin
2025-03-30 17:41:29 [http-nio-8080-exec-5] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [450f3bf7] 응답 헤더: Vary: Access-Control-Request-Method
2025-03-30 17:41:29 [http-nio-8080-exec-5] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [450f3bf7] 응답 헤더: Vary: Access-Control-Request-Headers
2025-03-30 17:41:29 [http-nio-8080-exec-5] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [450f3bf7] 응답 헤더: Vary: Origin
2025-03-30 17:41:29 [http-nio-8080-exec-5] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [450f3bf7] 응답 헤더: Vary: Access-Control-Request-Method
2025-03-30 17:41:29 [http-nio-8080-exec-5] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [450f3bf7] 응답 헤더: Vary: Access-Control-Request-Headers
2025-03-30 17:41:29 [http-nio-8080-exec-5] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [450f3bf7] 응답 헤더: Vary: Origin
2025-03-30 17:41:29 [http-nio-8080-exec-5] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [450f3bf7] 응답 헤더: Vary: Access-Control-Request-Method
2025-03-30 17:41:29 [http-nio-8080-exec-5] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [450f3bf7] 응답 헤더: Vary: Access-Control-Request-Headers
2025-03-30 17:41:29 [http-nio-8080-exec-5] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [450f3bf7] 응답 헤더: Content-Type: application/json
2025-03-30 17:41:29 [http-nio-8080-exec-5] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [450f3bf7] 응답 본문: {"success":false,"status":404,"message":"사용자 정보를 찾을 수 없습니다.","timestamp":"2025-03-30 17:41:29"}
2025-03-30 17:41:40 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.created_at,
        u1_0.display_name,
        u1_0.email,
        u1_0.is_email_verified,
        u1_0.last_login_at,
        u1_0.password,
        u1_0.photo_url,
        u1_0.plan_id,
        u1_0.provider,
        u1_0.role,
        u1_0.uid,
        u1_0.updated_at 
    from
        users u1_0 
    where
        u1_0.uid=?
2025-03-30 17:41:40 [http-nio-8080-exec-7] INFO  c.e.p.c.f.RequestResponseLoggingFilter - [4014f0e7] 요청: GET /api/v1/users/me (127.0.0.1)
2025-03-30 17:41:40 [http-nio-8080-exec-7] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [4014f0e7] 요청 헤더: user-agent: Dart/3.6 (dart:io)
2025-03-30 17:41:40 [http-nio-8080-exec-7] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [4014f0e7] 요청 헤더: content-type: application/json
2025-03-30 17:41:40 [http-nio-8080-exec-7] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [4014f0e7] 요청 헤더: accept-encoding: gzip
2025-03-30 17:41:40 [http-nio-8080-exec-7] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [4014f0e7] 요청 헤더: authorization: Bearer eyJ...
2025-03-30 17:41:40 [http-nio-8080-exec-7] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [4014f0e7] 요청 헤더: host: localhost:8080
2025-03-30 17:41:40 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.created_at,
        u1_0.display_name,
        u1_0.email,
        u1_0.is_email_verified,
        u1_0.last_login_at,
        u1_0.password,
        u1_0.photo_url,
        u1_0.plan_id,
        u1_0.provider,
        u1_0.role,
        u1_0.uid,
        u1_0.updated_at 
    from
        users u1_0 
    where
        u1_0.uid=?
2025-03-30 17:41:40 [http-nio-8080-exec-7] ERROR c.e.p.c.e.GlobalExceptionHandler - API 예외 발생: 사용자 정보를 찾을 수 없습니다.
2025-03-30 17:41:40 [http-nio-8080-exec-7] INFO  c.e.p.c.f.RequestResponseLoggingFilter - [4014f0e7] 응답: 404 (2ms)
2025-03-30 17:41:40 [http-nio-8080-exec-7] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [4014f0e7] 응답 헤더: Vary: Origin
2025-03-30 17:41:40 [http-nio-8080-exec-7] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [4014f0e7] 응답 헤더: Vary: Access-Control-Request-Method
2025-03-30 17:41:40 [http-nio-8080-exec-7] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [4014f0e7] 응답 헤더: Vary: Access-Control-Request-Headers
2025-03-30 17:41:40 [http-nio-8080-exec-7] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [4014f0e7] 응답 헤더: Vary: Origin
2025-03-30 17:41:40 [http-nio-8080-exec-7] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [4014f0e7] 응답 헤더: Vary: Access-Control-Request-Method
2025-03-30 17:41:40 [http-nio-8080-exec-7] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [4014f0e7] 응답 헤더: Vary: Access-Control-Request-Headers
2025-03-30 17:41:40 [http-nio-8080-exec-7] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [4014f0e7] 응답 헤더: Vary: Origin
2025-03-30 17:41:40 [http-nio-8080-exec-7] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [4014f0e7] 응답 헤더: Vary: Access-Control-Request-Method
2025-03-30 17:41:40 [http-nio-8080-exec-7] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [4014f0e7] 응답 헤더: Vary: Access-Control-Request-Headers
2025-03-30 17:41:40 [http-nio-8080-exec-7] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [4014f0e7] 응답 헤더: Content-Type: application/json
2025-03-30 17:41:40 [http-nio-8080-exec-7] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [4014f0e7] 응답 본문: {"success":false,"status":404,"message":"사용자 정보를 찾을 수 없습니다.","timestamp":"2025-03-30 17:41:40"}
2025-03-30 17:48:12 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.created_at,
        u1_0.display_name,
        u1_0.email,
        u1_0.is_email_verified,
        u1_0.last_login_at,
        u1_0.password,
        u1_0.photo_url,
        u1_0.plan_id,
        u1_0.provider,
        u1_0.role,
        u1_0.uid,
        u1_0.updated_at 
    from
        users u1_0 
    where
        u1_0.uid=?
2025-03-30 17:48:12 [http-nio-8080-exec-9] INFO  c.e.p.c.f.RequestResponseLoggingFilter - [c04ac639] 요청: GET /api/v1/users/me (127.0.0.1)
2025-03-30 17:48:12 [http-nio-8080-exec-9] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [c04ac639] 요청 헤더: user-agent: Dart/3.6 (dart:io)
2025-03-30 17:48:12 [http-nio-8080-exec-9] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [c04ac639] 요청 헤더: content-type: application/json
2025-03-30 17:48:12 [http-nio-8080-exec-9] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [c04ac639] 요청 헤더: accept-encoding: gzip
2025-03-30 17:48:12 [http-nio-8080-exec-9] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [c04ac639] 요청 헤더: authorization: Bearer eyJ...
2025-03-30 17:48:12 [http-nio-8080-exec-9] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [c04ac639] 요청 헤더: host: localhost:8080
2025-03-30 17:48:12 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.created_at,
        u1_0.display_name,
        u1_0.email,
        u1_0.is_email_verified,
        u1_0.last_login_at,
        u1_0.password,
        u1_0.photo_url,
        u1_0.plan_id,
        u1_0.provider,
        u1_0.role,
        u1_0.uid,
        u1_0.updated_at 
    from
        users u1_0 
    where
        u1_0.uid=?
2025-03-30 17:48:12 [http-nio-8080-exec-9] ERROR c.e.p.c.e.GlobalExceptionHandler - API 예외 발생: 사용자 정보를 찾을 수 없습니다.
2025-03-30 17:48:12 [http-nio-8080-exec-9] INFO  c.e.p.c.f.RequestResponseLoggingFilter - [c04ac639] 응답: 404 (6ms)
2025-03-30 17:48:12 [http-nio-8080-exec-9] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [c04ac639] 응답 헤더: Vary: Origin
2025-03-30 17:48:12 [http-nio-8080-exec-9] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [c04ac639] 응답 헤더: Vary: Access-Control-Request-Method
2025-03-30 17:48:12 [http-nio-8080-exec-9] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [c04ac639] 응답 헤더: Vary: Access-Control-Request-Headers
2025-03-30 17:48:12 [http-nio-8080-exec-9] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [c04ac639] 응답 헤더: Vary: Origin
2025-03-30 17:48:12 [http-nio-8080-exec-9] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [c04ac639] 응답 헤더: Vary: Access-Control-Request-Method
2025-03-30 17:48:12 [http-nio-8080-exec-9] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [c04ac639] 응답 헤더: Vary: Access-Control-Request-Headers
2025-03-30 17:48:12 [http-nio-8080-exec-9] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [c04ac639] 응답 헤더: Vary: Origin
2025-03-30 17:48:12 [http-nio-8080-exec-9] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [c04ac639] 응답 헤더: Vary: Access-Control-Request-Method
2025-03-30 17:48:12 [http-nio-8080-exec-9] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [c04ac639] 응답 헤더: Vary: Access-Control-Request-Headers
2025-03-30 17:48:12 [http-nio-8080-exec-9] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [c04ac639] 응답 헤더: Content-Type: application/json
2025-03-30 17:48:12 [http-nio-8080-exec-9] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [c04ac639] 응답 본문: {"success":false,"status":404,"message":"사용자 정보를 찾을 수 없습니다.","timestamp":"2025-03-30 17:48:12"}
2025-03-30 17:51:56 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.created_at,
        u1_0.display_name,
        u1_0.email,
        u1_0.is_email_verified,
        u1_0.last_login_at,
        u1_0.password,
        u1_0.photo_url,
        u1_0.plan_id,
        u1_0.provider,
        u1_0.role,
        u1_0.uid,
        u1_0.updated_at 
    from
        users u1_0 
    where
        u1_0.uid=?
2025-03-30 17:51:56 [http-nio-8080-exec-1] INFO  c.e.p.c.f.RequestResponseLoggingFilter - [9e3b3dd1] 요청: GET /api/v1/users/me (127.0.0.1)
2025-03-30 17:51:56 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [9e3b3dd1] 요청 헤더: user-agent: Dart/3.6 (dart:io)
2025-03-30 17:51:56 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [9e3b3dd1] 요청 헤더: content-type: application/json
2025-03-30 17:51:56 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [9e3b3dd1] 요청 헤더: accept-encoding: gzip
2025-03-30 17:51:56 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [9e3b3dd1] 요청 헤더: authorization: Bearer eyJ...
2025-03-30 17:51:56 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [9e3b3dd1] 요청 헤더: host: localhost:8080
2025-03-30 17:51:56 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.created_at,
        u1_0.display_name,
        u1_0.email,
        u1_0.is_email_verified,
        u1_0.last_login_at,
        u1_0.password,
        u1_0.photo_url,
        u1_0.plan_id,
        u1_0.provider,
        u1_0.role,
        u1_0.uid,
        u1_0.updated_at 
    from
        users u1_0 
    where
        u1_0.uid=?
2025-03-30 17:51:56 [http-nio-8080-exec-1] ERROR c.e.p.c.e.GlobalExceptionHandler - API 예외 발생: 사용자 정보를 찾을 수 없습니다.
2025-03-30 17:51:56 [http-nio-8080-exec-1] INFO  c.e.p.c.f.RequestResponseLoggingFilter - [9e3b3dd1] 응답: 404 (6ms)
2025-03-30 17:51:56 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [9e3b3dd1] 응답 헤더: Vary: Origin
2025-03-30 17:51:56 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [9e3b3dd1] 응답 헤더: Vary: Access-Control-Request-Method
2025-03-30 17:51:56 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [9e3b3dd1] 응답 헤더: Vary: Access-Control-Request-Headers
2025-03-30 17:51:56 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [9e3b3dd1] 응답 헤더: Vary: Origin
2025-03-30 17:51:56 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [9e3b3dd1] 응답 헤더: Vary: Access-Control-Request-Method
2025-03-30 17:51:56 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [9e3b3dd1] 응답 헤더: Vary: Access-Control-Request-Headers
2025-03-30 17:51:56 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [9e3b3dd1] 응답 헤더: Vary: Origin
2025-03-30 17:51:56 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [9e3b3dd1] 응답 헤더: Vary: Access-Control-Request-Method
2025-03-30 17:51:56 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [9e3b3dd1] 응답 헤더: Vary: Access-Control-Request-Headers
2025-03-30 17:51:56 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [9e3b3dd1] 응답 헤더: Content-Type: application/json
2025-03-30 17:51:56 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [9e3b3dd1] 응답 본문: {"success":false,"status":404,"message":"사용자 정보를 찾을 수 없습니다.","timestamp":"2025-03-30 17:51:56"}
2025-03-30 17:52:02 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.created_at,
        u1_0.display_name,
        u1_0.email,
        u1_0.is_email_verified,
        u1_0.last_login_at,
        u1_0.password,
        u1_0.photo_url,
        u1_0.plan_id,
        u1_0.provider,
        u1_0.role,
        u1_0.uid,
        u1_0.updated_at 
    from
        users u1_0 
    where
        u1_0.uid=?
2025-03-30 17:52:02 [http-nio-8080-exec-3] INFO  c.e.p.c.f.RequestResponseLoggingFilter - [823b7082] 요청: GET /api/v1/users/me (127.0.0.1)
2025-03-30 17:52:02 [http-nio-8080-exec-3] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [823b7082] 요청 헤더: user-agent: Dart/3.6 (dart:io)
2025-03-30 17:52:02 [http-nio-8080-exec-3] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [823b7082] 요청 헤더: content-type: application/json
2025-03-30 17:52:02 [http-nio-8080-exec-3] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [823b7082] 요청 헤더: accept-encoding: gzip
2025-03-30 17:52:02 [http-nio-8080-exec-3] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [823b7082] 요청 헤더: authorization: Bearer eyJ...
2025-03-30 17:52:02 [http-nio-8080-exec-3] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [823b7082] 요청 헤더: host: localhost:8080
2025-03-30 17:52:02 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.created_at,
        u1_0.display_name,
        u1_0.email,
        u1_0.is_email_verified,
        u1_0.last_login_at,
        u1_0.password,
        u1_0.photo_url,
        u1_0.plan_id,
        u1_0.provider,
        u1_0.role,
        u1_0.uid,
        u1_0.updated_at 
    from
        users u1_0 
    where
        u1_0.uid=?
2025-03-30 17:52:02 [http-nio-8080-exec-3] ERROR c.e.p.c.e.GlobalExceptionHandler - API 예외 발생: 사용자 정보를 찾을 수 없습니다.
2025-03-30 17:52:02 [http-nio-8080-exec-3] INFO  c.e.p.c.f.RequestResponseLoggingFilter - [823b7082] 응답: 404 (2ms)
2025-03-30 17:52:02 [http-nio-8080-exec-3] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [823b7082] 응답 헤더: Vary: Origin
2025-03-30 17:52:02 [http-nio-8080-exec-3] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [823b7082] 응답 헤더: Vary: Access-Control-Request-Method
2025-03-30 17:52:02 [http-nio-8080-exec-3] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [823b7082] 응답 헤더: Vary: Access-Control-Request-Headers
2025-03-30 17:52:02 [http-nio-8080-exec-3] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [823b7082] 응답 헤더: Vary: Origin
2025-03-30 17:52:02 [http-nio-8080-exec-3] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [823b7082] 응답 헤더: Vary: Access-Control-Request-Method
2025-03-30 17:52:02 [http-nio-8080-exec-3] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [823b7082] 응답 헤더: Vary: Access-Control-Request-Headers
2025-03-30 17:52:02 [http-nio-8080-exec-3] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [823b7082] 응답 헤더: Vary: Origin
2025-03-30 17:52:02 [http-nio-8080-exec-3] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [823b7082] 응답 헤더: Vary: Access-Control-Request-Method
2025-03-30 17:52:02 [http-nio-8080-exec-3] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [823b7082] 응답 헤더: Vary: Access-Control-Request-Headers
2025-03-30 17:52:02 [http-nio-8080-exec-3] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [823b7082] 응답 헤더: Content-Type: application/json
2025-03-30 17:52:02 [http-nio-8080-exec-3] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [823b7082] 응답 본문: {"success":false,"status":404,"message":"사용자 정보를 찾을 수 없습니다.","timestamp":"2025-03-30 17:52:02"}
2025-03-30 17:52:17 [http-nio-8080-exec-5] INFO  c.e.p.c.f.RequestResponseLoggingFilter - [15e805c1] 요청: POST /api/v1/auth/social-login (127.0.0.1)
2025-03-30 17:52:17 [http-nio-8080-exec-5] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [15e805c1] 요청 헤더: user-agent: Dart/3.6 (dart:io)
2025-03-30 17:52:17 [http-nio-8080-exec-5] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [15e805c1] 요청 헤더: content-type: application/json; charset=utf-8
2025-03-30 17:52:17 [http-nio-8080-exec-5] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [15e805c1] 요청 헤더: accept-encoding: gzip
2025-03-30 17:52:17 [http-nio-8080-exec-5] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [15e805c1] 요청 헤더: content-length: 294
2025-03-30 17:52:17 [http-nio-8080-exec-5] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [15e805c1] 요청 헤더: authorization: Bearer eyJ...
2025-03-30 17:52:17 [http-nio-8080-exec-5] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [15e805c1] 요청 헤더: host: localhost:8080
2025-03-30 17:52:17 [http-nio-8080-exec-5] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [15e805c1] 요청 본문: {"email":"dltjdgur327@gmail.com","displayName":"이성혁","provider":"GOOGLE","uid":"FckskR46rZMqByM1U9q6XzudUD23","photoUrl":"https://lh3.googleusercontent.com/a/ACg8ocLoTzQiYf2FdnGiPYKW7SrIKqJdbSSV8rrKMv8HO4UAhFhflqlc=s96-c","isEmailVerified":true,"lastLoginAt":"2025-03-30T17:52:17.596509"}
2025-03-30 17:52:17 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.created_at,
        u1_0.display_name,
        u1_0.email,
        u1_0.is_email_verified,
        u1_0.last_login_at,
        u1_0.password,
        u1_0.photo_url,
        u1_0.plan_id,
        u1_0.provider,
        u1_0.role,
        u1_0.uid,
        u1_0.updated_at 
    from
        users u1_0 
    where
        u1_0.uid=?
2025-03-30 17:52:17 [http-nio-8080-exec-6] INFO  c.e.p.c.f.RequestResponseLoggingFilter - [43a29bf7] 요청: GET /api/v1/users/me (127.0.0.1)
2025-03-30 17:52:17 [http-nio-8080-exec-6] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [43a29bf7] 요청 헤더: user-agent: Dart/3.6 (dart:io)
2025-03-30 17:52:17 [http-nio-8080-exec-6] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [43a29bf7] 요청 헤더: content-type: application/json
2025-03-30 17:52:17 [http-nio-8080-exec-6] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [43a29bf7] 요청 헤더: accept-encoding: gzip
2025-03-30 17:52:17 [http-nio-8080-exec-6] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [43a29bf7] 요청 헤더: authorization: Bearer eyJ...
2025-03-30 17:52:17 [http-nio-8080-exec-6] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [43a29bf7] 요청 헤더: host: localhost:8080
2025-03-30 17:52:17 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.created_at,
        u1_0.display_name,
        u1_0.email,
        u1_0.is_email_verified,
        u1_0.last_login_at,
        u1_0.password,
        u1_0.photo_url,
        u1_0.plan_id,
        u1_0.provider,
        u1_0.role,
        u1_0.uid,
        u1_0.updated_at 
    from
        users u1_0 
    where
        u1_0.uid=?
2025-03-30 17:52:17 [http-nio-8080-exec-6] ERROR c.e.p.c.e.GlobalExceptionHandler - API 예외 발생: 사용자 정보를 찾을 수 없습니다.
2025-03-30 17:52:17 [http-nio-8080-exec-6] INFO  c.e.p.c.f.RequestResponseLoggingFilter - [43a29bf7] 응답: 404 (3ms)
2025-03-30 17:52:17 [http-nio-8080-exec-6] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [43a29bf7] 응답 헤더: Vary: Origin
2025-03-30 17:52:17 [http-nio-8080-exec-6] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [43a29bf7] 응답 헤더: Vary: Access-Control-Request-Method
2025-03-30 17:52:17 [http-nio-8080-exec-6] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [43a29bf7] 응답 헤더: Vary: Access-Control-Request-Headers
2025-03-30 17:52:17 [http-nio-8080-exec-6] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [43a29bf7] 응답 헤더: Vary: Origin
2025-03-30 17:52:17 [http-nio-8080-exec-6] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [43a29bf7] 응답 헤더: Vary: Access-Control-Request-Method
2025-03-30 17:52:17 [http-nio-8080-exec-6] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [43a29bf7] 응답 헤더: Vary: Access-Control-Request-Headers
2025-03-30 17:52:17 [http-nio-8080-exec-6] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [43a29bf7] 응답 헤더: Vary: Origin
2025-03-30 17:52:17 [http-nio-8080-exec-6] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [43a29bf7] 응답 헤더: Vary: Access-Control-Request-Method
2025-03-30 17:52:17 [http-nio-8080-exec-6] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [43a29bf7] 응답 헤더: Vary: Access-Control-Request-Headers
2025-03-30 17:52:17 [http-nio-8080-exec-6] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [43a29bf7] 응답 헤더: Content-Type: application/json
2025-03-30 17:52:17 [http-nio-8080-exec-6] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [43a29bf7] 응답 본문: {"success":false,"status":404,"message":"사용자 정보를 찾을 수 없습니다.","timestamp":"2025-03-30 17:52:17"}
2025-03-30 17:52:18 [http-nio-8080-exec-5] ERROR c.e.p.c.e.GlobalExceptionHandler - 예상치 못한 예외 발생
org.springframework.http.converter.HttpMessageNotReadableException: Required request body is missing: public org.springframework.http.ResponseEntity<com.evawova.preview.common.response.ApiResponse<java.util.Map<java.lang.String, java.lang.Object>>> com.evawova.preview.domain.user.controller.AuthController.socialLogin(com.evawova.preview.domain.user.dto.SocialLoginRequest,jakarta.servlet.http.HttpServletRequest)
	at org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor.readWithMessageConverters(RequestResponseBodyMethodProcessor.java:162)
	at org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor.resolveArgument(RequestResponseBodyMethodProcessor.java:134)
	at org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:122)
	at org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:228)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:182)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:101)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at com.evawova.preview.common.filter.RequestResponseLoggingFilter.doFilterInternal(RequestResponseLoggingFilter.java:68)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.ObservationFilterChainDecorator$FilterObservation$SimpleFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:479)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:340)
	at org.springframework.security.web.ObservationFilterChainDecorator.lambda$wrapSecured$0(ObservationFilterChainDecorator.java:82)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:128)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:101)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$0(ObservationFilterChainDecorator.java:323)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:224)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-03-30 17:52:18 [http-nio-8080-exec-5] INFO  c.e.p.c.f.RequestResponseLoggingFilter - [15e805c1] 응답: 500 (44ms)
2025-03-30 17:52:18 [http-nio-8080-exec-5] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [15e805c1] 응답 헤더: Vary: Origin
2025-03-30 17:52:18 [http-nio-8080-exec-5] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [15e805c1] 응답 헤더: Vary: Access-Control-Request-Method
2025-03-30 17:52:18 [http-nio-8080-exec-5] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [15e805c1] 응답 헤더: Vary: Access-Control-Request-Headers
2025-03-30 17:52:18 [http-nio-8080-exec-5] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [15e805c1] 응답 헤더: Vary: Origin
2025-03-30 17:52:18 [http-nio-8080-exec-5] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [15e805c1] 응답 헤더: Vary: Access-Control-Request-Method
2025-03-30 17:52:18 [http-nio-8080-exec-5] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [15e805c1] 응답 헤더: Vary: Access-Control-Request-Headers
2025-03-30 17:52:18 [http-nio-8080-exec-5] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [15e805c1] 응답 헤더: Vary: Origin
2025-03-30 17:52:18 [http-nio-8080-exec-5] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [15e805c1] 응답 헤더: Vary: Access-Control-Request-Method
2025-03-30 17:52:18 [http-nio-8080-exec-5] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [15e805c1] 응답 헤더: Vary: Access-Control-Request-Headers
2025-03-30 17:52:18 [http-nio-8080-exec-5] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [15e805c1] 응답 헤더: Content-Type: application/json
2025-03-30 17:52:18 [http-nio-8080-exec-5] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [15e805c1] 응답 본문: {"success":false,"status":500,"message":"서버 내부 오류가 발생했습니다.","timestamp":"2025-03-30 17:52:18"}
2025-03-30 18:01:08 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.created_at,
        u1_0.display_name,
        u1_0.email,
        u1_0.is_email_verified,
        u1_0.last_login_at,
        u1_0.password,
        u1_0.photo_url,
        u1_0.plan_id,
        u1_0.provider,
        u1_0.role,
        u1_0.uid,
        u1_0.updated_at 
    from
        users u1_0 
    where
        u1_0.uid=?
2025-03-30 18:01:08 [http-nio-8080-exec-8] INFO  c.e.p.c.f.RequestResponseLoggingFilter - [9a0a1f36] 요청: GET /api/v1/users/me (127.0.0.1)
2025-03-30 18:01:08 [http-nio-8080-exec-8] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [9a0a1f36] 요청 헤더: user-agent: Dart/3.6 (dart:io)
2025-03-30 18:01:08 [http-nio-8080-exec-8] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [9a0a1f36] 요청 헤더: content-type: application/json
2025-03-30 18:01:08 [http-nio-8080-exec-8] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [9a0a1f36] 요청 헤더: accept-encoding: gzip
2025-03-30 18:01:08 [http-nio-8080-exec-8] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [9a0a1f36] 요청 헤더: authorization: Bearer eyJ...
2025-03-30 18:01:08 [http-nio-8080-exec-8] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [9a0a1f36] 요청 헤더: host: localhost:8080
2025-03-30 18:01:08 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.created_at,
        u1_0.display_name,
        u1_0.email,
        u1_0.is_email_verified,
        u1_0.last_login_at,
        u1_0.password,
        u1_0.photo_url,
        u1_0.plan_id,
        u1_0.provider,
        u1_0.role,
        u1_0.uid,
        u1_0.updated_at 
    from
        users u1_0 
    where
        u1_0.uid=?
2025-03-30 18:01:08 [http-nio-8080-exec-8] ERROR c.e.p.c.e.GlobalExceptionHandler - API 예외 발생: 사용자 정보를 찾을 수 없습니다.
2025-03-30 18:01:08 [http-nio-8080-exec-8] INFO  c.e.p.c.f.RequestResponseLoggingFilter - [9a0a1f36] 응답: 404 (8ms)
2025-03-30 18:01:08 [http-nio-8080-exec-8] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [9a0a1f36] 응답 헤더: Vary: Origin
2025-03-30 18:01:08 [http-nio-8080-exec-8] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [9a0a1f36] 응답 헤더: Vary: Access-Control-Request-Method
2025-03-30 18:01:08 [http-nio-8080-exec-8] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [9a0a1f36] 응답 헤더: Vary: Access-Control-Request-Headers
2025-03-30 18:01:08 [http-nio-8080-exec-8] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [9a0a1f36] 응답 헤더: Vary: Origin
2025-03-30 18:01:08 [http-nio-8080-exec-8] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [9a0a1f36] 응답 헤더: Vary: Access-Control-Request-Method
2025-03-30 18:01:08 [http-nio-8080-exec-8] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [9a0a1f36] 응답 헤더: Vary: Access-Control-Request-Headers
2025-03-30 18:01:08 [http-nio-8080-exec-8] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [9a0a1f36] 응답 헤더: Vary: Origin
2025-03-30 18:01:08 [http-nio-8080-exec-8] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [9a0a1f36] 응답 헤더: Vary: Access-Control-Request-Method
2025-03-30 18:01:08 [http-nio-8080-exec-8] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [9a0a1f36] 응답 헤더: Vary: Access-Control-Request-Headers
2025-03-30 18:01:08 [http-nio-8080-exec-8] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [9a0a1f36] 응답 헤더: Content-Type: application/json
2025-03-30 18:01:08 [http-nio-8080-exec-8] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [9a0a1f36] 응답 본문: {"success":false,"status":404,"message":"사용자 정보를 찾을 수 없습니다.","timestamp":"2025-03-30 18:01:08"}
2025-03-30 18:01:12 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.created_at,
        u1_0.display_name,
        u1_0.email,
        u1_0.is_email_verified,
        u1_0.last_login_at,
        u1_0.password,
        u1_0.photo_url,
        u1_0.plan_id,
        u1_0.provider,
        u1_0.role,
        u1_0.uid,
        u1_0.updated_at 
    from
        users u1_0 
    where
        u1_0.uid=?
2025-03-30 18:01:12 [http-nio-8080-exec-10] INFO  c.e.p.c.f.RequestResponseLoggingFilter - [a5247de7] 요청: GET /api/v1/users/me (127.0.0.1)
2025-03-30 18:01:12 [http-nio-8080-exec-10] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [a5247de7] 요청 헤더: user-agent: Dart/3.6 (dart:io)
2025-03-30 18:01:12 [http-nio-8080-exec-10] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [a5247de7] 요청 헤더: content-type: application/json
2025-03-30 18:01:12 [http-nio-8080-exec-10] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [a5247de7] 요청 헤더: accept-encoding: gzip
2025-03-30 18:01:12 [http-nio-8080-exec-10] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [a5247de7] 요청 헤더: authorization: Bearer eyJ...
2025-03-30 18:01:12 [http-nio-8080-exec-10] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [a5247de7] 요청 헤더: host: localhost:8080
2025-03-30 18:01:12 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.created_at,
        u1_0.display_name,
        u1_0.email,
        u1_0.is_email_verified,
        u1_0.last_login_at,
        u1_0.password,
        u1_0.photo_url,
        u1_0.plan_id,
        u1_0.provider,
        u1_0.role,
        u1_0.uid,
        u1_0.updated_at 
    from
        users u1_0 
    where
        u1_0.uid=?
2025-03-30 18:01:12 [http-nio-8080-exec-10] ERROR c.e.p.c.e.GlobalExceptionHandler - API 예외 발생: 사용자 정보를 찾을 수 없습니다.
2025-03-30 18:01:12 [http-nio-8080-exec-10] INFO  c.e.p.c.f.RequestResponseLoggingFilter - [a5247de7] 응답: 404 (2ms)
2025-03-30 18:01:12 [http-nio-8080-exec-10] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [a5247de7] 응답 헤더: Vary: Origin
2025-03-30 18:01:12 [http-nio-8080-exec-10] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [a5247de7] 응답 헤더: Vary: Access-Control-Request-Method
2025-03-30 18:01:12 [http-nio-8080-exec-10] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [a5247de7] 응답 헤더: Vary: Access-Control-Request-Headers
2025-03-30 18:01:12 [http-nio-8080-exec-10] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [a5247de7] 응답 헤더: Vary: Origin
2025-03-30 18:01:12 [http-nio-8080-exec-10] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [a5247de7] 응답 헤더: Vary: Access-Control-Request-Method
2025-03-30 18:01:12 [http-nio-8080-exec-10] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [a5247de7] 응답 헤더: Vary: Access-Control-Request-Headers
2025-03-30 18:01:12 [http-nio-8080-exec-10] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [a5247de7] 응답 헤더: Vary: Origin
2025-03-30 18:01:12 [http-nio-8080-exec-10] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [a5247de7] 응답 헤더: Vary: Access-Control-Request-Method
2025-03-30 18:01:12 [http-nio-8080-exec-10] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [a5247de7] 응답 헤더: Vary: Access-Control-Request-Headers
2025-03-30 18:01:12 [http-nio-8080-exec-10] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [a5247de7] 응답 헤더: Content-Type: application/json
2025-03-30 18:01:12 [http-nio-8080-exec-10] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [a5247de7] 응답 본문: {"success":false,"status":404,"message":"사용자 정보를 찾을 수 없습니다.","timestamp":"2025-03-30 18:01:12"}
2025-03-30 18:01:28 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.created_at,
        u1_0.display_name,
        u1_0.email,
        u1_0.is_email_verified,
        u1_0.last_login_at,
        u1_0.password,
        u1_0.photo_url,
        u1_0.plan_id,
        u1_0.provider,
        u1_0.role,
        u1_0.uid,
        u1_0.updated_at 
    from
        users u1_0 
    where
        u1_0.uid=?
2025-03-30 18:01:28 [http-nio-8080-exec-2] INFO  c.e.p.c.f.RequestResponseLoggingFilter - [aa95165e] 요청: GET /api/v1/users/me (127.0.0.1)
2025-03-30 18:01:28 [http-nio-8080-exec-2] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [aa95165e] 요청 헤더: user-agent: Dart/3.6 (dart:io)
2025-03-30 18:01:28 [http-nio-8080-exec-2] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [aa95165e] 요청 헤더: content-type: application/json
2025-03-30 18:01:28 [http-nio-8080-exec-2] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [aa95165e] 요청 헤더: accept-encoding: gzip
2025-03-30 18:01:28 [http-nio-8080-exec-3] INFO  c.e.p.c.f.RequestResponseLoggingFilter - [61151d51] 요청: POST /api/v1/auth/social-login (127.0.0.1)
2025-03-30 18:01:28 [http-nio-8080-exec-2] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [aa95165e] 요청 헤더: authorization: Bearer eyJ...
2025-03-30 18:01:28 [http-nio-8080-exec-3] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [61151d51] 요청 헤더: user-agent: Dart/3.6 (dart:io)
2025-03-30 18:01:28 [http-nio-8080-exec-3] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [61151d51] 요청 헤더: content-type: application/json; charset=utf-8
2025-03-30 18:01:28 [http-nio-8080-exec-3] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [61151d51] 요청 헤더: accept-encoding: gzip
2025-03-30 18:01:28 [http-nio-8080-exec-2] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [aa95165e] 요청 헤더: host: localhost:8080
2025-03-30 18:01:28 [http-nio-8080-exec-3] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [61151d51] 요청 헤더: content-length: 294
2025-03-30 18:01:28 [http-nio-8080-exec-3] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [61151d51] 요청 헤더: authorization: Bearer eyJ...
2025-03-30 18:01:28 [http-nio-8080-exec-3] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [61151d51] 요청 헤더: host: localhost:8080
2025-03-30 18:01:28 [http-nio-8080-exec-3] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [61151d51] 요청 본문: {"email":"dltjdgur327@gmail.com","displayName":"이성혁","provider":"GOOGLE","uid":"FckskR46rZMqByM1U9q6XzudUD23","photoUrl":"https://lh3.googleusercontent.com/a/ACg8ocLoTzQiYf2FdnGiPYKW7SrIKqJdbSSV8rrKMv8HO4UAhFhflqlc=s96-c","isEmailVerified":true,"lastLoginAt":"2025-03-30T18:01:28.100619"}
2025-03-30 18:01:28 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.created_at,
        u1_0.display_name,
        u1_0.email,
        u1_0.is_email_verified,
        u1_0.last_login_at,
        u1_0.password,
        u1_0.photo_url,
        u1_0.plan_id,
        u1_0.provider,
        u1_0.role,
        u1_0.uid,
        u1_0.updated_at 
    from
        users u1_0 
    where
        u1_0.uid=?
2025-03-30 18:01:28 [http-nio-8080-exec-2] ERROR c.e.p.c.e.GlobalExceptionHandler - API 예외 발생: 사용자 정보를 찾을 수 없습니다.
2025-03-30 18:01:28 [http-nio-8080-exec-2] INFO  c.e.p.c.f.RequestResponseLoggingFilter - [aa95165e] 응답: 404 (2ms)
2025-03-30 18:01:28 [http-nio-8080-exec-2] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [aa95165e] 응답 헤더: Vary: Origin
2025-03-30 18:01:28 [http-nio-8080-exec-2] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [aa95165e] 응답 헤더: Vary: Access-Control-Request-Method
2025-03-30 18:01:28 [http-nio-8080-exec-2] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [aa95165e] 응답 헤더: Vary: Access-Control-Request-Headers
2025-03-30 18:01:28 [http-nio-8080-exec-2] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [aa95165e] 응답 헤더: Vary: Origin
2025-03-30 18:01:28 [http-nio-8080-exec-2] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [aa95165e] 응답 헤더: Vary: Access-Control-Request-Method
2025-03-30 18:01:28 [http-nio-8080-exec-2] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [aa95165e] 응답 헤더: Vary: Access-Control-Request-Headers
2025-03-30 18:01:28 [http-nio-8080-exec-2] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [aa95165e] 응답 헤더: Vary: Origin
2025-03-30 18:01:28 [http-nio-8080-exec-2] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [aa95165e] 응답 헤더: Vary: Access-Control-Request-Method
2025-03-30 18:01:28 [http-nio-8080-exec-2] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [aa95165e] 응답 헤더: Vary: Access-Control-Request-Headers
2025-03-30 18:01:28 [http-nio-8080-exec-2] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [aa95165e] 응답 헤더: Content-Type: application/json
2025-03-30 18:01:28 [http-nio-8080-exec-2] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [aa95165e] 응답 본문: {"success":false,"status":404,"message":"사용자 정보를 찾을 수 없습니다.","timestamp":"2025-03-30 18:01:28"}
2025-03-30 18:01:28 [http-nio-8080-exec-3] ERROR c.e.p.c.e.GlobalExceptionHandler - 예상치 못한 예외 발생
org.springframework.http.converter.HttpMessageNotReadableException: Required request body is missing: public org.springframework.http.ResponseEntity<com.evawova.preview.common.response.ApiResponse<java.util.Map<java.lang.String, java.lang.Object>>> com.evawova.preview.domain.user.controller.AuthController.socialLogin(com.evawova.preview.domain.user.dto.SocialLoginRequest,jakarta.servlet.http.HttpServletRequest)
	at org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor.readWithMessageConverters(RequestResponseBodyMethodProcessor.java:162)
	at org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor.resolveArgument(RequestResponseBodyMethodProcessor.java:134)
	at org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:122)
	at org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:228)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:182)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:101)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at com.evawova.preview.common.filter.RequestResponseLoggingFilter.doFilterInternal(RequestResponseLoggingFilter.java:68)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.ObservationFilterChainDecorator$FilterObservation$SimpleFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:479)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:340)
	at org.springframework.security.web.ObservationFilterChainDecorator.lambda$wrapSecured$0(ObservationFilterChainDecorator.java:82)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:128)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:101)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$0(ObservationFilterChainDecorator.java:323)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:224)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-03-30 18:01:28 [http-nio-8080-exec-3] INFO  c.e.p.c.f.RequestResponseLoggingFilter - [61151d51] 응답: 500 (4ms)
2025-03-30 18:01:28 [http-nio-8080-exec-3] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [61151d51] 응답 헤더: Vary: Origin
2025-03-30 18:01:28 [http-nio-8080-exec-3] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [61151d51] 응답 헤더: Vary: Access-Control-Request-Method
2025-03-30 18:01:28 [http-nio-8080-exec-3] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [61151d51] 응답 헤더: Vary: Access-Control-Request-Headers
2025-03-30 18:01:28 [http-nio-8080-exec-3] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [61151d51] 응답 헤더: Vary: Origin
2025-03-30 18:01:28 [http-nio-8080-exec-3] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [61151d51] 응답 헤더: Vary: Access-Control-Request-Method
2025-03-30 18:01:28 [http-nio-8080-exec-3] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [61151d51] 응답 헤더: Vary: Access-Control-Request-Headers
2025-03-30 18:01:28 [http-nio-8080-exec-3] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [61151d51] 응답 헤더: Vary: Origin
2025-03-30 18:01:28 [http-nio-8080-exec-3] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [61151d51] 응답 헤더: Vary: Access-Control-Request-Method
2025-03-30 18:01:28 [http-nio-8080-exec-3] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [61151d51] 응답 헤더: Vary: Access-Control-Request-Headers
2025-03-30 18:01:28 [http-nio-8080-exec-3] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [61151d51] 응답 헤더: Content-Type: application/json
2025-03-30 18:01:28 [http-nio-8080-exec-3] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [61151d51] 응답 본문: {"success":false,"status":500,"message":"서버 내부 오류가 발생했습니다.","timestamp":"2025-03-30 18:01:28"}
2025-03-30 18:02:14 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-03-30 18:02:14 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-03-30 18:02:14 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-03-30 18:02:15 [main] INFO  c.e.p.PreviewServiceApplication - Starting PreviewServiceApplication using Java 21.0.5 with PID 37761 (/Users/admin/study/preview-service/bin/main started by admin in /Users/admin/study/preview-service)
2025-03-30 18:02:15 [main] DEBUG c.e.p.PreviewServiceApplication - Running with Spring Boot v3.2.3, Spring v6.1.4
2025-03-30 18:02:15 [main] INFO  c.e.p.PreviewServiceApplication - The following 1 profile is active: "local"
2025-03-30 18:02:15 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-03-30 18:02:15 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 31 ms. Found 3 JPA repository interfaces.
2025-03-30 18:02:15 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-03-30 18:02:16 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-03-30 18:02:16 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.19]
2025-03-30 18:02:16 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-03-30 18:02:16 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1024 ms
2025-03-30 18:02:16 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-03-30 18:02:16 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:testdb user=SA
2025-03-30 18:02:16 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-03-30 18:02:16 [main] INFO  o.s.b.a.h.H2ConsoleAutoConfiguration - H2 console available at '/h2-console'. Database available at 'jdbc:h2:mem:testdb'
2025-03-30 18:02:16 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-03-30 18:02:16 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.4.Final
2025-03-30 18:02:16 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-03-30 18:02:16 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-03-30 18:02:16 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: H2Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-03-30 18:02:17 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-03-30 18:02:17 [main] DEBUG org.hibernate.SQL - 
    drop table if exists plans cascade 
2025-03-30 18:02:17 [main] DEBUG org.hibernate.SQL - 
    drop table if exists user_login_logs cascade 
2025-03-30 18:02:17 [main] DEBUG org.hibernate.SQL - 
    drop table if exists users cascade 
2025-03-30 18:02:17 [main] DEBUG org.hibernate.SQL - 
    create table plans (
        active boolean not null,
        annual_price integer not null,
        monthly_price integer not null,
        monthly_token_limit integer not null,
        created_at timestamp(6) not null,
        id bigint generated by default as identity,
        updated_at timestamp(6) not null,
        name varchar(255) not null,
        type varchar(255) not null check (type in ('FREE','STANDARD','PRO')),
        primary key (id)
    )
2025-03-30 18:02:17 [main] DEBUG org.hibernate.SQL - 
    comment on column plans.active is
        '활성화 여부'
2025-03-30 18:02:17 [main] DEBUG org.hibernate.SQL - 
    comment on column plans.annual_price is
        '연간 가격'
2025-03-30 18:02:17 [main] DEBUG org.hibernate.SQL - 
    comment on column plans.monthly_price is
        '월간 가격'
2025-03-30 18:02:17 [main] DEBUG org.hibernate.SQL - 
    comment on column plans.monthly_token_limit is
        '월간 토큰 사용량 제한'
2025-03-30 18:02:17 [main] DEBUG org.hibernate.SQL - 
    comment on column plans.created_at is
        '생성일시'
2025-03-30 18:02:17 [main] DEBUG org.hibernate.SQL - 
    comment on column plans.id is
        '플랜 고유 식별자'
2025-03-30 18:02:17 [main] DEBUG org.hibernate.SQL - 
    comment on column plans.updated_at is
        '수정일시'
2025-03-30 18:02:17 [main] DEBUG org.hibernate.SQL - 
    comment on column plans.name is
        '플랜 이름'
2025-03-30 18:02:17 [main] DEBUG org.hibernate.SQL - 
    comment on column plans.type is
        '플랜 타입'
2025-03-30 18:02:17 [main] DEBUG org.hibernate.SQL - 
    create table user_login_logs (
        successful boolean not null,
        id bigint generated by default as identity,
        login_at timestamp(6) not null,
        updated_at timestamp(6) not null,
        user_id bigint not null,
        browser_info varchar(255) not null,
        device_type varchar(255) not null,
        fail_reason varchar(255),
        ip_address varchar(255) not null,
        os_info varchar(255) not null,
        user_agent varchar(255) not null,
        primary key (id)
    )
2025-03-30 18:02:17 [main] DEBUG org.hibernate.SQL - 
    comment on column user_login_logs.successful is
        '로그인 성공 여부'
2025-03-30 18:02:17 [main] DEBUG org.hibernate.SQL - 
    comment on column user_login_logs.id is
        '로그인 기록 고유 식별자'
2025-03-30 18:02:17 [main] DEBUG org.hibernate.SQL - 
    comment on column user_login_logs.login_at is
        '로그인 시도 시간'
2025-03-30 18:02:17 [main] DEBUG org.hibernate.SQL - 
    comment on column user_login_logs.updated_at is
        '기록 수정 시간'
2025-03-30 18:02:17 [main] DEBUG org.hibernate.SQL - 
    comment on column user_login_logs.user_id is
        '로그인한 사용자'
2025-03-30 18:02:17 [main] DEBUG org.hibernate.SQL - 
    comment on column user_login_logs.browser_info is
        '브라우저 정보'
2025-03-30 18:02:17 [main] DEBUG org.hibernate.SQL - 
    comment on column user_login_logs.device_type is
        '디바이스 타입 (DESKTOP, MOBILE, TABLET)'
2025-03-30 18:02:17 [main] DEBUG org.hibernate.SQL - 
    comment on column user_login_logs.fail_reason is
        '로그인 실패 사유'
2025-03-30 18:02:17 [main] DEBUG org.hibernate.SQL - 
    comment on column user_login_logs.ip_address is
        '로그인 IP 주소'
2025-03-30 18:02:17 [main] DEBUG org.hibernate.SQL - 
    comment on column user_login_logs.os_info is
        '운영체제 정보'
2025-03-30 18:02:17 [main] DEBUG org.hibernate.SQL - 
    comment on column user_login_logs.user_agent is
        '사용자 에이전트 문자열'
2025-03-30 18:02:17 [main] DEBUG org.hibernate.SQL - 
    create table users (
        active boolean not null,
        is_email_verified boolean not null,
        created_at timestamp(6) not null,
        id bigint generated by default as identity,
        last_login_at timestamp(6),
        plan_id bigint not null,
        updated_at timestamp(6) not null,
        display_name varchar(255) not null,
        email varchar(255) not null unique,
        password varchar(255),
        photo_url varchar(255),
        provider varchar(255) not null check (provider in ('GOOGLE','APPLE')),
        role varchar(255) not null check (role in ('USER','ADMIN')),
        uid varchar(255) not null unique,
        primary key (id)
    )
2025-03-30 18:02:17 [main] DEBUG org.hibernate.SQL - 
    comment on column users.active is
        '계정 활성화 상태'
2025-03-30 18:02:17 [main] DEBUG org.hibernate.SQL - 
    comment on column users.is_email_verified is
        '이메일 인증 여부'
2025-03-30 18:02:17 [main] DEBUG org.hibernate.SQL - 
    comment on column users.created_at is
        '계정 생성 시간'
2025-03-30 18:02:17 [main] DEBUG org.hibernate.SQL - 
    comment on column users.id is
        '사용자 고유 식별자'
2025-03-30 18:02:17 [main] DEBUG org.hibernate.SQL - 
    comment on column users.last_login_at is
        '마지막 로그인 시간'
2025-03-30 18:02:17 [main] DEBUG org.hibernate.SQL - 
    comment on column users.plan_id is
        '사용자의 구독 플랜'
2025-03-30 18:02:17 [main] DEBUG org.hibernate.SQL - 
    comment on column users.updated_at is
        '계정 정보 수정 시간'
2025-03-30 18:02:17 [main] DEBUG org.hibernate.SQL - 
    comment on column users.display_name is
        '사용자 표시 이름'
2025-03-30 18:02:17 [main] DEBUG org.hibernate.SQL - 
    comment on column users.email is
        '사용자 이메일'
2025-03-30 18:02:17 [main] DEBUG org.hibernate.SQL - 
    comment on column users.password is
        '사용자 비밀번호 (소셜 로그인의 경우 임시 비밀번호)'
2025-03-30 18:02:17 [main] DEBUG org.hibernate.SQL - 
    comment on column users.photo_url is
        '프로필 사진 URL'
2025-03-30 18:02:17 [main] DEBUG org.hibernate.SQL - 
    comment on column users.provider is
        '소셜 로그인 제공자 (GOOGLE, APPLE)'
2025-03-30 18:02:17 [main] DEBUG org.hibernate.SQL - 
    comment on column users.role is
        '사용자 역할 (USER, ADMIN)'
2025-03-30 18:02:17 [main] DEBUG org.hibernate.SQL - 
    comment on column users.uid is
        '소셜 로그인 제공자의 사용자 고유 식별자'
2025-03-30 18:02:17 [main] DEBUG org.hibernate.SQL - 
    alter table if exists user_login_logs 
       add constraint FK80fvs708m86elqqexgsihwsk2 
       foreign key (user_id) 
       references users
2025-03-30 18:02:17 [main] DEBUG org.hibernate.SQL - 
    alter table if exists users 
       add constraint FKi4ttvfkp7tl33d90ldkkagrxu 
       foreign key (plan_id) 
       references plans
2025-03-30 18:02:17 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-03-30 18:02:17 [main] DEBUG c.e.p.s.FirebaseAuthenticationFilter - Filter 'firebaseAuthenticationFilter' configured for use
2025-03-30 18:02:17 [main] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - Filter 'requestResponseLoggingFilter' configured for use
2025-03-30 18:02:17 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-03-30 18:02:17 [main] WARN  o.s.b.a.s.s.UserDetailsServiceAutoConfiguration - 

Using generated security password: 2618229c-9cda-49ea-8907-fedeae8c2705

This generated password is for development use only. Your security configuration must be updated before running your application in production.

2025-03-30 18:02:17 [main] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 1 endpoint(s) beneath base path '/actuator'
2025-03-30 18:02:17 [main] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@2762bd70, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@b94c22d, org.springframework.security.web.context.SecurityContextHolderFilter@3a3fc789, org.springframework.security.web.header.HeaderWriterFilter@740ef827, org.springframework.web.filter.CorsFilter@5fb4870b, org.springframework.security.web.authentication.logout.LogoutFilter@214fe287, com.evawova.preview.security.FirebaseAuthenticationFilter@66f88fd3, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@389f4282, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@7f9ebcfe, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@4e8036bb, org.springframework.security.web.session.SessionManagementFilter@470b7fcf, org.springframework.security.web.access.ExceptionTranslationFilter@5cb3c9e6, org.springframework.security.web.access.intercept.AuthorizationFilter@4c24063c]
2025-03-30 18:02:18 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-03-30 18:02:18 [main] INFO  c.e.p.PreviewServiceApplication - Started PreviewServiceApplication in 3.423 seconds (process running for 3.611)
2025-03-30 18:02:18 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        plans p1_0
2025-03-30 18:02:18 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        plans
        (active, annual_price, created_at, monthly_price, monthly_token_limit, name, type, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
2025-03-30 18:02:18 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        plans
        (active, annual_price, created_at, monthly_price, monthly_token_limit, name, type, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
2025-03-30 18:02:18 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        plans
        (active, annual_price, created_at, monthly_price, monthly_token_limit, name, type, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
2025-03-30 18:02:19 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-03-30 18:02:19 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-03-30 18:02:19 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 2 ms
2025-03-30 18:02:19 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.created_at,
        u1_0.display_name,
        u1_0.email,
        u1_0.is_email_verified,
        u1_0.last_login_at,
        u1_0.password,
        u1_0.photo_url,
        u1_0.plan_id,
        u1_0.provider,
        u1_0.role,
        u1_0.uid,
        u1_0.updated_at 
    from
        users u1_0 
    where
        u1_0.uid=?
2025-03-30 18:02:19 [http-nio-8080-exec-1] INFO  c.e.p.c.f.RequestResponseLoggingFilter - [401ed743] 요청: GET /api/v1/users/me (127.0.0.1)
2025-03-30 18:02:19 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [401ed743] 요청 헤더: user-agent: Dart/3.6 (dart:io)
2025-03-30 18:02:19 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [401ed743] 요청 헤더: content-type: application/json
2025-03-30 18:02:19 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [401ed743] 요청 헤더: accept-encoding: gzip
2025-03-30 18:02:19 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [401ed743] 요청 헤더: authorization: Bearer eyJ...
2025-03-30 18:02:19 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [401ed743] 요청 헤더: host: localhost:8080
2025-03-30 18:02:19 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.created_at,
        u1_0.display_name,
        u1_0.email,
        u1_0.is_email_verified,
        u1_0.last_login_at,
        u1_0.password,
        u1_0.photo_url,
        u1_0.plan_id,
        u1_0.provider,
        u1_0.role,
        u1_0.uid,
        u1_0.updated_at 
    from
        users u1_0 
    where
        u1_0.uid=?
2025-03-30 18:02:19 [http-nio-8080-exec-1] ERROR c.e.p.c.e.GlobalExceptionHandler - API 예외 발생: 사용자 정보를 찾을 수 없습니다.
2025-03-30 18:02:19 [http-nio-8080-exec-1] INFO  c.e.p.c.f.RequestResponseLoggingFilter - [401ed743] 응답: 404 (69ms)
2025-03-30 18:02:19 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [401ed743] 응답 헤더: Vary: Origin
2025-03-30 18:02:19 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [401ed743] 응답 헤더: Vary: Access-Control-Request-Method
2025-03-30 18:02:19 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [401ed743] 응답 헤더: Vary: Access-Control-Request-Headers
2025-03-30 18:02:19 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [401ed743] 응답 헤더: Vary: Origin
2025-03-30 18:02:19 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [401ed743] 응답 헤더: Vary: Access-Control-Request-Method
2025-03-30 18:02:19 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [401ed743] 응답 헤더: Vary: Access-Control-Request-Headers
2025-03-30 18:02:19 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [401ed743] 응답 헤더: Vary: Origin
2025-03-30 18:02:19 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [401ed743] 응답 헤더: Vary: Access-Control-Request-Method
2025-03-30 18:02:19 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [401ed743] 응답 헤더: Vary: Access-Control-Request-Headers
2025-03-30 18:02:19 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [401ed743] 응답 헤더: Content-Type: application/json
2025-03-30 18:02:19 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [401ed743] 응답 본문: {"success":false,"status":404,"message":"사용자 정보를 찾을 수 없습니다.","timestamp":"2025-03-30 18:02:19"}
2025-03-30 18:02:33 [http-nio-8080-exec-3] INFO  c.e.p.c.f.RequestResponseLoggingFilter - [81f6be5a] 요청: POST /api/v1/auth/social-login (127.0.0.1)
2025-03-30 18:02:33 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.created_at,
        u1_0.display_name,
        u1_0.email,
        u1_0.is_email_verified,
        u1_0.last_login_at,
        u1_0.password,
        u1_0.photo_url,
        u1_0.plan_id,
        u1_0.provider,
        u1_0.role,
        u1_0.uid,
        u1_0.updated_at 
    from
        users u1_0 
    where
        u1_0.uid=?
2025-03-30 18:02:33 [http-nio-8080-exec-3] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [81f6be5a] 요청 헤더: user-agent: Dart/3.6 (dart:io)
2025-03-30 18:02:33 [http-nio-8080-exec-3] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [81f6be5a] 요청 헤더: content-type: application/json; charset=utf-8
2025-03-30 18:02:33 [http-nio-8080-exec-3] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [81f6be5a] 요청 헤더: accept-encoding: gzip
2025-03-30 18:02:33 [http-nio-8080-exec-3] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [81f6be5a] 요청 헤더: content-length: 294
2025-03-30 18:02:33 [http-nio-8080-exec-3] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [81f6be5a] 요청 헤더: authorization: Bearer eyJ...
2025-03-30 18:02:33 [http-nio-8080-exec-3] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [81f6be5a] 요청 헤더: host: localhost:8080
2025-03-30 18:02:33 [http-nio-8080-exec-3] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [81f6be5a] 요청 본문: {"email":"dltjdgur327@gmail.com","displayName":"이성혁","provider":"GOOGLE","uid":"FckskR46rZMqByM1U9q6XzudUD23","photoUrl":"https://lh3.googleusercontent.com/a/ACg8ocLoTzQiYf2FdnGiPYKW7SrIKqJdbSSV8rrKMv8HO4UAhFhflqlc=s96-c","isEmailVerified":true,"lastLoginAt":"2025-03-30T18:02:33.234883"}
2025-03-30 18:02:33 [http-nio-8080-exec-2] INFO  c.e.p.c.f.RequestResponseLoggingFilter - [12502d2c] 요청: GET /api/v1/users/me (127.0.0.1)
2025-03-30 18:02:33 [http-nio-8080-exec-2] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [12502d2c] 요청 헤더: user-agent: Dart/3.6 (dart:io)
2025-03-30 18:02:33 [http-nio-8080-exec-2] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [12502d2c] 요청 헤더: content-type: application/json
2025-03-30 18:02:33 [http-nio-8080-exec-2] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [12502d2c] 요청 헤더: accept-encoding: gzip
2025-03-30 18:02:33 [http-nio-8080-exec-2] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [12502d2c] 요청 헤더: authorization: Bearer eyJ...
2025-03-30 18:02:33 [http-nio-8080-exec-2] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [12502d2c] 요청 헤더: host: localhost:8080
2025-03-30 18:02:33 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.created_at,
        u1_0.display_name,
        u1_0.email,
        u1_0.is_email_verified,
        u1_0.last_login_at,
        u1_0.password,
        u1_0.photo_url,
        u1_0.plan_id,
        u1_0.provider,
        u1_0.role,
        u1_0.uid,
        u1_0.updated_at 
    from
        users u1_0 
    where
        u1_0.uid=?
2025-03-30 18:02:33 [http-nio-8080-exec-2] ERROR c.e.p.c.e.GlobalExceptionHandler - API 예외 발생: 사용자 정보를 찾을 수 없습니다.
2025-03-30 18:02:33 [http-nio-8080-exec-2] INFO  c.e.p.c.f.RequestResponseLoggingFilter - [12502d2c] 응답: 404 (4ms)
2025-03-30 18:02:33 [http-nio-8080-exec-2] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [12502d2c] 응답 헤더: Vary: Origin
2025-03-30 18:02:33 [http-nio-8080-exec-2] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [12502d2c] 응답 헤더: Vary: Access-Control-Request-Method
2025-03-30 18:02:33 [http-nio-8080-exec-2] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [12502d2c] 응답 헤더: Vary: Access-Control-Request-Headers
2025-03-30 18:02:33 [http-nio-8080-exec-2] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [12502d2c] 응답 헤더: Vary: Origin
2025-03-30 18:02:33 [http-nio-8080-exec-2] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [12502d2c] 응답 헤더: Vary: Access-Control-Request-Method
2025-03-30 18:02:33 [http-nio-8080-exec-2] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [12502d2c] 응답 헤더: Vary: Access-Control-Request-Headers
2025-03-30 18:02:33 [http-nio-8080-exec-2] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [12502d2c] 응답 헤더: Vary: Origin
2025-03-30 18:02:33 [http-nio-8080-exec-2] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [12502d2c] 응답 헤더: Vary: Access-Control-Request-Method
2025-03-30 18:02:33 [http-nio-8080-exec-2] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [12502d2c] 응답 헤더: Vary: Access-Control-Request-Headers
2025-03-30 18:02:33 [http-nio-8080-exec-2] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [12502d2c] 응답 헤더: Content-Type: application/json
2025-03-30 18:02:33 [http-nio-8080-exec-2] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [12502d2c] 응답 본문: {"success":false,"status":404,"message":"사용자 정보를 찾을 수 없습니다.","timestamp":"2025-03-30 18:02:33"}
2025-03-30 18:02:33 [http-nio-8080-exec-3] ERROR c.e.p.c.e.GlobalExceptionHandler - 예상치 못한 예외 발생
org.springframework.http.converter.HttpMessageNotReadableException: Required request body is missing: public org.springframework.http.ResponseEntity<com.evawova.preview.common.response.ApiResponse<java.util.Map<java.lang.String, java.lang.Object>>> com.evawova.preview.domain.user.controller.AuthController.socialLogin(com.evawova.preview.domain.user.dto.SocialLoginRequest,jakarta.servlet.http.HttpServletRequest)
	at org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor.readWithMessageConverters(RequestResponseBodyMethodProcessor.java:162)
	at org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor.resolveArgument(RequestResponseBodyMethodProcessor.java:134)
	at org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:122)
	at org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:228)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:182)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:101)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at com.evawova.preview.common.filter.RequestResponseLoggingFilter.doFilterInternal(RequestResponseLoggingFilter.java:68)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.ObservationFilterChainDecorator$FilterObservation$SimpleFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:479)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:340)
	at org.springframework.security.web.ObservationFilterChainDecorator.lambda$wrapSecured$0(ObservationFilterChainDecorator.java:82)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:128)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:101)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$0(ObservationFilterChainDecorator.java:323)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:224)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-03-30 18:02:33 [http-nio-8080-exec-3] INFO  c.e.p.c.f.RequestResponseLoggingFilter - [81f6be5a] 응답: 500 (50ms)
2025-03-30 18:02:33 [http-nio-8080-exec-3] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [81f6be5a] 응답 헤더: Vary: Origin
2025-03-30 18:02:33 [http-nio-8080-exec-3] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [81f6be5a] 응답 헤더: Vary: Access-Control-Request-Method
2025-03-30 18:02:33 [http-nio-8080-exec-3] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [81f6be5a] 응답 헤더: Vary: Access-Control-Request-Headers
2025-03-30 18:02:33 [http-nio-8080-exec-3] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [81f6be5a] 응답 헤더: Vary: Origin
2025-03-30 18:02:33 [http-nio-8080-exec-3] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [81f6be5a] 응답 헤더: Vary: Access-Control-Request-Method
2025-03-30 18:02:33 [http-nio-8080-exec-3] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [81f6be5a] 응답 헤더: Vary: Access-Control-Request-Headers
2025-03-30 18:02:33 [http-nio-8080-exec-3] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [81f6be5a] 응답 헤더: Vary: Origin
2025-03-30 18:02:33 [http-nio-8080-exec-3] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [81f6be5a] 응답 헤더: Vary: Access-Control-Request-Method
2025-03-30 18:02:33 [http-nio-8080-exec-3] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [81f6be5a] 응답 헤더: Vary: Access-Control-Request-Headers
2025-03-30 18:02:33 [http-nio-8080-exec-3] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [81f6be5a] 응답 헤더: Content-Type: application/json
2025-03-30 18:02:33 [http-nio-8080-exec-3] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [81f6be5a] 응답 본문: {"success":false,"status":500,"message":"서버 내부 오류가 발생했습니다.","timestamp":"2025-03-30 18:02:33"}
2025-03-30 18:05:03 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-03-30 18:05:03 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-03-30 18:05:03 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-03-30 18:05:12 [main] INFO  c.e.p.PreviewServiceApplication - Starting PreviewServiceApplication using Java 21.0.5 with PID 39117 (/Users/admin/study/preview-service/build/classes/java/main started by admin in /Users/admin/study/preview-service)
2025-03-30 18:05:12 [main] DEBUG c.e.p.PreviewServiceApplication - Running with Spring Boot v3.2.3, Spring v6.1.4
2025-03-30 18:05:12 [main] INFO  c.e.p.PreviewServiceApplication - The following 1 profile is active: "local"
2025-03-30 18:05:13 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-03-30 18:05:13 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 26 ms. Found 3 JPA repository interfaces.
2025-03-30 18:05:13 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-03-30 18:05:13 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-03-30 18:05:13 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.19]
2025-03-30 18:05:13 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-03-30 18:05:13 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 937 ms
2025-03-30 18:05:13 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-03-30 18:05:13 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:testdb user=SA
2025-03-30 18:05:13 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-03-30 18:05:13 [main] INFO  o.s.b.a.h.H2ConsoleAutoConfiguration - H2 console available at '/h2-console'. Database available at 'jdbc:h2:mem:testdb'
2025-03-30 18:05:13 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-03-30 18:05:13 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.4.Final
2025-03-30 18:05:13 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-03-30 18:05:14 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-03-30 18:05:14 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: H2Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-03-30 18:05:14 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-03-30 18:05:14 [main] DEBUG org.hibernate.SQL - 
    drop table if exists plans cascade 
2025-03-30 18:05:14 [main] DEBUG org.hibernate.SQL - 
    drop table if exists user_login_logs cascade 
2025-03-30 18:05:14 [main] DEBUG org.hibernate.SQL - 
    drop table if exists users cascade 
2025-03-30 18:05:14 [main] DEBUG org.hibernate.SQL - 
    create table plans (
        active boolean not null,
        annual_price integer not null,
        monthly_price integer not null,
        monthly_token_limit integer not null,
        created_at timestamp(6) not null,
        id bigint generated by default as identity,
        updated_at timestamp(6) not null,
        name varchar(255) not null,
        type varchar(255) not null check (type in ('FREE','STANDARD','PRO')),
        primary key (id)
    )
2025-03-30 18:05:14 [main] DEBUG org.hibernate.SQL - 
    comment on column plans.active is
        '활성화 여부'
2025-03-30 18:05:14 [main] DEBUG org.hibernate.SQL - 
    comment on column plans.annual_price is
        '연간 가격'
2025-03-30 18:05:14 [main] DEBUG org.hibernate.SQL - 
    comment on column plans.monthly_price is
        '월간 가격'
2025-03-30 18:05:14 [main] DEBUG org.hibernate.SQL - 
    comment on column plans.monthly_token_limit is
        '월간 토큰 사용량 제한'
2025-03-30 18:05:14 [main] DEBUG org.hibernate.SQL - 
    comment on column plans.created_at is
        '생성일시'
2025-03-30 18:05:14 [main] DEBUG org.hibernate.SQL - 
    comment on column plans.id is
        '플랜 고유 식별자'
2025-03-30 18:05:14 [main] DEBUG org.hibernate.SQL - 
    comment on column plans.updated_at is
        '수정일시'
2025-03-30 18:05:14 [main] DEBUG org.hibernate.SQL - 
    comment on column plans.name is
        '플랜 이름'
2025-03-30 18:05:14 [main] DEBUG org.hibernate.SQL - 
    comment on column plans.type is
        '플랜 타입'
2025-03-30 18:05:14 [main] DEBUG org.hibernate.SQL - 
    create table user_login_logs (
        successful boolean not null,
        id bigint generated by default as identity,
        login_at timestamp(6) not null,
        updated_at timestamp(6) not null,
        user_id bigint not null,
        browser_info varchar(255) not null,
        device_type varchar(255) not null,
        fail_reason varchar(255),
        ip_address varchar(255) not null,
        os_info varchar(255) not null,
        user_agent varchar(255) not null,
        primary key (id)
    )
2025-03-30 18:05:14 [main] DEBUG org.hibernate.SQL - 
    comment on column user_login_logs.successful is
        '로그인 성공 여부'
2025-03-30 18:05:14 [main] DEBUG org.hibernate.SQL - 
    comment on column user_login_logs.id is
        '로그인 기록 고유 식별자'
2025-03-30 18:05:14 [main] DEBUG org.hibernate.SQL - 
    comment on column user_login_logs.login_at is
        '로그인 시도 시간'
2025-03-30 18:05:14 [main] DEBUG org.hibernate.SQL - 
    comment on column user_login_logs.updated_at is
        '기록 수정 시간'
2025-03-30 18:05:14 [main] DEBUG org.hibernate.SQL - 
    comment on column user_login_logs.user_id is
        '로그인한 사용자'
2025-03-30 18:05:14 [main] DEBUG org.hibernate.SQL - 
    comment on column user_login_logs.browser_info is
        '브라우저 정보'
2025-03-30 18:05:14 [main] DEBUG org.hibernate.SQL - 
    comment on column user_login_logs.device_type is
        '디바이스 타입 (DESKTOP, MOBILE, TABLET)'
2025-03-30 18:05:14 [main] DEBUG org.hibernate.SQL - 
    comment on column user_login_logs.fail_reason is
        '로그인 실패 사유'
2025-03-30 18:05:14 [main] DEBUG org.hibernate.SQL - 
    comment on column user_login_logs.ip_address is
        '로그인 IP 주소'
2025-03-30 18:05:14 [main] DEBUG org.hibernate.SQL - 
    comment on column user_login_logs.os_info is
        '운영체제 정보'
2025-03-30 18:05:14 [main] DEBUG org.hibernate.SQL - 
    comment on column user_login_logs.user_agent is
        '사용자 에이전트 문자열'
2025-03-30 18:05:14 [main] DEBUG org.hibernate.SQL - 
    create table users (
        active boolean not null,
        is_email_verified boolean not null,
        created_at timestamp(6) not null,
        id bigint generated by default as identity,
        last_login_at timestamp(6),
        plan_id bigint not null,
        updated_at timestamp(6) not null,
        display_name varchar(255) not null,
        email varchar(255) not null unique,
        password varchar(255),
        photo_url varchar(255),
        provider varchar(255) not null check (provider in ('GOOGLE','APPLE')),
        role varchar(255) not null check (role in ('USER','ADMIN')),
        uid varchar(255) not null unique,
        primary key (id)
    )
2025-03-30 18:05:14 [main] DEBUG org.hibernate.SQL - 
    comment on column users.active is
        '계정 활성화 상태'
2025-03-30 18:05:14 [main] DEBUG org.hibernate.SQL - 
    comment on column users.is_email_verified is
        '이메일 인증 여부'
2025-03-30 18:05:14 [main] DEBUG org.hibernate.SQL - 
    comment on column users.created_at is
        '계정 생성 시간'
2025-03-30 18:05:14 [main] DEBUG org.hibernate.SQL - 
    comment on column users.id is
        '사용자 고유 식별자'
2025-03-30 18:05:14 [main] DEBUG org.hibernate.SQL - 
    comment on column users.last_login_at is
        '마지막 로그인 시간'
2025-03-30 18:05:14 [main] DEBUG org.hibernate.SQL - 
    comment on column users.plan_id is
        '사용자의 구독 플랜'
2025-03-30 18:05:14 [main] DEBUG org.hibernate.SQL - 
    comment on column users.updated_at is
        '계정 정보 수정 시간'
2025-03-30 18:05:14 [main] DEBUG org.hibernate.SQL - 
    comment on column users.display_name is
        '사용자 표시 이름'
2025-03-30 18:05:14 [main] DEBUG org.hibernate.SQL - 
    comment on column users.email is
        '사용자 이메일'
2025-03-30 18:05:14 [main] DEBUG org.hibernate.SQL - 
    comment on column users.password is
        '사용자 비밀번호 (소셜 로그인의 경우 임시 비밀번호)'
2025-03-30 18:05:14 [main] DEBUG org.hibernate.SQL - 
    comment on column users.photo_url is
        '프로필 사진 URL'
2025-03-30 18:05:14 [main] DEBUG org.hibernate.SQL - 
    comment on column users.provider is
        '소셜 로그인 제공자 (GOOGLE, APPLE)'
2025-03-30 18:05:14 [main] DEBUG org.hibernate.SQL - 
    comment on column users.role is
        '사용자 역할 (USER, ADMIN)'
2025-03-30 18:05:14 [main] DEBUG org.hibernate.SQL - 
    comment on column users.uid is
        '소셜 로그인 제공자의 사용자 고유 식별자'
2025-03-30 18:05:14 [main] DEBUG org.hibernate.SQL - 
    alter table if exists user_login_logs 
       add constraint FK80fvs708m86elqqexgsihwsk2 
       foreign key (user_id) 
       references users
2025-03-30 18:05:14 [main] DEBUG org.hibernate.SQL - 
    alter table if exists users 
       add constraint FKi4ttvfkp7tl33d90ldkkagrxu 
       foreign key (plan_id) 
       references plans
2025-03-30 18:05:14 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-03-30 18:05:14 [main] DEBUG c.e.p.s.FirebaseAuthenticationFilter - Filter 'firebaseAuthenticationFilter' configured for use
2025-03-30 18:05:14 [main] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - Filter 'requestResponseLoggingFilter' configured for use
2025-03-30 18:05:15 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-03-30 18:05:15 [main] WARN  o.s.b.a.s.s.UserDetailsServiceAutoConfiguration - 

Using generated security password: f87b0a63-6a2c-4bd9-9883-a988922111c1

This generated password is for development use only. Your security configuration must be updated before running your application in production.

2025-03-30 18:05:15 [main] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 1 endpoint(s) beneath base path '/actuator'
2025-03-30 18:05:15 [main] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@c3972d0, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@1264dbc9, org.springframework.security.web.context.SecurityContextHolderFilter@3d8c3d0a, org.springframework.security.web.header.HeaderWriterFilter@56957f08, org.springframework.web.filter.CorsFilter@77f2807f, org.springframework.security.web.authentication.logout.LogoutFilter@2008dfa7, com.evawova.preview.security.FirebaseAuthenticationFilter@d140627, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@667ce5fa, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@23182d4d, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@47b6f580, org.springframework.security.web.session.SessionManagementFilter@85446a, org.springframework.security.web.access.ExceptionTranslationFilter@30b91493, org.springframework.security.web.access.intercept.AuthorizationFilter@7da4c956]
2025-03-30 18:05:15 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-03-30 18:05:15 [main] INFO  c.e.p.PreviewServiceApplication - Started PreviewServiceApplication in 3.271 seconds (process running for 3.457)
2025-03-30 18:05:15 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        plans p1_0
2025-03-30 18:05:15 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        plans
        (active, annual_price, created_at, monthly_price, monthly_token_limit, name, type, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
2025-03-30 18:05:15 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        plans
        (active, annual_price, created_at, monthly_price, monthly_token_limit, name, type, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
2025-03-30 18:05:15 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        plans
        (active, annual_price, created_at, monthly_price, monthly_token_limit, name, type, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
2025-03-30 18:05:18 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-03-30 18:05:18 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-03-30 18:05:18 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-03-30 18:05:18 [http-nio-8080-exec-1] INFO  c.e.p.c.f.RequestResponseLoggingFilter - [5d7bee8f] 요청: POST /api/v1/auth/social-login (0:0:0:0:0:0:0:1)
2025-03-30 18:05:18 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [5d7bee8f] 요청 헤더: host: localhost:8080
2025-03-30 18:05:18 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [5d7bee8f] 요청 헤더: user-agent: curl/8.7.1
2025-03-30 18:05:18 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [5d7bee8f] 요청 헤더: accept: */*
2025-03-30 18:05:18 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [5d7bee8f] 요청 헤더: content-type: application/json
2025-03-30 18:05:18 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [5d7bee8f] 요청 헤더: content-length: 294
2025-03-30 18:05:18 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [5d7bee8f] 요청 본문: {"email":"dltjdgur327@gmail.com","displayName":"이성혁","provider":"GOOGLE","uid":"FckskR46rZMqByM1U9q6XzudUD23","photoUrl":"https://lh3.googleusercontent.com/a/ACg8ocLoTzQiYf2FdnGiPYKW7SrIKqJdbSSV8rrKMv8HO4UAhFhflqlc=s96-c","isEmailVerified":true,"lastLoginAt":"2025-03-30T18:01:28.100619"}
2025-03-30 18:05:18 [http-nio-8080-exec-1] ERROR c.e.p.c.e.GlobalExceptionHandler - 예상치 못한 예외 발생
org.springframework.http.converter.HttpMessageNotReadableException: Required request body is missing: public org.springframework.http.ResponseEntity<com.evawova.preview.common.response.ApiResponse<java.util.Map<java.lang.String, java.lang.Object>>> com.evawova.preview.domain.user.controller.AuthController.socialLogin(com.evawova.preview.domain.user.dto.SocialLoginRequest,jakarta.servlet.http.HttpServletRequest)
	at org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor.readWithMessageConverters(RequestResponseBodyMethodProcessor.java:162)
	at org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor.resolveArgument(RequestResponseBodyMethodProcessor.java:134)
	at org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:122)
	at org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:228)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:182)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:101)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at com.evawova.preview.common.filter.RequestResponseLoggingFilter.doFilterInternal(RequestResponseLoggingFilter.java:68)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.ObservationFilterChainDecorator$FilterObservation$SimpleFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:479)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:340)
	at org.springframework.security.web.ObservationFilterChainDecorator.lambda$wrapSecured$0(ObservationFilterChainDecorator.java:82)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:128)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:101)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$0(ObservationFilterChainDecorator.java:323)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:224)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-03-30 18:05:18 [http-nio-8080-exec-1] INFO  c.e.p.c.f.RequestResponseLoggingFilter - [5d7bee8f] 응답: 500 (70ms)
2025-03-30 18:05:18 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [5d7bee8f] 응답 헤더: Vary: Origin
2025-03-30 18:05:18 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [5d7bee8f] 응답 헤더: Vary: Access-Control-Request-Method
2025-03-30 18:05:18 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [5d7bee8f] 응답 헤더: Vary: Access-Control-Request-Headers
2025-03-30 18:05:18 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [5d7bee8f] 응답 헤더: Vary: Origin
2025-03-30 18:05:18 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [5d7bee8f] 응답 헤더: Vary: Access-Control-Request-Method
2025-03-30 18:05:18 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [5d7bee8f] 응답 헤더: Vary: Access-Control-Request-Headers
2025-03-30 18:05:18 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [5d7bee8f] 응답 헤더: Vary: Origin
2025-03-30 18:05:18 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [5d7bee8f] 응답 헤더: Vary: Access-Control-Request-Method
2025-03-30 18:05:18 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [5d7bee8f] 응답 헤더: Vary: Access-Control-Request-Headers
2025-03-30 18:05:18 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [5d7bee8f] 응답 헤더: Content-Type: application/json
2025-03-30 18:05:18 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [5d7bee8f] 응답 본문: {"success":false,"status":500,"message":"서버 내부 오류가 발생했습니다.","timestamp":"2025-03-30 18:05:18"}
2025-03-30 18:06:06 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-03-30 18:06:06 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-03-30 18:06:06 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-03-30 18:06:15 [main] INFO  c.e.p.PreviewServiceApplication - Starting PreviewServiceApplication using Java 21.0.5 with PID 39957 (/Users/admin/study/preview-service/build/classes/java/main started by admin in /Users/admin/study/preview-service)
2025-03-30 18:06:15 [main] DEBUG c.e.p.PreviewServiceApplication - Running with Spring Boot v3.2.3, Spring v6.1.4
2025-03-30 18:06:15 [main] INFO  c.e.p.PreviewServiceApplication - The following 1 profile is active: "local"
2025-03-30 18:06:15 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-03-30 18:06:15 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 25 ms. Found 3 JPA repository interfaces.
2025-03-30 18:06:16 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-03-30 18:06:16 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-03-30 18:06:16 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.19]
2025-03-30 18:06:16 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-03-30 18:06:16 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 906 ms
2025-03-30 18:06:16 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-03-30 18:06:16 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:testdb user=SA
2025-03-30 18:06:16 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-03-30 18:06:16 [main] INFO  o.s.b.a.h.H2ConsoleAutoConfiguration - H2 console available at '/h2-console'. Database available at 'jdbc:h2:mem:testdb'
2025-03-30 18:06:16 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-03-30 18:06:16 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.4.Final
2025-03-30 18:06:16 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-03-30 18:06:16 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-03-30 18:06:16 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: H2Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-03-30 18:06:16 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-03-30 18:06:17 [main] DEBUG org.hibernate.SQL - 
    drop table if exists plans cascade 
2025-03-30 18:06:17 [main] DEBUG org.hibernate.SQL - 
    drop table if exists user_login_logs cascade 
2025-03-30 18:06:17 [main] DEBUG org.hibernate.SQL - 
    drop table if exists users cascade 
2025-03-30 18:06:17 [main] DEBUG org.hibernate.SQL - 
    create table plans (
        active boolean not null,
        annual_price integer not null,
        monthly_price integer not null,
        monthly_token_limit integer not null,
        created_at timestamp(6) not null,
        id bigint generated by default as identity,
        updated_at timestamp(6) not null,
        name varchar(255) not null,
        type varchar(255) not null check (type in ('FREE','STANDARD','PRO')),
        primary key (id)
    )
2025-03-30 18:06:17 [main] DEBUG org.hibernate.SQL - 
    comment on column plans.active is
        '활성화 여부'
2025-03-30 18:06:17 [main] DEBUG org.hibernate.SQL - 
    comment on column plans.annual_price is
        '연간 가격'
2025-03-30 18:06:17 [main] DEBUG org.hibernate.SQL - 
    comment on column plans.monthly_price is
        '월간 가격'
2025-03-30 18:06:17 [main] DEBUG org.hibernate.SQL - 
    comment on column plans.monthly_token_limit is
        '월간 토큰 사용량 제한'
2025-03-30 18:06:17 [main] DEBUG org.hibernate.SQL - 
    comment on column plans.created_at is
        '생성일시'
2025-03-30 18:06:17 [main] DEBUG org.hibernate.SQL - 
    comment on column plans.id is
        '플랜 고유 식별자'
2025-03-30 18:06:17 [main] DEBUG org.hibernate.SQL - 
    comment on column plans.updated_at is
        '수정일시'
2025-03-30 18:06:17 [main] DEBUG org.hibernate.SQL - 
    comment on column plans.name is
        '플랜 이름'
2025-03-30 18:06:17 [main] DEBUG org.hibernate.SQL - 
    comment on column plans.type is
        '플랜 타입'
2025-03-30 18:06:17 [main] DEBUG org.hibernate.SQL - 
    create table user_login_logs (
        successful boolean not null,
        id bigint generated by default as identity,
        login_at timestamp(6) not null,
        updated_at timestamp(6) not null,
        user_id bigint not null,
        browser_info varchar(255) not null,
        device_type varchar(255) not null,
        fail_reason varchar(255),
        ip_address varchar(255) not null,
        os_info varchar(255) not null,
        user_agent varchar(255) not null,
        primary key (id)
    )
2025-03-30 18:06:17 [main] DEBUG org.hibernate.SQL - 
    comment on column user_login_logs.successful is
        '로그인 성공 여부'
2025-03-30 18:06:17 [main] DEBUG org.hibernate.SQL - 
    comment on column user_login_logs.id is
        '로그인 기록 고유 식별자'
2025-03-30 18:06:17 [main] DEBUG org.hibernate.SQL - 
    comment on column user_login_logs.login_at is
        '로그인 시도 시간'
2025-03-30 18:06:17 [main] DEBUG org.hibernate.SQL - 
    comment on column user_login_logs.updated_at is
        '기록 수정 시간'
2025-03-30 18:06:17 [main] DEBUG org.hibernate.SQL - 
    comment on column user_login_logs.user_id is
        '로그인한 사용자'
2025-03-30 18:06:17 [main] DEBUG org.hibernate.SQL - 
    comment on column user_login_logs.browser_info is
        '브라우저 정보'
2025-03-30 18:06:17 [main] DEBUG org.hibernate.SQL - 
    comment on column user_login_logs.device_type is
        '디바이스 타입 (DESKTOP, MOBILE, TABLET)'
2025-03-30 18:06:17 [main] DEBUG org.hibernate.SQL - 
    comment on column user_login_logs.fail_reason is
        '로그인 실패 사유'
2025-03-30 18:06:17 [main] DEBUG org.hibernate.SQL - 
    comment on column user_login_logs.ip_address is
        '로그인 IP 주소'
2025-03-30 18:06:17 [main] DEBUG org.hibernate.SQL - 
    comment on column user_login_logs.os_info is
        '운영체제 정보'
2025-03-30 18:06:17 [main] DEBUG org.hibernate.SQL - 
    comment on column user_login_logs.user_agent is
        '사용자 에이전트 문자열'
2025-03-30 18:06:17 [main] DEBUG org.hibernate.SQL - 
    create table users (
        active boolean not null,
        is_email_verified boolean not null,
        created_at timestamp(6) not null,
        id bigint generated by default as identity,
        last_login_at timestamp(6),
        plan_id bigint not null,
        updated_at timestamp(6) not null,
        display_name varchar(255) not null,
        email varchar(255) not null unique,
        password varchar(255),
        photo_url varchar(255),
        provider varchar(255) not null check (provider in ('GOOGLE','APPLE')),
        role varchar(255) not null check (role in ('USER','ADMIN')),
        uid varchar(255) not null unique,
        primary key (id)
    )
2025-03-30 18:06:17 [main] DEBUG org.hibernate.SQL - 
    comment on column users.active is
        '계정 활성화 상태'
2025-03-30 18:06:17 [main] DEBUG org.hibernate.SQL - 
    comment on column users.is_email_verified is
        '이메일 인증 여부'
2025-03-30 18:06:17 [main] DEBUG org.hibernate.SQL - 
    comment on column users.created_at is
        '계정 생성 시간'
2025-03-30 18:06:17 [main] DEBUG org.hibernate.SQL - 
    comment on column users.id is
        '사용자 고유 식별자'
2025-03-30 18:06:17 [main] DEBUG org.hibernate.SQL - 
    comment on column users.last_login_at is
        '마지막 로그인 시간'
2025-03-30 18:06:17 [main] DEBUG org.hibernate.SQL - 
    comment on column users.plan_id is
        '사용자의 구독 플랜'
2025-03-30 18:06:17 [main] DEBUG org.hibernate.SQL - 
    comment on column users.updated_at is
        '계정 정보 수정 시간'
2025-03-30 18:06:17 [main] DEBUG org.hibernate.SQL - 
    comment on column users.display_name is
        '사용자 표시 이름'
2025-03-30 18:06:17 [main] DEBUG org.hibernate.SQL - 
    comment on column users.email is
        '사용자 이메일'
2025-03-30 18:06:17 [main] DEBUG org.hibernate.SQL - 
    comment on column users.password is
        '사용자 비밀번호 (소셜 로그인의 경우 임시 비밀번호)'
2025-03-30 18:06:17 [main] DEBUG org.hibernate.SQL - 
    comment on column users.photo_url is
        '프로필 사진 URL'
2025-03-30 18:06:17 [main] DEBUG org.hibernate.SQL - 
    comment on column users.provider is
        '소셜 로그인 제공자 (GOOGLE, APPLE)'
2025-03-30 18:06:17 [main] DEBUG org.hibernate.SQL - 
    comment on column users.role is
        '사용자 역할 (USER, ADMIN)'
2025-03-30 18:06:17 [main] DEBUG org.hibernate.SQL - 
    comment on column users.uid is
        '소셜 로그인 제공자의 사용자 고유 식별자'
2025-03-30 18:06:17 [main] DEBUG org.hibernate.SQL - 
    alter table if exists user_login_logs 
       add constraint FK80fvs708m86elqqexgsihwsk2 
       foreign key (user_id) 
       references users
2025-03-30 18:06:17 [main] DEBUG org.hibernate.SQL - 
    alter table if exists users 
       add constraint FKi4ttvfkp7tl33d90ldkkagrxu 
       foreign key (plan_id) 
       references plans
2025-03-30 18:06:17 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-03-30 18:06:17 [main] DEBUG c.e.p.s.FirebaseAuthenticationFilter - Filter 'firebaseAuthenticationFilter' configured for use
2025-03-30 18:06:17 [main] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - Filter 'requestResponseLoggingFilter' configured for use
2025-03-30 18:06:17 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-03-30 18:06:17 [main] WARN  o.s.b.a.s.s.UserDetailsServiceAutoConfiguration - 

Using generated security password: effa62aa-ae26-4e41-b1eb-639b6f3261ef

This generated password is for development use only. Your security configuration must be updated before running your application in production.

2025-03-30 18:06:17 [main] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 1 endpoint(s) beneath base path '/actuator'
2025-03-30 18:06:17 [main] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@5453020f, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@744d0cfb, org.springframework.security.web.context.SecurityContextHolderFilter@75225415, org.springframework.security.web.header.HeaderWriterFilter@2c64e2d0, org.springframework.web.filter.CorsFilter@7c943143, org.springframework.security.web.authentication.logout.LogoutFilter@388a6656, com.evawova.preview.security.FirebaseAuthenticationFilter@59c2bf78, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@4823f3b8, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@5563a63f, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@705e24fb, org.springframework.security.web.session.SessionManagementFilter@693676d, org.springframework.security.web.access.ExceptionTranslationFilter@3adf3670, org.springframework.security.web.access.intercept.AuthorizationFilter@7e7f72]
2025-03-30 18:06:18 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-03-30 18:06:18 [main] INFO  c.e.p.PreviewServiceApplication - Started PreviewServiceApplication in 3.231 seconds (process running for 3.4)
2025-03-30 18:06:18 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        plans p1_0
2025-03-30 18:06:18 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        plans
        (active, annual_price, created_at, monthly_price, monthly_token_limit, name, type, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
2025-03-30 18:06:18 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        plans
        (active, annual_price, created_at, monthly_price, monthly_token_limit, name, type, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
2025-03-30 18:06:18 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        plans
        (active, annual_price, created_at, monthly_price, monthly_token_limit, name, type, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
2025-03-30 18:06:21 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-03-30 18:06:21 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-03-30 18:06:21 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-03-30 18:06:21 [http-nio-8080-exec-1] INFO  c.e.p.c.f.RequestResponseLoggingFilter - [49f2c78b] 요청: POST /api/v1/auth/social-login (0:0:0:0:0:0:0:1)
2025-03-30 18:06:21 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [49f2c78b] 요청 헤더: host: localhost:8080
2025-03-30 18:06:21 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [49f2c78b] 요청 헤더: user-agent: curl/8.7.1
2025-03-30 18:06:21 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [49f2c78b] 요청 헤더: accept: */*
2025-03-30 18:06:21 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [49f2c78b] 요청 헤더: content-type: application/json
2025-03-30 18:06:21 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [49f2c78b] 요청 헤더: content-length: 294
2025-03-30 18:06:21 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.created_at,
        u1_0.display_name,
        u1_0.email,
        u1_0.is_email_verified,
        u1_0.last_login_at,
        u1_0.password,
        u1_0.photo_url,
        u1_0.plan_id,
        u1_0.provider,
        u1_0.role,
        u1_0.uid,
        u1_0.updated_at 
    from
        users u1_0 
    where
        u1_0.uid=?
2025-03-30 18:06:21 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        p1_0.id,
        p1_0.active,
        p1_0.annual_price,
        p1_0.created_at,
        p1_0.monthly_price,
        p1_0.monthly_token_limit,
        p1_0.name,
        p1_0.type,
        p1_0.updated_at 
    from
        plans p1_0 
    where
        p1_0.type=?
2025-03-30 18:06:21 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (active, created_at, display_name, email, is_email_verified, last_login_at, password, photo_url, plan_id, provider, role, uid, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-03-30 18:06:21 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    update
        users 
    set
        active=?,
        display_name=?,
        email=?,
        is_email_verified=?,
        last_login_at=?,
        password=?,
        photo_url=?,
        plan_id=?,
        provider=?,
        role=?,
        uid=?,
        updated_at=? 
    where
        id=?
2025-03-30 18:06:21 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        user_login_logs
        (browser_info, device_type, fail_reason, ip_address, login_at, os_info, successful, updated_at, user_id, user_agent, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-03-30 18:06:21 [http-nio-8080-exec-1] INFO  c.e.p.c.f.RequestResponseLoggingFilter - [49f2c78b] 응답: 200 (141ms)
2025-03-30 18:06:21 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [49f2c78b] 응답 헤더: Vary: Origin
2025-03-30 18:06:21 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [49f2c78b] 응답 헤더: Vary: Access-Control-Request-Method
2025-03-30 18:06:21 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [49f2c78b] 응답 헤더: Vary: Access-Control-Request-Headers
2025-03-30 18:06:21 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [49f2c78b] 응답 헤더: Vary: Origin
2025-03-30 18:06:21 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [49f2c78b] 응답 헤더: Vary: Access-Control-Request-Method
2025-03-30 18:06:21 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [49f2c78b] 응답 헤더: Vary: Access-Control-Request-Headers
2025-03-30 18:06:21 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [49f2c78b] 응답 헤더: Vary: Origin
2025-03-30 18:06:21 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [49f2c78b] 응답 헤더: Vary: Access-Control-Request-Method
2025-03-30 18:06:21 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [49f2c78b] 응답 헤더: Vary: Access-Control-Request-Headers
2025-03-30 18:06:21 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [49f2c78b] 응답 헤더: Content-Type: application/json
2025-03-30 18:06:21 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [49f2c78b] 응답 본문: {"success":true,"status":200,"message":"소셜 로그인이 완료되었습니다.","data":{"loginInfo":{"ipAddress":"0:0:0:0:0:0:0:1","browserInfo":"Other","osInfo":"Other","loginAt":"2025-03-30T18:06:21.930099","deviceType":"Desktop"},"user":{"id":1,"uid":"FckskR46rZMqByM1U9q6XzudUD23","email":"dltjdgur327@gmail.com","displayName":"이성혁","plan":{"id":1,"name":"Free","type":"FREE","monthlyPrice":0,"annualPrice":0,"monthlyTokenLimit":10000,"active":true,"createdAt":"2025-03-30T18:06:18.339364","updatedAt":"2025-03-30T18:06:18.339372","domainEvents":[]},"provider":"GOOGLE","role":"USER","active":true,"photoUrl":"https://lh3.googleusercontent.com/a/ACg8ocLoTzQiYf2FdnGiPYKW7SrIKqJdbSSV8rrKMv8HO4UAhFhflqlc=s96-c","lastLoginAt":"2025-03-30T18:01:28.100619","createdAt":"2025-03-30T18:06:21.909921","updatedAt":"2025-03-30T18:06:21.915916","emailVerified":false}},"timestamp":"2025-03-30 18:06:21"}
2025-03-30 18:06:52 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.created_at,
        u1_0.display_name,
        u1_0.email,
        u1_0.is_email_verified,
        u1_0.last_login_at,
        u1_0.password,
        u1_0.photo_url,
        u1_0.plan_id,
        u1_0.provider,
        u1_0.role,
        u1_0.uid,
        u1_0.updated_at 
    from
        users u1_0 
    where
        u1_0.uid=?
2025-03-30 18:06:52 [http-nio-8080-exec-2] INFO  c.e.p.c.f.RequestResponseLoggingFilter - [538f44ba] 요청: GET /api/v1/users/me (127.0.0.1)
2025-03-30 18:06:52 [http-nio-8080-exec-2] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [538f44ba] 요청 헤더: user-agent: Dart/3.6 (dart:io)
2025-03-30 18:06:52 [http-nio-8080-exec-2] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [538f44ba] 요청 헤더: content-type: application/json
2025-03-30 18:06:52 [http-nio-8080-exec-2] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [538f44ba] 요청 헤더: accept-encoding: gzip
2025-03-30 18:06:52 [http-nio-8080-exec-2] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [538f44ba] 요청 헤더: authorization: Bearer eyJ...
2025-03-30 18:06:52 [http-nio-8080-exec-2] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [538f44ba] 요청 헤더: host: localhost:8080
2025-03-30 18:06:52 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.created_at,
        u1_0.display_name,
        u1_0.email,
        u1_0.is_email_verified,
        u1_0.last_login_at,
        u1_0.password,
        u1_0.photo_url,
        u1_0.plan_id,
        u1_0.provider,
        u1_0.role,
        u1_0.uid,
        u1_0.updated_at 
    from
        users u1_0 
    where
        u1_0.uid=?
2025-03-30 18:06:52 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        p1_0.id,
        p1_0.active,
        p1_0.annual_price,
        p1_0.created_at,
        p1_0.monthly_price,
        p1_0.monthly_token_limit,
        p1_0.name,
        p1_0.type,
        p1_0.updated_at 
    from
        plans p1_0 
    where
        p1_0.id=?
2025-03-30 18:06:52 [http-nio-8080-exec-2] ERROR c.e.p.c.e.GlobalExceptionHandler - 예상치 못한 예외 발생
org.springframework.http.converter.HttpMessageConversionException: Type definition error: [simple type, class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor]
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.writeInternal(AbstractJackson2HttpMessageConverter.java:489)
	at org.springframework.http.converter.AbstractGenericHttpMessageConverter.write(AbstractGenericHttpMessageConverter.java:114)
	at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMethodProcessor.java:297)
	at org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor.handleReturnValue(HttpEntityMethodProcessor.java:245)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:78)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at com.evawova.preview.common.filter.RequestResponseLoggingFilter.doFilterInternal(RequestResponseLoggingFilter.java:83)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.ObservationFilterChainDecorator$FilterObservation$SimpleFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:479)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:340)
	at org.springframework.security.web.ObservationFilterChainDecorator.lambda$wrapSecured$0(ObservationFilterChainDecorator.java:82)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:128)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at com.evawova.preview.security.FirebaseAuthenticationFilter.doFilterInternal(FirebaseAuthenticationFilter.java:52)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$0(ObservationFilterChainDecorator.java:323)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:224)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
Caused by: com.fasterxml.jackson.databind.exc.InvalidDefinitionException: No serializer found for class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) (through reference chain: com.evawova.preview.common.response.ApiResponse["data"]->com.evawova.preview.domain.user.dto.UserDto["plan"]->com.evawova.preview.domain.user.entity.Plan$HibernateProxy$lOto8Wre["hibernateLazyInitializer"])
	at com.fasterxml.jackson.databind.exc.InvalidDefinitionException.from(InvalidDefinitionException.java:77)
	at com.fasterxml.jackson.databind.SerializerProvider.reportBadDefinition(SerializerProvider.java:1308)
	at com.fasterxml.jackson.databind.DatabindContext.reportBadDefinition(DatabindContext.java:414)
	at com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.failForEmpty(UnknownSerializer.java:53)
	at com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.serialize(UnknownSerializer.java:30)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:772)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:178)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:772)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:178)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:772)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:178)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider._serialize(DefaultSerializerProvider.java:479)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(DefaultSerializerProvider.java:318)
	at com.fasterxml.jackson.databind.ObjectWriter$Prefetch.serialize(ObjectWriter.java:1572)
	at com.fasterxml.jackson.databind.ObjectWriter.writeValue(ObjectWriter.java:1061)
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.writeInternal(AbstractJackson2HttpMessageConverter.java:483)
	... 139 common frames omitted
2025-03-30 18:06:52 [http-nio-8080-exec-2] INFO  c.e.p.c.f.RequestResponseLoggingFilter - [538f44ba] 응답: 500 (43ms)
2025-03-30 18:06:52 [http-nio-8080-exec-2] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [538f44ba] 응답 헤더: Vary: Origin
2025-03-30 18:06:52 [http-nio-8080-exec-2] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [538f44ba] 응답 헤더: Vary: Access-Control-Request-Method
2025-03-30 18:06:52 [http-nio-8080-exec-2] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [538f44ba] 응답 헤더: Vary: Access-Control-Request-Headers
2025-03-30 18:06:52 [http-nio-8080-exec-2] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [538f44ba] 응답 헤더: Vary: Origin
2025-03-30 18:06:52 [http-nio-8080-exec-2] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [538f44ba] 응답 헤더: Vary: Access-Control-Request-Method
2025-03-30 18:06:52 [http-nio-8080-exec-2] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [538f44ba] 응답 헤더: Vary: Access-Control-Request-Headers
2025-03-30 18:06:52 [http-nio-8080-exec-2] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [538f44ba] 응답 헤더: Vary: Origin
2025-03-30 18:06:52 [http-nio-8080-exec-2] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [538f44ba] 응답 헤더: Vary: Access-Control-Request-Method
2025-03-30 18:06:52 [http-nio-8080-exec-2] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [538f44ba] 응답 헤더: Vary: Access-Control-Request-Headers
2025-03-30 18:06:52 [http-nio-8080-exec-2] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [538f44ba] 응답 헤더: Content-Type: application/json
2025-03-30 18:06:52 [http-nio-8080-exec-2] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [538f44ba] 응답 본문: {"success":false,"status":500,"message":"서버 내부 오류가 발생했습니다.","timestamp":"2025-03-30 18:06:52"}
2025-03-30 18:07:02 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.created_at,
        u1_0.display_name,
        u1_0.email,
        u1_0.is_email_verified,
        u1_0.last_login_at,
        u1_0.password,
        u1_0.photo_url,
        u1_0.plan_id,
        u1_0.provider,
        u1_0.role,
        u1_0.uid,
        u1_0.updated_at 
    from
        users u1_0 
    where
        u1_0.uid=?
2025-03-30 18:07:02 [http-nio-8080-exec-3] INFO  c.e.p.c.f.RequestResponseLoggingFilter - [540e62b6] 요청: GET /api/v1/users/me (127.0.0.1)
2025-03-30 18:07:02 [http-nio-8080-exec-3] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [540e62b6] 요청 헤더: user-agent: Dart/3.6 (dart:io)
2025-03-30 18:07:02 [http-nio-8080-exec-3] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [540e62b6] 요청 헤더: content-type: application/json
2025-03-30 18:07:02 [http-nio-8080-exec-3] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [540e62b6] 요청 헤더: accept-encoding: gzip
2025-03-30 18:07:02 [http-nio-8080-exec-3] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [540e62b6] 요청 헤더: authorization: Bearer eyJ...
2025-03-30 18:07:02 [http-nio-8080-exec-3] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [540e62b6] 요청 헤더: host: localhost:8080
2025-03-30 18:07:02 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.created_at,
        u1_0.display_name,
        u1_0.email,
        u1_0.is_email_verified,
        u1_0.last_login_at,
        u1_0.password,
        u1_0.photo_url,
        u1_0.plan_id,
        u1_0.provider,
        u1_0.role,
        u1_0.uid,
        u1_0.updated_at 
    from
        users u1_0 
    where
        u1_0.uid=?
2025-03-30 18:07:02 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        p1_0.id,
        p1_0.active,
        p1_0.annual_price,
        p1_0.created_at,
        p1_0.monthly_price,
        p1_0.monthly_token_limit,
        p1_0.name,
        p1_0.type,
        p1_0.updated_at 
    from
        plans p1_0 
    where
        p1_0.id=?
2025-03-30 18:07:02 [http-nio-8080-exec-3] ERROR c.e.p.c.e.GlobalExceptionHandler - 예상치 못한 예외 발생
org.springframework.http.converter.HttpMessageConversionException: Type definition error: [simple type, class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor]
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.writeInternal(AbstractJackson2HttpMessageConverter.java:489)
	at org.springframework.http.converter.AbstractGenericHttpMessageConverter.write(AbstractGenericHttpMessageConverter.java:114)
	at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMethodProcessor.java:297)
	at org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor.handleReturnValue(HttpEntityMethodProcessor.java:245)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:78)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at com.evawova.preview.common.filter.RequestResponseLoggingFilter.doFilterInternal(RequestResponseLoggingFilter.java:83)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.ObservationFilterChainDecorator$FilterObservation$SimpleFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:479)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:340)
	at org.springframework.security.web.ObservationFilterChainDecorator.lambda$wrapSecured$0(ObservationFilterChainDecorator.java:82)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:128)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at com.evawova.preview.security.FirebaseAuthenticationFilter.doFilterInternal(FirebaseAuthenticationFilter.java:52)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$0(ObservationFilterChainDecorator.java:323)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:224)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
Caused by: com.fasterxml.jackson.databind.exc.InvalidDefinitionException: No serializer found for class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) (through reference chain: com.evawova.preview.common.response.ApiResponse["data"]->com.evawova.preview.domain.user.dto.UserDto["plan"]->com.evawova.preview.domain.user.entity.Plan$HibernateProxy$lOto8Wre["hibernateLazyInitializer"])
	at com.fasterxml.jackson.databind.exc.InvalidDefinitionException.from(InvalidDefinitionException.java:77)
	at com.fasterxml.jackson.databind.SerializerProvider.reportBadDefinition(SerializerProvider.java:1308)
	at com.fasterxml.jackson.databind.DatabindContext.reportBadDefinition(DatabindContext.java:414)
	at com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.failForEmpty(UnknownSerializer.java:53)
	at com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.serialize(UnknownSerializer.java:30)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:772)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:178)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:772)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:178)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:772)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:178)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider._serialize(DefaultSerializerProvider.java:479)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(DefaultSerializerProvider.java:318)
	at com.fasterxml.jackson.databind.ObjectWriter$Prefetch.serialize(ObjectWriter.java:1572)
	at com.fasterxml.jackson.databind.ObjectWriter.writeValue(ObjectWriter.java:1061)
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.writeInternal(AbstractJackson2HttpMessageConverter.java:483)
	... 139 common frames omitted
2025-03-30 18:07:02 [http-nio-8080-exec-3] INFO  c.e.p.c.f.RequestResponseLoggingFilter - [540e62b6] 응답: 500 (7ms)
2025-03-30 18:07:02 [http-nio-8080-exec-3] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [540e62b6] 응답 헤더: Vary: Origin
2025-03-30 18:07:02 [http-nio-8080-exec-3] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [540e62b6] 응답 헤더: Vary: Access-Control-Request-Method
2025-03-30 18:07:02 [http-nio-8080-exec-3] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [540e62b6] 응답 헤더: Vary: Access-Control-Request-Headers
2025-03-30 18:07:02 [http-nio-8080-exec-3] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [540e62b6] 응답 헤더: Vary: Origin
2025-03-30 18:07:02 [http-nio-8080-exec-3] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [540e62b6] 응답 헤더: Vary: Access-Control-Request-Method
2025-03-30 18:07:02 [http-nio-8080-exec-3] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [540e62b6] 응답 헤더: Vary: Access-Control-Request-Headers
2025-03-30 18:07:02 [http-nio-8080-exec-3] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [540e62b6] 응답 헤더: Vary: Origin
2025-03-30 18:07:02 [http-nio-8080-exec-3] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [540e62b6] 응답 헤더: Vary: Access-Control-Request-Method
2025-03-30 18:07:02 [http-nio-8080-exec-3] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [540e62b6] 응답 헤더: Vary: Access-Control-Request-Headers
2025-03-30 18:07:02 [http-nio-8080-exec-3] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [540e62b6] 응답 헤더: Content-Type: application/json
2025-03-30 18:07:02 [http-nio-8080-exec-3] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [540e62b6] 응답 본문: {"success":false,"status":500,"message":"서버 내부 오류가 발생했습니다.","timestamp":"2025-03-30 18:07:02"}
2025-03-30 18:07:10 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.created_at,
        u1_0.display_name,
        u1_0.email,
        u1_0.is_email_verified,
        u1_0.last_login_at,
        u1_0.password,
        u1_0.photo_url,
        u1_0.plan_id,
        u1_0.provider,
        u1_0.role,
        u1_0.uid,
        u1_0.updated_at 
    from
        users u1_0 
    where
        u1_0.uid=?
2025-03-30 18:07:10 [http-nio-8080-exec-4] INFO  c.e.p.c.f.RequestResponseLoggingFilter - [dbb20d7e] 요청: GET /api/v1/users/me (127.0.0.1)
2025-03-30 18:07:10 [http-nio-8080-exec-4] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [dbb20d7e] 요청 헤더: user-agent: Dart/3.6 (dart:io)
2025-03-30 18:07:10 [http-nio-8080-exec-4] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [dbb20d7e] 요청 헤더: content-type: application/json
2025-03-30 18:07:10 [http-nio-8080-exec-4] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [dbb20d7e] 요청 헤더: accept-encoding: gzip
2025-03-30 18:07:10 [http-nio-8080-exec-4] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [dbb20d7e] 요청 헤더: authorization: Bearer eyJ...
2025-03-30 18:07:10 [http-nio-8080-exec-4] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [dbb20d7e] 요청 헤더: host: localhost:8080
2025-03-30 18:07:10 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.created_at,
        u1_0.display_name,
        u1_0.email,
        u1_0.is_email_verified,
        u1_0.last_login_at,
        u1_0.password,
        u1_0.photo_url,
        u1_0.plan_id,
        u1_0.provider,
        u1_0.role,
        u1_0.uid,
        u1_0.updated_at 
    from
        users u1_0 
    where
        u1_0.uid=?
2025-03-30 18:07:10 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        p1_0.id,
        p1_0.active,
        p1_0.annual_price,
        p1_0.created_at,
        p1_0.monthly_price,
        p1_0.monthly_token_limit,
        p1_0.name,
        p1_0.type,
        p1_0.updated_at 
    from
        plans p1_0 
    where
        p1_0.id=?
2025-03-30 18:07:10 [http-nio-8080-exec-4] ERROR c.e.p.c.e.GlobalExceptionHandler - 예상치 못한 예외 발생
org.springframework.http.converter.HttpMessageConversionException: Type definition error: [simple type, class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor]
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.writeInternal(AbstractJackson2HttpMessageConverter.java:489)
	at org.springframework.http.converter.AbstractGenericHttpMessageConverter.write(AbstractGenericHttpMessageConverter.java:114)
	at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMethodProcessor.java:297)
	at org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor.handleReturnValue(HttpEntityMethodProcessor.java:245)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:78)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:920)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at com.evawova.preview.common.filter.RequestResponseLoggingFilter.doFilterInternal(RequestResponseLoggingFilter.java:83)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.ObservationFilterChainDecorator$FilterObservation$SimpleFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:479)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:340)
	at org.springframework.security.web.ObservationFilterChainDecorator.lambda$wrapSecured$0(ObservationFilterChainDecorator.java:82)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:128)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at com.evawova.preview.security.FirebaseAuthenticationFilter.doFilterInternal(FirebaseAuthenticationFilter.java:52)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$0(ObservationFilterChainDecorator.java:323)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:224)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
Caused by: com.fasterxml.jackson.databind.exc.InvalidDefinitionException: No serializer found for class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) (through reference chain: com.evawova.preview.common.response.ApiResponse["data"]->com.evawova.preview.domain.user.dto.UserDto["plan"]->com.evawova.preview.domain.user.entity.Plan$HibernateProxy$lOto8Wre["hibernateLazyInitializer"])
	at com.fasterxml.jackson.databind.exc.InvalidDefinitionException.from(InvalidDefinitionException.java:77)
	at com.fasterxml.jackson.databind.SerializerProvider.reportBadDefinition(SerializerProvider.java:1308)
	at com.fasterxml.jackson.databind.DatabindContext.reportBadDefinition(DatabindContext.java:414)
	at com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.failForEmpty(UnknownSerializer.java:53)
	at com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.serialize(UnknownSerializer.java:30)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:772)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:178)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:772)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:178)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:772)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:178)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider._serialize(DefaultSerializerProvider.java:479)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(DefaultSerializerProvider.java:318)
	at com.fasterxml.jackson.databind.ObjectWriter$Prefetch.serialize(ObjectWriter.java:1572)
	at com.fasterxml.jackson.databind.ObjectWriter.writeValue(ObjectWriter.java:1061)
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.writeInternal(AbstractJackson2HttpMessageConverter.java:483)
	... 139 common frames omitted
2025-03-30 18:07:10 [http-nio-8080-exec-4] INFO  c.e.p.c.f.RequestResponseLoggingFilter - [dbb20d7e] 응답: 500 (4ms)
2025-03-30 18:07:10 [http-nio-8080-exec-4] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [dbb20d7e] 응답 헤더: Vary: Origin
2025-03-30 18:07:10 [http-nio-8080-exec-4] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [dbb20d7e] 응답 헤더: Vary: Access-Control-Request-Method
2025-03-30 18:07:10 [http-nio-8080-exec-4] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [dbb20d7e] 응답 헤더: Vary: Access-Control-Request-Headers
2025-03-30 18:07:10 [http-nio-8080-exec-4] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [dbb20d7e] 응답 헤더: Vary: Origin
2025-03-30 18:07:10 [http-nio-8080-exec-4] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [dbb20d7e] 응답 헤더: Vary: Access-Control-Request-Method
2025-03-30 18:07:10 [http-nio-8080-exec-4] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [dbb20d7e] 응답 헤더: Vary: Access-Control-Request-Headers
2025-03-30 18:07:10 [http-nio-8080-exec-4] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [dbb20d7e] 응답 헤더: Vary: Origin
2025-03-30 18:07:10 [http-nio-8080-exec-4] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [dbb20d7e] 응답 헤더: Vary: Access-Control-Request-Method
2025-03-30 18:07:10 [http-nio-8080-exec-4] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [dbb20d7e] 응답 헤더: Vary: Access-Control-Request-Headers
2025-03-30 18:07:10 [http-nio-8080-exec-4] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [dbb20d7e] 응답 헤더: Content-Type: application/json
2025-03-30 18:07:10 [http-nio-8080-exec-4] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [dbb20d7e] 응답 본문: {"success":false,"status":500,"message":"서버 내부 오류가 발생했습니다.","timestamp":"2025-03-30 18:07:10"}
2025-03-30 18:09:09 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-03-30 18:09:09 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-03-30 18:09:09 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-03-30 18:09:25 [main] INFO  c.e.p.PreviewServiceApplication - Starting PreviewServiceApplication using Java 21.0.5 with PID 40699 (/Users/admin/study/preview-service/bin/main started by admin in /Users/admin/study/preview-service)
2025-03-30 18:09:25 [main] DEBUG c.e.p.PreviewServiceApplication - Running with Spring Boot v3.2.3, Spring v6.1.4
2025-03-30 18:09:25 [main] INFO  c.e.p.PreviewServiceApplication - The following 1 profile is active: "local"
2025-03-30 18:09:26 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-03-30 18:09:26 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 54 ms. Found 3 JPA repository interfaces.
2025-03-30 18:09:27 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-03-30 18:09:27 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-03-30 18:09:27 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.19]
2025-03-30 18:09:27 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-03-30 18:09:27 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1446 ms
2025-03-30 18:09:27 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-03-30 18:09:27 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:testdb user=SA
2025-03-30 18:09:27 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-03-30 18:09:27 [main] INFO  o.s.b.a.h.H2ConsoleAutoConfiguration - H2 console available at '/h2-console'. Database available at 'jdbc:h2:mem:testdb'
2025-03-30 18:09:27 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-03-30 18:09:27 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.4.Final
2025-03-30 18:09:27 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-03-30 18:09:27 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-03-30 18:09:27 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: H2Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-03-30 18:09:28 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-03-30 18:09:28 [main] DEBUG org.hibernate.SQL - 
    drop table if exists plans cascade 
2025-03-30 18:09:28 [main] DEBUG org.hibernate.SQL - 
    drop table if exists user_login_logs cascade 
2025-03-30 18:09:28 [main] DEBUG org.hibernate.SQL - 
    drop table if exists users cascade 
2025-03-30 18:09:28 [main] DEBUG org.hibernate.SQL - 
    create table plans (
        active boolean not null,
        annual_price integer not null,
        monthly_price integer not null,
        monthly_token_limit integer not null,
        created_at timestamp(6) not null,
        id bigint generated by default as identity,
        updated_at timestamp(6) not null,
        name varchar(255) not null,
        type varchar(255) not null check (type in ('FREE','STANDARD','PRO')),
        primary key (id)
    )
2025-03-30 18:09:28 [main] DEBUG org.hibernate.SQL - 
    comment on column plans.active is
        '활성화 여부'
2025-03-30 18:09:28 [main] DEBUG org.hibernate.SQL - 
    comment on column plans.annual_price is
        '연간 가격'
2025-03-30 18:09:28 [main] DEBUG org.hibernate.SQL - 
    comment on column plans.monthly_price is
        '월간 가격'
2025-03-30 18:09:28 [main] DEBUG org.hibernate.SQL - 
    comment on column plans.monthly_token_limit is
        '월간 토큰 사용량 제한'
2025-03-30 18:09:28 [main] DEBUG org.hibernate.SQL - 
    comment on column plans.created_at is
        '생성일시'
2025-03-30 18:09:28 [main] DEBUG org.hibernate.SQL - 
    comment on column plans.id is
        '플랜 고유 식별자'
2025-03-30 18:09:28 [main] DEBUG org.hibernate.SQL - 
    comment on column plans.updated_at is
        '수정일시'
2025-03-30 18:09:28 [main] DEBUG org.hibernate.SQL - 
    comment on column plans.name is
        '플랜 이름'
2025-03-30 18:09:28 [main] DEBUG org.hibernate.SQL - 
    comment on column plans.type is
        '플랜 타입'
2025-03-30 18:09:28 [main] DEBUG org.hibernate.SQL - 
    create table user_login_logs (
        successful boolean not null,
        id bigint generated by default as identity,
        login_at timestamp(6) not null,
        updated_at timestamp(6) not null,
        user_id bigint not null,
        browser_info varchar(255) not null,
        device_type varchar(255) not null,
        fail_reason varchar(255),
        ip_address varchar(255) not null,
        os_info varchar(255) not null,
        user_agent varchar(255) not null,
        primary key (id)
    )
2025-03-30 18:09:28 [main] DEBUG org.hibernate.SQL - 
    comment on column user_login_logs.successful is
        '로그인 성공 여부'
2025-03-30 18:09:28 [main] DEBUG org.hibernate.SQL - 
    comment on column user_login_logs.id is
        '로그인 기록 고유 식별자'
2025-03-30 18:09:28 [main] DEBUG org.hibernate.SQL - 
    comment on column user_login_logs.login_at is
        '로그인 시도 시간'
2025-03-30 18:09:28 [main] DEBUG org.hibernate.SQL - 
    comment on column user_login_logs.updated_at is
        '기록 수정 시간'
2025-03-30 18:09:28 [main] DEBUG org.hibernate.SQL - 
    comment on column user_login_logs.user_id is
        '로그인한 사용자'
2025-03-30 18:09:28 [main] DEBUG org.hibernate.SQL - 
    comment on column user_login_logs.browser_info is
        '브라우저 정보'
2025-03-30 18:09:28 [main] DEBUG org.hibernate.SQL - 
    comment on column user_login_logs.device_type is
        '디바이스 타입 (DESKTOP, MOBILE, TABLET)'
2025-03-30 18:09:28 [main] DEBUG org.hibernate.SQL - 
    comment on column user_login_logs.fail_reason is
        '로그인 실패 사유'
2025-03-30 18:09:28 [main] DEBUG org.hibernate.SQL - 
    comment on column user_login_logs.ip_address is
        '로그인 IP 주소'
2025-03-30 18:09:28 [main] DEBUG org.hibernate.SQL - 
    comment on column user_login_logs.os_info is
        '운영체제 정보'
2025-03-30 18:09:28 [main] DEBUG org.hibernate.SQL - 
    comment on column user_login_logs.user_agent is
        '사용자 에이전트 문자열'
2025-03-30 18:09:28 [main] DEBUG org.hibernate.SQL - 
    create table users (
        active boolean not null,
        is_email_verified boolean not null,
        created_at timestamp(6) not null,
        id bigint generated by default as identity,
        last_login_at timestamp(6),
        plan_id bigint not null,
        updated_at timestamp(6) not null,
        display_name varchar(255) not null,
        email varchar(255) not null unique,
        password varchar(255),
        photo_url varchar(255),
        provider varchar(255) not null check (provider in ('GOOGLE','APPLE')),
        role varchar(255) not null check (role in ('USER','ADMIN')),
        uid varchar(255) not null unique,
        primary key (id)
    )
2025-03-30 18:09:28 [main] DEBUG org.hibernate.SQL - 
    comment on column users.active is
        '계정 활성화 상태'
2025-03-30 18:09:28 [main] DEBUG org.hibernate.SQL - 
    comment on column users.is_email_verified is
        '이메일 인증 여부'
2025-03-30 18:09:28 [main] DEBUG org.hibernate.SQL - 
    comment on column users.created_at is
        '계정 생성 시간'
2025-03-30 18:09:28 [main] DEBUG org.hibernate.SQL - 
    comment on column users.id is
        '사용자 고유 식별자'
2025-03-30 18:09:28 [main] DEBUG org.hibernate.SQL - 
    comment on column users.last_login_at is
        '마지막 로그인 시간'
2025-03-30 18:09:28 [main] DEBUG org.hibernate.SQL - 
    comment on column users.plan_id is
        '사용자의 구독 플랜'
2025-03-30 18:09:28 [main] DEBUG org.hibernate.SQL - 
    comment on column users.updated_at is
        '계정 정보 수정 시간'
2025-03-30 18:09:28 [main] DEBUG org.hibernate.SQL - 
    comment on column users.display_name is
        '사용자 표시 이름'
2025-03-30 18:09:28 [main] DEBUG org.hibernate.SQL - 
    comment on column users.email is
        '사용자 이메일'
2025-03-30 18:09:28 [main] DEBUG org.hibernate.SQL - 
    comment on column users.password is
        '사용자 비밀번호 (소셜 로그인의 경우 임시 비밀번호)'
2025-03-30 18:09:28 [main] DEBUG org.hibernate.SQL - 
    comment on column users.photo_url is
        '프로필 사진 URL'
2025-03-30 18:09:28 [main] DEBUG org.hibernate.SQL - 
    comment on column users.provider is
        '소셜 로그인 제공자 (GOOGLE, APPLE)'
2025-03-30 18:09:28 [main] DEBUG org.hibernate.SQL - 
    comment on column users.role is
        '사용자 역할 (USER, ADMIN)'
2025-03-30 18:09:28 [main] DEBUG org.hibernate.SQL - 
    comment on column users.uid is
        '소셜 로그인 제공자의 사용자 고유 식별자'
2025-03-30 18:09:28 [main] DEBUG org.hibernate.SQL - 
    alter table if exists user_login_logs 
       add constraint FK80fvs708m86elqqexgsihwsk2 
       foreign key (user_id) 
       references users
2025-03-30 18:09:28 [main] DEBUG org.hibernate.SQL - 
    alter table if exists users 
       add constraint FKi4ttvfkp7tl33d90ldkkagrxu 
       foreign key (plan_id) 
       references plans
2025-03-30 18:09:28 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-03-30 18:09:28 [main] DEBUG c.e.p.s.FirebaseAuthenticationFilter - Filter 'firebaseAuthenticationFilter' configured for use
2025-03-30 18:09:28 [main] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - Filter 'requestResponseLoggingFilter' configured for use
2025-03-30 18:09:28 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-03-30 18:09:28 [main] WARN  o.s.b.a.s.s.UserDetailsServiceAutoConfiguration - 

Using generated security password: 9c1ae8df-2d04-434b-b1c1-fed3583965cd

This generated password is for development use only. Your security configuration must be updated before running your application in production.

2025-03-30 18:09:29 [main] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 1 endpoint(s) beneath base path '/actuator'
2025-03-30 18:09:29 [main] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@3a6ae0f0, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@7854f2a2, org.springframework.security.web.context.SecurityContextHolderFilter@47b6f580, org.springframework.security.web.header.HeaderWriterFilter@792bf78a, org.springframework.web.filter.CorsFilter@72f86029, org.springframework.security.web.authentication.logout.LogoutFilter@48bafe39, com.evawova.preview.security.FirebaseAuthenticationFilter@203b98cf, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@2728e305, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@2518245b, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@740ef827, org.springframework.security.web.session.SessionManagementFilter@4825aad0, org.springframework.security.web.access.ExceptionTranslationFilter@364c4ba9, org.springframework.security.web.access.intercept.AuthorizationFilter@7d2d7a85]
2025-03-30 18:09:29 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-03-30 18:09:29 [main] INFO  c.e.p.PreviewServiceApplication - Started PreviewServiceApplication in 3.989 seconds (process running for 4.224)
2025-03-30 18:09:29 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        plans p1_0
2025-03-30 18:09:29 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        plans
        (active, annual_price, created_at, monthly_price, monthly_token_limit, name, type, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
2025-03-30 18:09:29 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        plans
        (active, annual_price, created_at, monthly_price, monthly_token_limit, name, type, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
2025-03-30 18:09:29 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        plans
        (active, annual_price, created_at, monthly_price, monthly_token_limit, name, type, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
2025-03-30 18:11:20 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-03-30 18:11:20 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-03-30 18:11:20 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 3 ms
2025-03-30 18:11:20 [http-nio-8080-exec-2] INFO  c.e.p.c.f.RequestResponseLoggingFilter - [26dba750] 요청: POST /api/v1/auth/social-login (127.0.0.1)
2025-03-30 18:11:20 [http-nio-8080-exec-2] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [26dba750] 요청 헤더: user-agent: Dart/3.6 (dart:io)
2025-03-30 18:11:20 [http-nio-8080-exec-2] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [26dba750] 요청 헤더: content-type: application/json; charset=utf-8
2025-03-30 18:11:20 [http-nio-8080-exec-2] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [26dba750] 요청 헤더: accept-encoding: gzip
2025-03-30 18:11:20 [http-nio-8080-exec-2] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [26dba750] 요청 헤더: content-length: 294
2025-03-30 18:11:20 [http-nio-8080-exec-2] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [26dba750] 요청 헤더: authorization: Bearer eyJ...
2025-03-30 18:11:20 [http-nio-8080-exec-2] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [26dba750] 요청 헤더: host: localhost:8080
2025-03-30 18:11:20 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.created_at,
        u1_0.display_name,
        u1_0.email,
        u1_0.is_email_verified,
        u1_0.last_login_at,
        u1_0.password,
        u1_0.photo_url,
        u1_0.plan_id,
        u1_0.provider,
        u1_0.role,
        u1_0.uid,
        u1_0.updated_at 
    from
        users u1_0 
    where
        u1_0.uid=?
2025-03-30 18:11:20 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        p1_0.id,
        p1_0.active,
        p1_0.annual_price,
        p1_0.created_at,
        p1_0.monthly_price,
        p1_0.monthly_token_limit,
        p1_0.name,
        p1_0.type,
        p1_0.updated_at 
    from
        plans p1_0 
    where
        p1_0.type=?
2025-03-30 18:11:20 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (active, created_at, display_name, email, is_email_verified, last_login_at, password, photo_url, plan_id, provider, role, uid, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-03-30 18:11:20 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    update
        users 
    set
        active=?,
        display_name=?,
        email=?,
        is_email_verified=?,
        last_login_at=?,
        password=?,
        photo_url=?,
        plan_id=?,
        provider=?,
        role=?,
        uid=?,
        updated_at=? 
    where
        id=?
2025-03-30 18:11:20 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        user_login_logs
        (browser_info, device_type, fail_reason, ip_address, login_at, os_info, successful, updated_at, user_id, user_agent, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-03-30 18:11:20 [http-nio-8080-exec-2] INFO  c.e.p.c.f.RequestResponseLoggingFilter - [26dba750] 응답: 200 (258ms)
2025-03-30 18:11:20 [http-nio-8080-exec-2] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [26dba750] 응답 헤더: Vary: Origin
2025-03-30 18:11:20 [http-nio-8080-exec-2] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [26dba750] 응답 헤더: Vary: Access-Control-Request-Method
2025-03-30 18:11:20 [http-nio-8080-exec-2] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [26dba750] 응답 헤더: Vary: Access-Control-Request-Headers
2025-03-30 18:11:20 [http-nio-8080-exec-2] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [26dba750] 응답 헤더: Vary: Origin
2025-03-30 18:11:20 [http-nio-8080-exec-2] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [26dba750] 응답 헤더: Vary: Access-Control-Request-Method
2025-03-30 18:11:20 [http-nio-8080-exec-2] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [26dba750] 응답 헤더: Vary: Access-Control-Request-Headers
2025-03-30 18:11:20 [http-nio-8080-exec-2] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [26dba750] 응답 헤더: Vary: Origin
2025-03-30 18:11:20 [http-nio-8080-exec-2] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [26dba750] 응답 헤더: Vary: Access-Control-Request-Method
2025-03-30 18:11:20 [http-nio-8080-exec-2] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [26dba750] 응답 헤더: Vary: Access-Control-Request-Headers
2025-03-30 18:11:20 [http-nio-8080-exec-2] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [26dba750] 응답 헤더: Content-Type: application/json
2025-03-30 18:11:20 [http-nio-8080-exec-2] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [26dba750] 응답 본문: {"success":true,"status":200,"message":"소셜 로그인이 완료되었습니다.","data":{"loginInfo":{"ipAddress":"127.0.0.1","deviceType":"Desktop","loginAt":"2025-03-30T18:11:20.280024","osInfo":"Other","browserInfo":"Other"},"user":{"id":1,"uid":"FckskR46rZMqByM1U9q6XzudUD23","email":"dltjdgur327@gmail.com","displayName":"이성혁","plan":{"id":1,"name":"Free","type":"FREE","monthlyPrice":0,"annualPrice":0,"monthlyTokenLimit":10000,"active":true,"createdAt":"2025-03-30T18:09:29.689236","updatedAt":"2025-03-30T18:09:29.68925","domainEvents":[]},"provider":"GOOGLE","role":"USER","active":true,"photoUrl":"https://lh3.googleusercontent.com/a/ACg8ocLoTzQiYf2FdnGiPYKW7SrIKqJdbSSV8rrKMv8HO4UAhFhflqlc=s96-c","lastLoginAt":"2025-03-30T18:11:19.586457","createdAt":"2025-03-30T18:11:20.243699","updatedAt":"2025-03-30T18:11:20.253433","emailVerified":false}},"timestamp":"2025-03-30 18:11:20"}
2025-03-30 18:11:20 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.created_at,
        u1_0.display_name,
        u1_0.email,
        u1_0.is_email_verified,
        u1_0.last_login_at,
        u1_0.password,
        u1_0.photo_url,
        u1_0.plan_id,
        u1_0.provider,
        u1_0.role,
        u1_0.uid,
        u1_0.updated_at 
    from
        users u1_0 
    where
        u1_0.uid=?
2025-03-30 18:11:20 [http-nio-8080-exec-1] INFO  c.e.p.c.f.RequestResponseLoggingFilter - [3e9877fc] 요청: GET /api/v1/users/me (127.0.0.1)
2025-03-30 18:11:20 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [3e9877fc] 요청 헤더: user-agent: Dart/3.6 (dart:io)
2025-03-30 18:11:20 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [3e9877fc] 요청 헤더: content-type: application/json
2025-03-30 18:11:20 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [3e9877fc] 요청 헤더: accept-encoding: gzip
2025-03-30 18:11:20 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [3e9877fc] 요청 헤더: authorization: Bearer eyJ...
2025-03-30 18:11:20 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [3e9877fc] 요청 헤더: host: localhost:8080
2025-03-30 18:11:20 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.created_at,
        u1_0.display_name,
        u1_0.email,
        u1_0.is_email_verified,
        u1_0.last_login_at,
        u1_0.password,
        u1_0.photo_url,
        u1_0.plan_id,
        u1_0.provider,
        u1_0.role,
        u1_0.uid,
        u1_0.updated_at 
    from
        users u1_0 
    where
        u1_0.uid=?
2025-03-30 18:11:20 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        p1_0.id,
        p1_0.active,
        p1_0.annual_price,
        p1_0.created_at,
        p1_0.monthly_price,
        p1_0.monthly_token_limit,
        p1_0.name,
        p1_0.type,
        p1_0.updated_at 
    from
        plans p1_0 
    where
        p1_0.id=?
2025-03-30 18:11:20 [http-nio-8080-exec-1] INFO  c.e.p.c.f.RequestResponseLoggingFilter - [3e9877fc] 응답: 200 (13ms)
2025-03-30 18:11:20 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [3e9877fc] 응답 헤더: Vary: Origin
2025-03-30 18:11:20 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [3e9877fc] 응답 헤더: Vary: Access-Control-Request-Method
2025-03-30 18:11:20 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [3e9877fc] 응답 헤더: Vary: Access-Control-Request-Headers
2025-03-30 18:11:20 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [3e9877fc] 응답 헤더: Vary: Origin
2025-03-30 18:11:20 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [3e9877fc] 응답 헤더: Vary: Access-Control-Request-Method
2025-03-30 18:11:20 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [3e9877fc] 응답 헤더: Vary: Access-Control-Request-Headers
2025-03-30 18:11:20 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [3e9877fc] 응답 헤더: Vary: Origin
2025-03-30 18:11:20 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [3e9877fc] 응답 헤더: Vary: Access-Control-Request-Method
2025-03-30 18:11:20 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [3e9877fc] 응답 헤더: Vary: Access-Control-Request-Headers
2025-03-30 18:11:20 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [3e9877fc] 응답 헤더: Content-Type: application/json
2025-03-30 18:11:20 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [3e9877fc] 응답 본문: {"success":true,"status":200,"message":"내 정보를 성공적으로 조회했습니다.","data":{"id":1,"uid":"FckskR46rZMqByM1U9q6XzudUD23","email":"dltjdgur327@gmail.com","displayName":"이성혁","plan":{"id":1,"name":"Free","type":"FREE","monthlyPrice":0,"annualPrice":0,"monthlyTokenLimit":10000,"active":true,"createdAt":"2025-03-30T18:09:29.689236","updatedAt":"2025-03-30T18:09:29.68925","domainEvents":[],"hibernateLazyInitializer":{}},"provider":"GOOGLE","role":"USER","active":true,"photoUrl":"https://lh3.googleusercontent.com/a/ACg8ocLoTzQiYf2FdnGiPYKW7SrIKqJdbSSV8rrKMv8HO4UAhFhflqlc=s96-c","lastLoginAt":"2025-03-30T18:11:19.586457","createdAt":"2025-03-30T18:11:20.243699","updatedAt":"2025-03-30T18:11:20.253433","emailVerified":false},"timestamp":"2025-03-30 18:11:20"}
2025-03-30 18:11:20 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.created_at,
        u1_0.display_name,
        u1_0.email,
        u1_0.is_email_verified,
        u1_0.last_login_at,
        u1_0.password,
        u1_0.photo_url,
        u1_0.plan_id,
        u1_0.provider,
        u1_0.role,
        u1_0.uid,
        u1_0.updated_at 
    from
        users u1_0 
    where
        u1_0.uid=?
2025-03-30 18:11:20 [http-nio-8080-exec-5] INFO  c.e.p.c.f.RequestResponseLoggingFilter - [229e3bcd] 요청: GET /api/v1/users/me (127.0.0.1)
2025-03-30 18:11:20 [http-nio-8080-exec-5] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [229e3bcd] 요청 헤더: user-agent: Dart/3.6 (dart:io)
2025-03-30 18:11:20 [http-nio-8080-exec-5] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [229e3bcd] 요청 헤더: content-type: application/json
2025-03-30 18:11:20 [http-nio-8080-exec-5] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [229e3bcd] 요청 헤더: accept-encoding: gzip
2025-03-30 18:11:20 [http-nio-8080-exec-5] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [229e3bcd] 요청 헤더: authorization: Bearer eyJ...
2025-03-30 18:11:20 [http-nio-8080-exec-5] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [229e3bcd] 요청 헤더: host: localhost:8080
2025-03-30 18:11:20 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.created_at,
        u1_0.display_name,
        u1_0.email,
        u1_0.is_email_verified,
        u1_0.last_login_at,
        u1_0.password,
        u1_0.photo_url,
        u1_0.plan_id,
        u1_0.provider,
        u1_0.role,
        u1_0.uid,
        u1_0.updated_at 
    from
        users u1_0 
    where
        u1_0.uid=?
2025-03-30 18:11:20 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        p1_0.id,
        p1_0.active,
        p1_0.annual_price,
        p1_0.created_at,
        p1_0.monthly_price,
        p1_0.monthly_token_limit,
        p1_0.name,
        p1_0.type,
        p1_0.updated_at 
    from
        plans p1_0 
    where
        p1_0.id=?
2025-03-30 18:11:20 [http-nio-8080-exec-5] INFO  c.e.p.c.f.RequestResponseLoggingFilter - [229e3bcd] 응답: 200 (5ms)
2025-03-30 18:11:20 [http-nio-8080-exec-5] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [229e3bcd] 응답 헤더: Vary: Origin
2025-03-30 18:11:20 [http-nio-8080-exec-5] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [229e3bcd] 응답 헤더: Vary: Access-Control-Request-Method
2025-03-30 18:11:20 [http-nio-8080-exec-5] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [229e3bcd] 응답 헤더: Vary: Access-Control-Request-Headers
2025-03-30 18:11:20 [http-nio-8080-exec-5] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [229e3bcd] 응답 헤더: Vary: Origin
2025-03-30 18:11:20 [http-nio-8080-exec-5] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [229e3bcd] 응답 헤더: Vary: Access-Control-Request-Method
2025-03-30 18:11:20 [http-nio-8080-exec-5] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [229e3bcd] 응답 헤더: Vary: Access-Control-Request-Headers
2025-03-30 18:11:20 [http-nio-8080-exec-5] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [229e3bcd] 응답 헤더: Vary: Origin
2025-03-30 18:11:20 [http-nio-8080-exec-5] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [229e3bcd] 응답 헤더: Vary: Access-Control-Request-Method
2025-03-30 18:11:20 [http-nio-8080-exec-5] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [229e3bcd] 응답 헤더: Vary: Access-Control-Request-Headers
2025-03-30 18:11:20 [http-nio-8080-exec-5] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [229e3bcd] 응답 헤더: Content-Type: application/json
2025-03-30 18:11:20 [http-nio-8080-exec-5] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [229e3bcd] 응답 본문: {"success":true,"status":200,"message":"내 정보를 성공적으로 조회했습니다.","data":{"id":1,"uid":"FckskR46rZMqByM1U9q6XzudUD23","email":"dltjdgur327@gmail.com","displayName":"이성혁","plan":{"id":1,"name":"Free","type":"FREE","monthlyPrice":0,"annualPrice":0,"monthlyTokenLimit":10000,"active":true,"createdAt":"2025-03-30T18:09:29.689236","updatedAt":"2025-03-30T18:09:29.68925","domainEvents":[],"hibernateLazyInitializer":{}},"provider":"GOOGLE","role":"USER","active":true,"photoUrl":"https://lh3.googleusercontent.com/a/ACg8ocLoTzQiYf2FdnGiPYKW7SrIKqJdbSSV8rrKMv8HO4UAhFhflqlc=s96-c","lastLoginAt":"2025-03-30T18:11:19.586457","createdAt":"2025-03-30T18:11:20.243699","updatedAt":"2025-03-30T18:11:20.253433","emailVerified":false},"timestamp":"2025-03-30 18:11:20"}
2025-03-30 18:16:48 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.created_at,
        u1_0.display_name,
        u1_0.email,
        u1_0.is_email_verified,
        u1_0.last_login_at,
        u1_0.password,
        u1_0.photo_url,
        u1_0.plan_id,
        u1_0.provider,
        u1_0.role,
        u1_0.uid,
        u1_0.updated_at 
    from
        users u1_0 
    where
        u1_0.uid=?
2025-03-30 18:16:48 [http-nio-8080-exec-7] INFO  c.e.p.c.f.RequestResponseLoggingFilter - [b5df03c1] 요청: GET /api/v1/users/me (127.0.0.1)
2025-03-30 18:16:48 [http-nio-8080-exec-7] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [b5df03c1] 요청 헤더: user-agent: Dart/3.6 (dart:io)
2025-03-30 18:16:48 [http-nio-8080-exec-7] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [b5df03c1] 요청 헤더: content-type: application/json
2025-03-30 18:16:48 [http-nio-8080-exec-7] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [b5df03c1] 요청 헤더: accept-encoding: gzip
2025-03-30 18:16:48 [http-nio-8080-exec-7] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [b5df03c1] 요청 헤더: authorization: Bearer eyJ...
2025-03-30 18:16:48 [http-nio-8080-exec-7] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [b5df03c1] 요청 헤더: host: localhost:8080
2025-03-30 18:16:48 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.created_at,
        u1_0.display_name,
        u1_0.email,
        u1_0.is_email_verified,
        u1_0.last_login_at,
        u1_0.password,
        u1_0.photo_url,
        u1_0.plan_id,
        u1_0.provider,
        u1_0.role,
        u1_0.uid,
        u1_0.updated_at 
    from
        users u1_0 
    where
        u1_0.uid=?
2025-03-30 18:16:48 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        p1_0.id,
        p1_0.active,
        p1_0.annual_price,
        p1_0.created_at,
        p1_0.monthly_price,
        p1_0.monthly_token_limit,
        p1_0.name,
        p1_0.type,
        p1_0.updated_at 
    from
        plans p1_0 
    where
        p1_0.id=?
2025-03-30 18:16:48 [http-nio-8080-exec-7] INFO  c.e.p.c.f.RequestResponseLoggingFilter - [b5df03c1] 응답: 200 (25ms)
2025-03-30 18:16:48 [http-nio-8080-exec-7] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [b5df03c1] 응답 헤더: Vary: Origin
2025-03-30 18:16:48 [http-nio-8080-exec-7] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [b5df03c1] 응답 헤더: Vary: Access-Control-Request-Method
2025-03-30 18:16:48 [http-nio-8080-exec-7] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [b5df03c1] 응답 헤더: Vary: Access-Control-Request-Headers
2025-03-30 18:16:48 [http-nio-8080-exec-7] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [b5df03c1] 응답 헤더: Vary: Origin
2025-03-30 18:16:48 [http-nio-8080-exec-7] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [b5df03c1] 응답 헤더: Vary: Access-Control-Request-Method
2025-03-30 18:16:48 [http-nio-8080-exec-7] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [b5df03c1] 응답 헤더: Vary: Access-Control-Request-Headers
2025-03-30 18:16:48 [http-nio-8080-exec-7] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [b5df03c1] 응답 헤더: Vary: Origin
2025-03-30 18:16:48 [http-nio-8080-exec-7] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [b5df03c1] 응답 헤더: Vary: Access-Control-Request-Method
2025-03-30 18:16:48 [http-nio-8080-exec-7] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [b5df03c1] 응답 헤더: Vary: Access-Control-Request-Headers
2025-03-30 18:16:48 [http-nio-8080-exec-7] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [b5df03c1] 응답 헤더: Content-Type: application/json
2025-03-30 18:16:48 [http-nio-8080-exec-7] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [b5df03c1] 응답 본문: {"success":true,"status":200,"message":"내 정보를 성공적으로 조회했습니다.","data":{"id":1,"uid":"FckskR46rZMqByM1U9q6XzudUD23","email":"dltjdgur327@gmail.com","displayName":"이성혁","plan":{"id":1,"name":"Free","type":"FREE","monthlyPrice":0,"annualPrice":0,"monthlyTokenLimit":10000,"active":true,"createdAt":"2025-03-30T18:09:29.689236","updatedAt":"2025-03-30T18:09:29.68925","domainEvents":[],"hibernateLazyInitializer":{}},"provider":"GOOGLE","role":"USER","active":true,"photoUrl":"https://lh3.googleusercontent.com/a/ACg8ocLoTzQiYf2FdnGiPYKW7SrIKqJdbSSV8rrKMv8HO4UAhFhflqlc=s96-c","lastLoginAt":"2025-03-30T18:11:19.586457","createdAt":"2025-03-30T18:11:20.243699","updatedAt":"2025-03-30T18:11:20.253433","emailVerified":false},"timestamp":"2025-03-30 18:16:48"}
2025-03-30 18:18:26 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-03-30 18:18:26 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-03-30 18:18:26 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-03-30 18:18:27 [main] INFO  c.e.p.PreviewServiceApplication - Starting PreviewServiceApplication using Java 21.0.5 with PID 42372 (/Users/admin/study/preview-service/bin/main started by admin in /Users/admin/study/preview-service)
2025-03-30 18:18:27 [main] DEBUG c.e.p.PreviewServiceApplication - Running with Spring Boot v3.2.3, Spring v6.1.4
2025-03-30 18:18:27 [main] INFO  c.e.p.PreviewServiceApplication - The following 1 profile is active: "local"
2025-03-30 18:18:28 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-03-30 18:18:28 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 33 ms. Found 3 JPA repository interfaces.
2025-03-30 18:18:28 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-03-30 18:18:28 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-03-30 18:18:28 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.19]
2025-03-30 18:18:28 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-03-30 18:18:28 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1141 ms
2025-03-30 18:18:28 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-03-30 18:18:29 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:testdb user=SA
2025-03-30 18:18:29 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-03-30 18:18:29 [main] INFO  o.s.b.a.h.H2ConsoleAutoConfiguration - H2 console available at '/h2-console'. Database available at 'jdbc:h2:mem:testdb'
2025-03-30 18:18:29 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-03-30 18:18:29 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.4.Final
2025-03-30 18:18:29 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-03-30 18:18:29 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-03-30 18:18:29 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: H2Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-03-30 18:18:29 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-03-30 18:18:29 [main] DEBUG org.hibernate.SQL - 
    drop table if exists plans cascade 
2025-03-30 18:18:29 [main] DEBUG org.hibernate.SQL - 
    drop table if exists user_login_logs cascade 
2025-03-30 18:18:29 [main] DEBUG org.hibernate.SQL - 
    drop table if exists users cascade 
2025-03-30 18:18:29 [main] DEBUG org.hibernate.SQL - 
    create table plans (
        active boolean not null,
        annual_price integer not null,
        monthly_price integer not null,
        monthly_token_limit integer not null,
        created_at timestamp(6) not null,
        id bigint generated by default as identity,
        updated_at timestamp(6) not null,
        name varchar(255) not null,
        type varchar(255) not null check (type in ('FREE','STANDARD','PRO')),
        primary key (id)
    )
2025-03-30 18:18:30 [main] DEBUG org.hibernate.SQL - 
    comment on column plans.active is
        '활성화 여부'
2025-03-30 18:18:30 [main] DEBUG org.hibernate.SQL - 
    comment on column plans.annual_price is
        '연간 가격'
2025-03-30 18:18:30 [main] DEBUG org.hibernate.SQL - 
    comment on column plans.monthly_price is
        '월간 가격'
2025-03-30 18:18:30 [main] DEBUG org.hibernate.SQL - 
    comment on column plans.monthly_token_limit is
        '월간 토큰 사용량 제한'
2025-03-30 18:18:30 [main] DEBUG org.hibernate.SQL - 
    comment on column plans.created_at is
        '생성일시'
2025-03-30 18:18:30 [main] DEBUG org.hibernate.SQL - 
    comment on column plans.id is
        '플랜 고유 식별자'
2025-03-30 18:18:30 [main] DEBUG org.hibernate.SQL - 
    comment on column plans.updated_at is
        '수정일시'
2025-03-30 18:18:30 [main] DEBUG org.hibernate.SQL - 
    comment on column plans.name is
        '플랜 이름'
2025-03-30 18:18:30 [main] DEBUG org.hibernate.SQL - 
    comment on column plans.type is
        '플랜 타입'
2025-03-30 18:18:30 [main] DEBUG org.hibernate.SQL - 
    create table user_login_logs (
        successful boolean not null,
        id bigint generated by default as identity,
        login_at timestamp(6) not null,
        updated_at timestamp(6) not null,
        user_id bigint not null,
        browser_info varchar(255) not null,
        device_type varchar(255) not null,
        fail_reason varchar(255),
        ip_address varchar(255) not null,
        os_info varchar(255) not null,
        user_agent varchar(255) not null,
        primary key (id)
    )
2025-03-30 18:18:30 [main] DEBUG org.hibernate.SQL - 
    comment on column user_login_logs.successful is
        '로그인 성공 여부'
2025-03-30 18:18:30 [main] DEBUG org.hibernate.SQL - 
    comment on column user_login_logs.id is
        '로그인 기록 고유 식별자'
2025-03-30 18:18:30 [main] DEBUG org.hibernate.SQL - 
    comment on column user_login_logs.login_at is
        '로그인 시도 시간'
2025-03-30 18:18:30 [main] DEBUG org.hibernate.SQL - 
    comment on column user_login_logs.updated_at is
        '기록 수정 시간'
2025-03-30 18:18:30 [main] DEBUG org.hibernate.SQL - 
    comment on column user_login_logs.user_id is
        '로그인한 사용자'
2025-03-30 18:18:30 [main] DEBUG org.hibernate.SQL - 
    comment on column user_login_logs.browser_info is
        '브라우저 정보'
2025-03-30 18:18:30 [main] DEBUG org.hibernate.SQL - 
    comment on column user_login_logs.device_type is
        '디바이스 타입 (DESKTOP, MOBILE, TABLET)'
2025-03-30 18:18:30 [main] DEBUG org.hibernate.SQL - 
    comment on column user_login_logs.fail_reason is
        '로그인 실패 사유'
2025-03-30 18:18:30 [main] DEBUG org.hibernate.SQL - 
    comment on column user_login_logs.ip_address is
        '로그인 IP 주소'
2025-03-30 18:18:30 [main] DEBUG org.hibernate.SQL - 
    comment on column user_login_logs.os_info is
        '운영체제 정보'
2025-03-30 18:18:30 [main] DEBUG org.hibernate.SQL - 
    comment on column user_login_logs.user_agent is
        '사용자 에이전트 문자열'
2025-03-30 18:18:30 [main] DEBUG org.hibernate.SQL - 
    create table users (
        active boolean not null,
        is_email_verified boolean not null,
        created_at timestamp(6) not null,
        id bigint generated by default as identity,
        last_login_at timestamp(6),
        plan_id bigint not null,
        updated_at timestamp(6) not null,
        display_name varchar(255) not null,
        email varchar(255) not null unique,
        password varchar(255),
        photo_url varchar(255),
        provider varchar(255) not null check (provider in ('GOOGLE','APPLE')),
        role varchar(255) not null check (role in ('USER','ADMIN')),
        uid varchar(255) not null unique,
        primary key (id)
    )
2025-03-30 18:18:30 [main] DEBUG org.hibernate.SQL - 
    comment on column users.active is
        '계정 활성화 상태'
2025-03-30 18:18:30 [main] DEBUG org.hibernate.SQL - 
    comment on column users.is_email_verified is
        '이메일 인증 여부'
2025-03-30 18:18:30 [main] DEBUG org.hibernate.SQL - 
    comment on column users.created_at is
        '계정 생성 시간'
2025-03-30 18:18:30 [main] DEBUG org.hibernate.SQL - 
    comment on column users.id is
        '사용자 고유 식별자'
2025-03-30 18:18:30 [main] DEBUG org.hibernate.SQL - 
    comment on column users.last_login_at is
        '마지막 로그인 시간'
2025-03-30 18:18:30 [main] DEBUG org.hibernate.SQL - 
    comment on column users.plan_id is
        '사용자의 구독 플랜'
2025-03-30 18:18:30 [main] DEBUG org.hibernate.SQL - 
    comment on column users.updated_at is
        '계정 정보 수정 시간'
2025-03-30 18:18:30 [main] DEBUG org.hibernate.SQL - 
    comment on column users.display_name is
        '사용자 표시 이름'
2025-03-30 18:18:30 [main] DEBUG org.hibernate.SQL - 
    comment on column users.email is
        '사용자 이메일'
2025-03-30 18:18:30 [main] DEBUG org.hibernate.SQL - 
    comment on column users.password is
        '사용자 비밀번호 (소셜 로그인의 경우 임시 비밀번호)'
2025-03-30 18:18:30 [main] DEBUG org.hibernate.SQL - 
    comment on column users.photo_url is
        '프로필 사진 URL'
2025-03-30 18:18:30 [main] DEBUG org.hibernate.SQL - 
    comment on column users.provider is
        '소셜 로그인 제공자 (GOOGLE, APPLE)'
2025-03-30 18:18:30 [main] DEBUG org.hibernate.SQL - 
    comment on column users.role is
        '사용자 역할 (USER, ADMIN)'
2025-03-30 18:18:30 [main] DEBUG org.hibernate.SQL - 
    comment on column users.uid is
        '소셜 로그인 제공자의 사용자 고유 식별자'
2025-03-30 18:18:30 [main] DEBUG org.hibernate.SQL - 
    alter table if exists user_login_logs 
       add constraint FK80fvs708m86elqqexgsihwsk2 
       foreign key (user_id) 
       references users
2025-03-30 18:18:30 [main] DEBUG org.hibernate.SQL - 
    alter table if exists users 
       add constraint FKi4ttvfkp7tl33d90ldkkagrxu 
       foreign key (plan_id) 
       references plans
2025-03-30 18:18:30 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-03-30 18:18:30 [main] DEBUG c.e.p.s.FirebaseAuthenticationFilter - Filter 'firebaseAuthenticationFilter' configured for use
2025-03-30 18:18:30 [main] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - Filter 'requestResponseLoggingFilter' configured for use
2025-03-30 18:18:30 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-03-30 18:18:30 [main] WARN  o.s.b.a.s.s.UserDetailsServiceAutoConfiguration - 

Using generated security password: c0acbd32-195d-426d-addc-a1a89358afb7

This generated password is for development use only. Your security configuration must be updated before running your application in production.

2025-03-30 18:18:30 [main] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 1 endpoint(s) beneath base path '/actuator'
2025-03-30 18:18:30 [main] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@391cc6cf, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@e9e25b5, org.springframework.security.web.context.SecurityContextHolderFilter@744d0cfb, org.springframework.security.web.header.HeaderWriterFilter@6f1b0ead, org.springframework.web.filter.CorsFilter@404cc16a, org.springframework.security.web.authentication.logout.LogoutFilter@423325e0, com.evawova.preview.security.FirebaseAuthenticationFilter@1fae388c, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@20e7ea20, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@4825aad0, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@8588a62, org.springframework.security.web.session.SessionManagementFilter@7e7f72, org.springframework.security.web.access.ExceptionTranslationFilter@46199519, org.springframework.security.web.access.intercept.AuthorizationFilter@16dc12cf]
2025-03-30 18:18:30 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-03-30 18:18:30 [main] INFO  c.e.p.PreviewServiceApplication - Started PreviewServiceApplication in 3.508 seconds (process running for 3.693)
2025-03-30 18:18:31 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        plans p1_0
2025-03-30 18:18:31 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        plans
        (active, annual_price, created_at, monthly_price, monthly_token_limit, name, type, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
2025-03-30 18:18:31 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        plans
        (active, annual_price, created_at, monthly_price, monthly_token_limit, name, type, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
2025-03-30 18:18:31 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        plans
        (active, annual_price, created_at, monthly_price, monthly_token_limit, name, type, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
2025-03-30 18:18:34 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-03-30 18:18:34 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-03-30 18:18:34 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-03-30 18:18:34 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.created_at,
        u1_0.display_name,
        u1_0.email,
        u1_0.is_email_verified,
        u1_0.last_login_at,
        u1_0.password,
        u1_0.photo_url,
        u1_0.plan_id,
        u1_0.provider,
        u1_0.role,
        u1_0.uid,
        u1_0.updated_at 
    from
        users u1_0 
    where
        u1_0.uid=?
2025-03-30 18:18:34 [http-nio-8080-exec-1] INFO  c.e.p.c.f.RequestResponseLoggingFilter - [d7fd8dfe] 요청: GET /api/v1/users/me (127.0.0.1)
2025-03-30 18:18:34 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [d7fd8dfe] 요청 헤더: user-agent: Dart/3.6 (dart:io)
2025-03-30 18:18:34 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [d7fd8dfe] 요청 헤더: content-type: application/json
2025-03-30 18:18:34 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [d7fd8dfe] 요청 헤더: accept-encoding: gzip
2025-03-30 18:18:34 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [d7fd8dfe] 요청 헤더: authorization: Bearer eyJ...
2025-03-30 18:18:34 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [d7fd8dfe] 요청 헤더: host: localhost:8080
2025-03-30 18:18:34 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.created_at,
        u1_0.display_name,
        u1_0.email,
        u1_0.is_email_verified,
        u1_0.last_login_at,
        u1_0.password,
        u1_0.photo_url,
        u1_0.plan_id,
        u1_0.provider,
        u1_0.role,
        u1_0.uid,
        u1_0.updated_at 
    from
        users u1_0 
    where
        u1_0.uid=?
2025-03-30 18:18:34 [http-nio-8080-exec-1] ERROR c.e.p.c.e.GlobalExceptionHandler - API 예외 발생: 사용자 정보를 찾을 수 없습니다.
2025-03-30 18:18:34 [http-nio-8080-exec-1] INFO  c.e.p.c.f.RequestResponseLoggingFilter - [d7fd8dfe] 응답: 404 (94ms)
2025-03-30 18:18:34 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [d7fd8dfe] 응답 헤더: Vary: Origin
2025-03-30 18:18:34 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [d7fd8dfe] 응답 헤더: Vary: Access-Control-Request-Method
2025-03-30 18:18:34 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [d7fd8dfe] 응답 헤더: Vary: Access-Control-Request-Headers
2025-03-30 18:18:34 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [d7fd8dfe] 응답 헤더: Vary: Origin
2025-03-30 18:18:34 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [d7fd8dfe] 응답 헤더: Vary: Access-Control-Request-Method
2025-03-30 18:18:34 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [d7fd8dfe] 응답 헤더: Vary: Access-Control-Request-Headers
2025-03-30 18:18:34 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [d7fd8dfe] 응답 헤더: Vary: Origin
2025-03-30 18:18:34 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [d7fd8dfe] 응답 헤더: Vary: Access-Control-Request-Method
2025-03-30 18:18:34 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [d7fd8dfe] 응답 헤더: Vary: Access-Control-Request-Headers
2025-03-30 18:18:34 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [d7fd8dfe] 응답 헤더: Content-Type: application/json
2025-03-30 18:18:34 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [d7fd8dfe] 응답 본문: {"success":false,"status":404,"message":"사용자 정보를 찾을 수 없습니다.","timestamp":"2025-03-30 18:18:34"}
2025-03-30 18:19:01 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.created_at,
        u1_0.display_name,
        u1_0.email,
        u1_0.is_email_verified,
        u1_0.last_login_at,
        u1_0.password,
        u1_0.photo_url,
        u1_0.plan_id,
        u1_0.provider,
        u1_0.role,
        u1_0.uid,
        u1_0.updated_at 
    from
        users u1_0 
    where
        u1_0.uid=?
2025-03-30 18:19:01 [http-nio-8080-exec-3] INFO  c.e.p.c.f.RequestResponseLoggingFilter - [1d411b5a] 요청: GET /api/v1/users/me (127.0.0.1)
2025-03-30 18:19:01 [http-nio-8080-exec-3] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [1d411b5a] 요청 헤더: user-agent: Dart/3.6 (dart:io)
2025-03-30 18:19:01 [http-nio-8080-exec-3] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [1d411b5a] 요청 헤더: content-type: application/json
2025-03-30 18:19:01 [http-nio-8080-exec-3] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [1d411b5a] 요청 헤더: accept-encoding: gzip
2025-03-30 18:19:01 [http-nio-8080-exec-3] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [1d411b5a] 요청 헤더: authorization: Bearer eyJ...
2025-03-30 18:19:01 [http-nio-8080-exec-3] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [1d411b5a] 요청 헤더: host: localhost:8080
2025-03-30 18:19:01 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.created_at,
        u1_0.display_name,
        u1_0.email,
        u1_0.is_email_verified,
        u1_0.last_login_at,
        u1_0.password,
        u1_0.photo_url,
        u1_0.plan_id,
        u1_0.provider,
        u1_0.role,
        u1_0.uid,
        u1_0.updated_at 
    from
        users u1_0 
    where
        u1_0.uid=?
2025-03-30 18:19:01 [http-nio-8080-exec-3] ERROR c.e.p.c.e.GlobalExceptionHandler - API 예외 발생: 사용자 정보를 찾을 수 없습니다.
2025-03-30 18:19:01 [http-nio-8080-exec-3] INFO  c.e.p.c.f.RequestResponseLoggingFilter - [1d411b5a] 응답: 404 (3ms)
2025-03-30 18:19:01 [http-nio-8080-exec-3] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [1d411b5a] 응답 헤더: Vary: Origin
2025-03-30 18:19:01 [http-nio-8080-exec-3] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [1d411b5a] 응답 헤더: Vary: Access-Control-Request-Method
2025-03-30 18:19:01 [http-nio-8080-exec-3] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [1d411b5a] 응답 헤더: Vary: Access-Control-Request-Headers
2025-03-30 18:19:01 [http-nio-8080-exec-3] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [1d411b5a] 응답 헤더: Vary: Origin
2025-03-30 18:19:01 [http-nio-8080-exec-3] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [1d411b5a] 응답 헤더: Vary: Access-Control-Request-Method
2025-03-30 18:19:01 [http-nio-8080-exec-3] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [1d411b5a] 응답 헤더: Vary: Access-Control-Request-Headers
2025-03-30 18:19:01 [http-nio-8080-exec-3] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [1d411b5a] 응답 헤더: Vary: Origin
2025-03-30 18:19:01 [http-nio-8080-exec-3] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [1d411b5a] 응답 헤더: Vary: Access-Control-Request-Method
2025-03-30 18:19:01 [http-nio-8080-exec-3] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [1d411b5a] 응답 헤더: Vary: Access-Control-Request-Headers
2025-03-30 18:19:01 [http-nio-8080-exec-3] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [1d411b5a] 응답 헤더: Content-Type: application/json
2025-03-30 18:19:01 [http-nio-8080-exec-3] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [1d411b5a] 응답 본문: {"success":false,"status":404,"message":"사용자 정보를 찾을 수 없습니다.","timestamp":"2025-03-30 18:19:01"}
2025-03-30 18:19:01 [http-nio-8080-exec-5] INFO  c.e.p.c.f.RequestResponseLoggingFilter - [dc7d4518] 요청: POST /api/v1/auth/social-login (127.0.0.1)
2025-03-30 18:19:01 [http-nio-8080-exec-5] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [dc7d4518] 요청 헤더: user-agent: Dart/3.6 (dart:io)
2025-03-30 18:19:01 [http-nio-8080-exec-5] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [dc7d4518] 요청 헤더: content-type: application/json; charset=utf-8
2025-03-30 18:19:01 [http-nio-8080-exec-5] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [dc7d4518] 요청 헤더: accept-encoding: gzip
2025-03-30 18:19:01 [http-nio-8080-exec-5] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [dc7d4518] 요청 헤더: content-length: 294
2025-03-30 18:19:01 [http-nio-8080-exec-5] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [dc7d4518] 요청 헤더: authorization: Bearer eyJ...
2025-03-30 18:19:01 [http-nio-8080-exec-5] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [dc7d4518] 요청 헤더: host: localhost:8080
2025-03-30 18:19:01 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.created_at,
        u1_0.display_name,
        u1_0.email,
        u1_0.is_email_verified,
        u1_0.last_login_at,
        u1_0.password,
        u1_0.photo_url,
        u1_0.plan_id,
        u1_0.provider,
        u1_0.role,
        u1_0.uid,
        u1_0.updated_at 
    from
        users u1_0 
    where
        u1_0.uid=?
2025-03-30 18:19:01 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        p1_0.id,
        p1_0.active,
        p1_0.annual_price,
        p1_0.created_at,
        p1_0.monthly_price,
        p1_0.monthly_token_limit,
        p1_0.name,
        p1_0.type,
        p1_0.updated_at 
    from
        plans p1_0 
    where
        p1_0.type=?
2025-03-30 18:19:01 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (active, created_at, display_name, email, is_email_verified, last_login_at, password, photo_url, plan_id, provider, role, uid, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-03-30 18:19:01 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    update
        users 
    set
        active=?,
        display_name=?,
        email=?,
        is_email_verified=?,
        last_login_at=?,
        password=?,
        photo_url=?,
        plan_id=?,
        provider=?,
        role=?,
        uid=?,
        updated_at=? 
    where
        id=?
2025-03-30 18:19:01 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    insert 
    into
        user_login_logs
        (browser_info, device_type, fail_reason, ip_address, login_at, os_info, successful, updated_at, user_id, user_agent, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, default)
2025-03-30 18:19:02 [http-nio-8080-exec-5] INFO  c.e.p.c.f.RequestResponseLoggingFilter - [dc7d4518] 응답: 200 (97ms)
2025-03-30 18:19:02 [http-nio-8080-exec-5] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [dc7d4518] 응답 헤더: Vary: Origin
2025-03-30 18:19:02 [http-nio-8080-exec-5] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [dc7d4518] 응답 헤더: Vary: Access-Control-Request-Method
2025-03-30 18:19:02 [http-nio-8080-exec-5] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [dc7d4518] 응답 헤더: Vary: Access-Control-Request-Headers
2025-03-30 18:19:02 [http-nio-8080-exec-5] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [dc7d4518] 응답 헤더: Vary: Origin
2025-03-30 18:19:02 [http-nio-8080-exec-5] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [dc7d4518] 응답 헤더: Vary: Access-Control-Request-Method
2025-03-30 18:19:02 [http-nio-8080-exec-5] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [dc7d4518] 응답 헤더: Vary: Access-Control-Request-Headers
2025-03-30 18:19:02 [http-nio-8080-exec-5] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [dc7d4518] 응답 헤더: Vary: Origin
2025-03-30 18:19:02 [http-nio-8080-exec-5] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [dc7d4518] 응답 헤더: Vary: Access-Control-Request-Method
2025-03-30 18:19:02 [http-nio-8080-exec-5] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [dc7d4518] 응답 헤더: Vary: Access-Control-Request-Headers
2025-03-30 18:19:02 [http-nio-8080-exec-5] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [dc7d4518] 응답 헤더: Content-Type: application/json
2025-03-30 18:19:02 [http-nio-8080-exec-5] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [dc7d4518] 응답 본문: {"success":true,"status":200,"message":"소셜 로그인이 완료되었습니다.","data":{"loginInfo":{"ipAddress":"127.0.0.1","browserInfo":"Other","osInfo":"Other","loginAt":"2025-03-30T18:19:01.991218","deviceType":"Desktop"},"user":{"id":1,"uid":"FckskR46rZMqByM1U9q6XzudUD23","email":"dltjdgur327@gmail.com","displayName":"이성혁","plan":{"id":1,"name":"Free","type":"FREE","monthlyPrice":0,"annualPrice":0,"monthlyTokenLimit":10000,"active":true,"createdAt":"2025-03-30T18:18:31.173805","updatedAt":"2025-03-30T18:18:31.173815"},"provider":"GOOGLE","role":"USER","active":true,"photoUrl":"https://lh3.googleusercontent.com/a/ACg8ocLoTzQiYf2FdnGiPYKW7SrIKqJdbSSV8rrKMv8HO4UAhFhflqlc=s96-c","isEmailVerified":false,"lastLoginAt":"2025-03-30T18:19:01.457444","createdAt":"2025-03-30T18:19:01.964959","updatedAt":"2025-03-30T18:19:01.97301"}},"timestamp":"2025-03-30 18:19:01"}
2025-03-30 18:19:02 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.created_at,
        u1_0.display_name,
        u1_0.email,
        u1_0.is_email_verified,
        u1_0.last_login_at,
        u1_0.password,
        u1_0.photo_url,
        u1_0.plan_id,
        u1_0.provider,
        u1_0.role,
        u1_0.uid,
        u1_0.updated_at 
    from
        users u1_0 
    where
        u1_0.uid=?
2025-03-30 18:19:02 [http-nio-8080-exec-7] INFO  c.e.p.c.f.RequestResponseLoggingFilter - [be2e538a] 요청: GET /api/v1/users/me (127.0.0.1)
2025-03-30 18:19:02 [http-nio-8080-exec-7] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [be2e538a] 요청 헤더: user-agent: Dart/3.6 (dart:io)
2025-03-30 18:19:02 [http-nio-8080-exec-7] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [be2e538a] 요청 헤더: content-type: application/json
2025-03-30 18:19:02 [http-nio-8080-exec-7] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [be2e538a] 요청 헤더: accept-encoding: gzip
2025-03-30 18:19:02 [http-nio-8080-exec-7] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [be2e538a] 요청 헤더: authorization: Bearer eyJ...
2025-03-30 18:19:02 [http-nio-8080-exec-7] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [be2e538a] 요청 헤더: host: localhost:8080
2025-03-30 18:19:02 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.created_at,
        u1_0.display_name,
        u1_0.email,
        u1_0.is_email_verified,
        u1_0.last_login_at,
        u1_0.password,
        u1_0.photo_url,
        u1_0.plan_id,
        u1_0.provider,
        u1_0.role,
        u1_0.uid,
        u1_0.updated_at 
    from
        users u1_0 
    where
        u1_0.uid=?
2025-03-30 18:19:02 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        p1_0.id,
        p1_0.active,
        p1_0.annual_price,
        p1_0.created_at,
        p1_0.monthly_price,
        p1_0.monthly_token_limit,
        p1_0.name,
        p1_0.type,
        p1_0.updated_at 
    from
        plans p1_0 
    where
        p1_0.id=?
2025-03-30 18:19:02 [http-nio-8080-exec-7] INFO  c.e.p.c.f.RequestResponseLoggingFilter - [be2e538a] 응답: 200 (8ms)
2025-03-30 18:19:02 [http-nio-8080-exec-7] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [be2e538a] 응답 헤더: Vary: Origin
2025-03-30 18:19:02 [http-nio-8080-exec-7] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [be2e538a] 응답 헤더: Vary: Access-Control-Request-Method
2025-03-30 18:19:02 [http-nio-8080-exec-7] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [be2e538a] 응답 헤더: Vary: Access-Control-Request-Headers
2025-03-30 18:19:02 [http-nio-8080-exec-7] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [be2e538a] 응답 헤더: Vary: Origin
2025-03-30 18:19:02 [http-nio-8080-exec-7] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [be2e538a] 응답 헤더: Vary: Access-Control-Request-Method
2025-03-30 18:19:02 [http-nio-8080-exec-7] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [be2e538a] 응답 헤더: Vary: Access-Control-Request-Headers
2025-03-30 18:19:02 [http-nio-8080-exec-7] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [be2e538a] 응답 헤더: Vary: Origin
2025-03-30 18:19:02 [http-nio-8080-exec-7] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [be2e538a] 응답 헤더: Vary: Access-Control-Request-Method
2025-03-30 18:19:02 [http-nio-8080-exec-7] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [be2e538a] 응답 헤더: Vary: Access-Control-Request-Headers
2025-03-30 18:19:02 [http-nio-8080-exec-7] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [be2e538a] 응답 헤더: Content-Type: application/json
2025-03-30 18:19:02 [http-nio-8080-exec-7] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [be2e538a] 응답 본문: {"success":true,"status":200,"message":"내 정보를 성공적으로 조회했습니다.","data":{"id":1,"uid":"FckskR46rZMqByM1U9q6XzudUD23","email":"dltjdgur327@gmail.com","displayName":"이성혁","plan":{"id":1,"name":"Free","type":"FREE","monthlyPrice":0,"annualPrice":0,"monthlyTokenLimit":10000,"active":true,"createdAt":"2025-03-30T18:18:31.173805","updatedAt":"2025-03-30T18:18:31.173815"},"provider":"GOOGLE","role":"USER","active":true,"photoUrl":"https://lh3.googleusercontent.com/a/ACg8ocLoTzQiYf2FdnGiPYKW7SrIKqJdbSSV8rrKMv8HO4UAhFhflqlc=s96-c","isEmailVerified":false,"lastLoginAt":"2025-03-30T18:19:01.457444","createdAt":"2025-03-30T18:19:01.964959","updatedAt":"2025-03-30T18:19:01.97301"},"timestamp":"2025-03-30 18:19:02"}
2025-03-30 18:49:34 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.created_at,
        u1_0.display_name,
        u1_0.email,
        u1_0.is_email_verified,
        u1_0.last_login_at,
        u1_0.password,
        u1_0.photo_url,
        u1_0.plan_id,
        u1_0.provider,
        u1_0.role,
        u1_0.uid,
        u1_0.updated_at 
    from
        users u1_0 
    where
        u1_0.uid=?
2025-03-30 18:49:34 [http-nio-8080-exec-9] INFO  c.e.p.c.f.RequestResponseLoggingFilter - [1c4f710d] 요청: GET /api/v1/users/me (127.0.0.1)
2025-03-30 18:49:34 [http-nio-8080-exec-9] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [1c4f710d] 요청 헤더: user-agent: Dart/3.6 (dart:io)
2025-03-30 18:49:34 [http-nio-8080-exec-9] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [1c4f710d] 요청 헤더: content-type: application/json
2025-03-30 18:49:34 [http-nio-8080-exec-9] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [1c4f710d] 요청 헤더: accept-encoding: gzip
2025-03-30 18:49:34 [http-nio-8080-exec-9] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [1c4f710d] 요청 헤더: authorization: Bearer eyJ...
2025-03-30 18:49:34 [http-nio-8080-exec-9] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [1c4f710d] 요청 헤더: host: localhost:8080
2025-03-30 18:49:34 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.created_at,
        u1_0.display_name,
        u1_0.email,
        u1_0.is_email_verified,
        u1_0.last_login_at,
        u1_0.password,
        u1_0.photo_url,
        u1_0.plan_id,
        u1_0.provider,
        u1_0.role,
        u1_0.uid,
        u1_0.updated_at 
    from
        users u1_0 
    where
        u1_0.uid=?
2025-03-30 18:49:34 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        p1_0.id,
        p1_0.active,
        p1_0.annual_price,
        p1_0.created_at,
        p1_0.monthly_price,
        p1_0.monthly_token_limit,
        p1_0.name,
        p1_0.type,
        p1_0.updated_at 
    from
        plans p1_0 
    where
        p1_0.id=?
2025-03-30 18:49:34 [http-nio-8080-exec-9] INFO  c.e.p.c.f.RequestResponseLoggingFilter - [1c4f710d] 응답: 200 (16ms)
2025-03-30 18:49:34 [http-nio-8080-exec-9] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [1c4f710d] 응답 헤더: Vary: Origin
2025-03-30 18:49:34 [http-nio-8080-exec-9] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [1c4f710d] 응답 헤더: Vary: Access-Control-Request-Method
2025-03-30 18:49:34 [http-nio-8080-exec-9] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [1c4f710d] 응답 헤더: Vary: Access-Control-Request-Headers
2025-03-30 18:49:34 [http-nio-8080-exec-9] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [1c4f710d] 응답 헤더: Vary: Origin
2025-03-30 18:49:34 [http-nio-8080-exec-9] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [1c4f710d] 응답 헤더: Vary: Access-Control-Request-Method
2025-03-30 18:49:34 [http-nio-8080-exec-9] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [1c4f710d] 응답 헤더: Vary: Access-Control-Request-Headers
2025-03-30 18:49:34 [http-nio-8080-exec-9] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [1c4f710d] 응답 헤더: Vary: Origin
2025-03-30 18:49:34 [http-nio-8080-exec-9] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [1c4f710d] 응답 헤더: Vary: Access-Control-Request-Method
2025-03-30 18:49:34 [http-nio-8080-exec-9] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [1c4f710d] 응답 헤더: Vary: Access-Control-Request-Headers
2025-03-30 18:49:34 [http-nio-8080-exec-9] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [1c4f710d] 응답 헤더: Content-Type: application/json
2025-03-30 18:49:34 [http-nio-8080-exec-9] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [1c4f710d] 응답 본문: {"success":true,"status":200,"message":"내 정보를 성공적으로 조회했습니다.","data":{"id":1,"uid":"FckskR46rZMqByM1U9q6XzudUD23","email":"dltjdgur327@gmail.com","displayName":"이성혁","plan":{"id":1,"name":"Free","type":"FREE","monthlyPrice":0,"annualPrice":0,"monthlyTokenLimit":10000,"active":true,"createdAt":"2025-03-30T18:18:31.173805","updatedAt":"2025-03-30T18:18:31.173815"},"provider":"GOOGLE","role":"USER","active":true,"photoUrl":"https://lh3.googleusercontent.com/a/ACg8ocLoTzQiYf2FdnGiPYKW7SrIKqJdbSSV8rrKMv8HO4UAhFhflqlc=s96-c","isEmailVerified":false,"lastLoginAt":"2025-03-30T18:19:01.457444","createdAt":"2025-03-30T18:19:01.964959","updatedAt":"2025-03-30T18:19:01.97301"},"timestamp":"2025-03-30 18:49:34"}
2025-03-30 18:52:35 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.created_at,
        u1_0.display_name,
        u1_0.email,
        u1_0.is_email_verified,
        u1_0.last_login_at,
        u1_0.password,
        u1_0.photo_url,
        u1_0.plan_id,
        u1_0.provider,
        u1_0.role,
        u1_0.uid,
        u1_0.updated_at 
    from
        users u1_0 
    where
        u1_0.uid=?
2025-03-30 18:52:35 [http-nio-8080-exec-1] INFO  c.e.p.c.f.RequestResponseLoggingFilter - [3cc1f623] 요청: GET /api/v1/users/me (127.0.0.1)
2025-03-30 18:52:35 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [3cc1f623] 요청 헤더: user-agent: Dart/3.6 (dart:io)
2025-03-30 18:52:35 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [3cc1f623] 요청 헤더: content-type: application/json
2025-03-30 18:52:35 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [3cc1f623] 요청 헤더: accept-encoding: gzip
2025-03-30 18:52:35 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [3cc1f623] 요청 헤더: authorization: Bearer eyJ...
2025-03-30 18:52:35 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [3cc1f623] 요청 헤더: host: localhost:8080
2025-03-30 18:52:36 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.created_at,
        u1_0.display_name,
        u1_0.email,
        u1_0.is_email_verified,
        u1_0.last_login_at,
        u1_0.password,
        u1_0.photo_url,
        u1_0.plan_id,
        u1_0.provider,
        u1_0.role,
        u1_0.uid,
        u1_0.updated_at 
    from
        users u1_0 
    where
        u1_0.uid=?
2025-03-30 18:52:36 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        p1_0.id,
        p1_0.active,
        p1_0.annual_price,
        p1_0.created_at,
        p1_0.monthly_price,
        p1_0.monthly_token_limit,
        p1_0.name,
        p1_0.type,
        p1_0.updated_at 
    from
        plans p1_0 
    where
        p1_0.id=?
2025-03-30 18:52:36 [http-nio-8080-exec-1] INFO  c.e.p.c.f.RequestResponseLoggingFilter - [3cc1f623] 응답: 200 (20ms)
2025-03-30 18:52:36 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [3cc1f623] 응답 헤더: Vary: Origin
2025-03-30 18:52:36 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [3cc1f623] 응답 헤더: Vary: Access-Control-Request-Method
2025-03-30 18:52:36 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [3cc1f623] 응답 헤더: Vary: Access-Control-Request-Headers
2025-03-30 18:52:36 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [3cc1f623] 응답 헤더: Vary: Origin
2025-03-30 18:52:36 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [3cc1f623] 응답 헤더: Vary: Access-Control-Request-Method
2025-03-30 18:52:36 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [3cc1f623] 응답 헤더: Vary: Access-Control-Request-Headers
2025-03-30 18:52:36 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [3cc1f623] 응답 헤더: Vary: Origin
2025-03-30 18:52:36 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [3cc1f623] 응답 헤더: Vary: Access-Control-Request-Method
2025-03-30 18:52:36 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [3cc1f623] 응답 헤더: Vary: Access-Control-Request-Headers
2025-03-30 18:52:36 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [3cc1f623] 응답 헤더: Content-Type: application/json
2025-03-30 18:52:36 [http-nio-8080-exec-1] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [3cc1f623] 응답 본문: {"success":true,"status":200,"message":"내 정보를 성공적으로 조회했습니다.","data":{"id":1,"uid":"FckskR46rZMqByM1U9q6XzudUD23","email":"dltjdgur327@gmail.com","displayName":"이성혁","plan":{"id":1,"name":"Free","type":"FREE","monthlyPrice":0,"annualPrice":0,"monthlyTokenLimit":10000,"active":true,"createdAt":"2025-03-30T18:18:31.173805","updatedAt":"2025-03-30T18:18:31.173815"},"provider":"GOOGLE","role":"USER","active":true,"photoUrl":"https://lh3.googleusercontent.com/a/ACg8ocLoTzQiYf2FdnGiPYKW7SrIKqJdbSSV8rrKMv8HO4UAhFhflqlc=s96-c","isEmailVerified":false,"lastLoginAt":"2025-03-30T18:19:01.457444","createdAt":"2025-03-30T18:19:01.964959","updatedAt":"2025-03-30T18:19:01.97301"},"timestamp":"2025-03-30 18:52:36"}
2025-03-30 18:53:33 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.created_at,
        u1_0.display_name,
        u1_0.email,
        u1_0.is_email_verified,
        u1_0.last_login_at,
        u1_0.password,
        u1_0.photo_url,
        u1_0.plan_id,
        u1_0.provider,
        u1_0.role,
        u1_0.uid,
        u1_0.updated_at 
    from
        users u1_0 
    where
        u1_0.uid=?
2025-03-30 18:53:33 [http-nio-8080-exec-3] INFO  c.e.p.c.f.RequestResponseLoggingFilter - [cd00a6b8] 요청: GET /api/v1/users/me (127.0.0.1)
2025-03-30 18:53:33 [http-nio-8080-exec-3] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [cd00a6b8] 요청 헤더: user-agent: Dart/3.6 (dart:io)
2025-03-30 18:53:33 [http-nio-8080-exec-3] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [cd00a6b8] 요청 헤더: content-type: application/json
2025-03-30 18:53:33 [http-nio-8080-exec-3] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [cd00a6b8] 요청 헤더: accept-encoding: gzip
2025-03-30 18:53:33 [http-nio-8080-exec-3] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [cd00a6b8] 요청 헤더: authorization: Bearer eyJ...
2025-03-30 18:53:33 [http-nio-8080-exec-3] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [cd00a6b8] 요청 헤더: host: localhost:8080
2025-03-30 18:53:33 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.created_at,
        u1_0.display_name,
        u1_0.email,
        u1_0.is_email_verified,
        u1_0.last_login_at,
        u1_0.password,
        u1_0.photo_url,
        u1_0.plan_id,
        u1_0.provider,
        u1_0.role,
        u1_0.uid,
        u1_0.updated_at 
    from
        users u1_0 
    where
        u1_0.uid=?
2025-03-30 18:53:33 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        p1_0.id,
        p1_0.active,
        p1_0.annual_price,
        p1_0.created_at,
        p1_0.monthly_price,
        p1_0.monthly_token_limit,
        p1_0.name,
        p1_0.type,
        p1_0.updated_at 
    from
        plans p1_0 
    where
        p1_0.id=?
2025-03-30 18:53:33 [http-nio-8080-exec-3] INFO  c.e.p.c.f.RequestResponseLoggingFilter - [cd00a6b8] 응답: 200 (11ms)
2025-03-30 18:53:33 [http-nio-8080-exec-3] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [cd00a6b8] 응답 헤더: Vary: Origin
2025-03-30 18:53:33 [http-nio-8080-exec-3] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [cd00a6b8] 응답 헤더: Vary: Access-Control-Request-Method
2025-03-30 18:53:33 [http-nio-8080-exec-3] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [cd00a6b8] 응답 헤더: Vary: Access-Control-Request-Headers
2025-03-30 18:53:33 [http-nio-8080-exec-3] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [cd00a6b8] 응답 헤더: Vary: Origin
2025-03-30 18:53:33 [http-nio-8080-exec-3] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [cd00a6b8] 응답 헤더: Vary: Access-Control-Request-Method
2025-03-30 18:53:33 [http-nio-8080-exec-3] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [cd00a6b8] 응답 헤더: Vary: Access-Control-Request-Headers
2025-03-30 18:53:33 [http-nio-8080-exec-3] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [cd00a6b8] 응답 헤더: Vary: Origin
2025-03-30 18:53:33 [http-nio-8080-exec-3] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [cd00a6b8] 응답 헤더: Vary: Access-Control-Request-Method
2025-03-30 18:53:33 [http-nio-8080-exec-3] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [cd00a6b8] 응답 헤더: Vary: Access-Control-Request-Headers
2025-03-30 18:53:33 [http-nio-8080-exec-3] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [cd00a6b8] 응답 헤더: Content-Type: application/json
2025-03-30 18:53:33 [http-nio-8080-exec-3] DEBUG c.e.p.c.f.RequestResponseLoggingFilter - [cd00a6b8] 응답 본문: {"success":true,"status":200,"message":"내 정보를 성공적으로 조회했습니다.","data":{"id":1,"uid":"FckskR46rZMqByM1U9q6XzudUD23","email":"dltjdgur327@gmail.com","displayName":"이성혁","plan":{"id":1,"name":"Free","type":"FREE","monthlyPrice":0,"annualPrice":0,"monthlyTokenLimit":10000,"active":true,"createdAt":"2025-03-30T18:18:31.173805","updatedAt":"2025-03-30T18:18:31.173815"},"provider":"GOOGLE","role":"USER","active":true,"photoUrl":"https://lh3.googleusercontent.com/a/ACg8ocLoTzQiYf2FdnGiPYKW7SrIKqJdbSSV8rrKMv8HO4UAhFhflqlc=s96-c","isEmailVerified":false,"lastLoginAt":"2025-03-30T18:19:01.457444","createdAt":"2025-03-30T18:19:01.964959","updatedAt":"2025-03-30T18:19:01.97301"},"timestamp":"2025-03-30 18:53:33"}
